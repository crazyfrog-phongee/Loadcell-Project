
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003634  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037b8  080037b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080037c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08003830  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003830  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d73  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180a  00000000  00000000  00026e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  00028618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  00028db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fd0  00000000  00000000  00029498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3d8  00000000  00000000  00040468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008034a  00000000  00000000  0004a840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cab8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002334  00000000  00000000  000cabdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003728 	.word	0x08003728

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003728 	.word	0x08003728

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	; 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	3a01      	subs	r2, #1
 800057e:	bf28      	it	cs
 8000580:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000584:	d2ed      	bcs.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000732:	2afd      	cmp	r2, #253	; 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	; 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	; 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	; 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <__aeabi_ldivmod>:
 8000980:	b97b      	cbnz	r3, 80009a2 <__aeabi_ldivmod+0x22>
 8000982:	b972      	cbnz	r2, 80009a2 <__aeabi_ldivmod+0x22>
 8000984:	2900      	cmp	r1, #0
 8000986:	bfbe      	ittt	lt
 8000988:	2000      	movlt	r0, #0
 800098a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800098e:	e006      	blt.n	800099e <__aeabi_ldivmod+0x1e>
 8000990:	bf08      	it	eq
 8000992:	2800      	cmpeq	r0, #0
 8000994:	bf1c      	itt	ne
 8000996:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800099a:	f04f 30ff 	movne.w	r0, #4294967295
 800099e:	f000 b9a9 	b.w	8000cf4 <__aeabi_idiv0>
 80009a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009aa:	2900      	cmp	r1, #0
 80009ac:	db09      	blt.n	80009c2 <__aeabi_ldivmod+0x42>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db1a      	blt.n	80009e8 <__aeabi_ldivmod+0x68>
 80009b2:	f000 f835 	bl	8000a20 <__udivmoddi4>
 80009b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009be:	b004      	add	sp, #16
 80009c0:	4770      	bx	lr
 80009c2:	4240      	negs	r0, r0
 80009c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db1b      	blt.n	8000a04 <__aeabi_ldivmod+0x84>
 80009cc:	f000 f828 	bl	8000a20 <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4240      	negs	r0, r0
 80009dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009e0:	4252      	negs	r2, r2
 80009e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009e6:	4770      	bx	lr
 80009e8:	4252      	negs	r2, r2
 80009ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009ee:	f000 f817 	bl	8000a20 <__udivmoddi4>
 80009f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009fa:	b004      	add	sp, #16
 80009fc:	4240      	negs	r0, r0
 80009fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a02:	4770      	bx	lr
 8000a04:	4252      	negs	r2, r2
 8000a06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a0a:	f000 f809 	bl	8000a20 <__udivmoddi4>
 8000a0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a16:	b004      	add	sp, #16
 8000a18:	4252      	negs	r2, r2
 8000a1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a1e:	4770      	bx	lr

08000a20 <__udivmoddi4>:
 8000a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a24:	9e08      	ldr	r6, [sp, #32]
 8000a26:	460d      	mov	r5, r1
 8000a28:	4604      	mov	r4, r0
 8000a2a:	4688      	mov	r8, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d14d      	bne.n	8000acc <__udivmoddi4+0xac>
 8000a30:	428a      	cmp	r2, r1
 8000a32:	4694      	mov	ip, r2
 8000a34:	d968      	bls.n	8000b08 <__udivmoddi4+0xe8>
 8000a36:	fab2 f282 	clz	r2, r2
 8000a3a:	b152      	cbz	r2, 8000a52 <__udivmoddi4+0x32>
 8000a3c:	fa01 f302 	lsl.w	r3, r1, r2
 8000a40:	f1c2 0120 	rsb	r1, r2, #32
 8000a44:	fa20 f101 	lsr.w	r1, r0, r1
 8000a48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a4c:	ea41 0803 	orr.w	r8, r1, r3
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000a56:	fbb8 f7f1 	udiv	r7, r8, r1
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	fb01 8817 	mls	r8, r1, r7, r8
 8000a62:	fb07 f00e 	mul.w	r0, r7, lr
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a6c:	4298      	cmp	r0, r3
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x66>
 8000a70:	eb1c 0303 	adds.w	r3, ip, r3
 8000a74:	f107 35ff 	add.w	r5, r7, #4294967295
 8000a78:	f080 811e 	bcs.w	8000cb8 <__udivmoddi4+0x298>
 8000a7c:	4298      	cmp	r0, r3
 8000a7e:	f240 811b 	bls.w	8000cb8 <__udivmoddi4+0x298>
 8000a82:	3f02      	subs	r7, #2
 8000a84:	4463      	add	r3, ip
 8000a86:	1a1b      	subs	r3, r3, r0
 8000a88:	fbb3 f0f1 	udiv	r0, r3, r1
 8000a8c:	fb01 3310 	mls	r3, r1, r0, r3
 8000a90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a94:	b2a4      	uxth	r4, r4
 8000a96:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a9a:	45a6      	cmp	lr, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x94>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa6:	f080 8109 	bcs.w	8000cbc <__udivmoddi4+0x29c>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f240 8106 	bls.w	8000cbc <__udivmoddi4+0x29c>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	eba4 040e 	sub.w	r4, r4, lr
 8000aba:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000abe:	b11e      	cbz	r6, 8000ac8 <__udivmoddi4+0xa8>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	40d4      	lsrs	r4, r2
 8000ac4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d908      	bls.n	8000ae2 <__udivmoddi4+0xc2>
 8000ad0:	2e00      	cmp	r6, #0
 8000ad2:	f000 80ee 	beq.w	8000cb2 <__udivmoddi4+0x292>
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e9c6 0500 	strd	r0, r5, [r6]
 8000adc:	4608      	mov	r0, r1
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	fab3 f183 	clz	r1, r3
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	d14a      	bne.n	8000b80 <__udivmoddi4+0x160>
 8000aea:	42ab      	cmp	r3, r5
 8000aec:	d302      	bcc.n	8000af4 <__udivmoddi4+0xd4>
 8000aee:	4282      	cmp	r2, r0
 8000af0:	f200 80fc 	bhi.w	8000cec <__udivmoddi4+0x2cc>
 8000af4:	1a84      	subs	r4, r0, r2
 8000af6:	eb65 0303 	sbc.w	r3, r5, r3
 8000afa:	2001      	movs	r0, #1
 8000afc:	4698      	mov	r8, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d0e2      	beq.n	8000ac8 <__udivmoddi4+0xa8>
 8000b02:	e9c6 4800 	strd	r4, r8, [r6]
 8000b06:	e7df      	b.n	8000ac8 <__udivmoddi4+0xa8>
 8000b08:	b902      	cbnz	r2, 8000b0c <__udivmoddi4+0xec>
 8000b0a:	deff      	udf	#255	; 0xff
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f040 8091 	bne.w	8000c38 <__udivmoddi4+0x218>
 8000b16:	eba1 000c 	sub.w	r0, r1, ip
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b20:	fa1f fe8c 	uxth.w	lr, ip
 8000b24:	fbb0 f3f7 	udiv	r3, r0, r7
 8000b28:	fb07 0013 	mls	r0, r7, r3, r0
 8000b2c:	0c25      	lsrs	r5, r4, #16
 8000b2e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000b32:	fb0e f003 	mul.w	r0, lr, r3
 8000b36:	42a8      	cmp	r0, r5
 8000b38:	d908      	bls.n	8000b4c <__udivmoddi4+0x12c>
 8000b3a:	eb1c 0505 	adds.w	r5, ip, r5
 8000b3e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b42:	d202      	bcs.n	8000b4a <__udivmoddi4+0x12a>
 8000b44:	42a8      	cmp	r0, r5
 8000b46:	f200 80ce 	bhi.w	8000ce6 <__udivmoddi4+0x2c6>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	1a2d      	subs	r5, r5, r0
 8000b4e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000b52:	fb07 5510 	mls	r5, r7, r0, r5
 8000b56:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d908      	bls.n	8000b76 <__udivmoddi4+0x156>
 8000b64:	eb1c 0404 	adds.w	r4, ip, r4
 8000b68:	f100 35ff 	add.w	r5, r0, #4294967295
 8000b6c:	d202      	bcs.n	8000b74 <__udivmoddi4+0x154>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f200 80b6 	bhi.w	8000ce0 <__udivmoddi4+0x2c0>
 8000b74:	4628      	mov	r0, r5
 8000b76:	eba4 040e 	sub.w	r4, r4, lr
 8000b7a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b7e:	e79e      	b.n	8000abe <__udivmoddi4+0x9e>
 8000b80:	f1c1 0720 	rsb	r7, r1, #32
 8000b84:	408b      	lsls	r3, r1
 8000b86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000b92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b96:	fbba f8f9 	udiv	r8, sl, r9
 8000b9a:	fa20 f307 	lsr.w	r3, r0, r7
 8000b9e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000ba2:	408d      	lsls	r5, r1
 8000ba4:	fa1f fe8c 	uxth.w	lr, ip
 8000ba8:	431d      	orrs	r5, r3
 8000baa:	fa00 f301 	lsl.w	r3, r0, r1
 8000bae:	fb08 f00e 	mul.w	r0, r8, lr
 8000bb2:	0c2c      	lsrs	r4, r5, #16
 8000bb4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000bb8:	42a0      	cmp	r0, r4
 8000bba:	fa02 f201 	lsl.w	r2, r2, r1
 8000bbe:	d90b      	bls.n	8000bd8 <__udivmoddi4+0x1b8>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc8:	f080 8088 	bcs.w	8000cdc <__udivmoddi4+0x2bc>
 8000bcc:	42a0      	cmp	r0, r4
 8000bce:	f240 8085 	bls.w	8000cdc <__udivmoddi4+0x2bc>
 8000bd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd6:	4464      	add	r4, ip
 8000bd8:	1a24      	subs	r4, r4, r0
 8000bda:	fbb4 f0f9 	udiv	r0, r4, r9
 8000bde:	fb09 4410 	mls	r4, r9, r0, r4
 8000be2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x1e2>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000bf8:	d26c      	bcs.n	8000cd4 <__udivmoddi4+0x2b4>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	d96a      	bls.n	8000cd4 <__udivmoddi4+0x2b4>
 8000bfe:	3802      	subs	r0, #2
 8000c00:	4464      	add	r4, ip
 8000c02:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c06:	fba0 9502 	umull	r9, r5, r0, r2
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	42ac      	cmp	r4, r5
 8000c10:	46c8      	mov	r8, r9
 8000c12:	46ae      	mov	lr, r5
 8000c14:	d356      	bcc.n	8000cc4 <__udivmoddi4+0x2a4>
 8000c16:	d053      	beq.n	8000cc0 <__udivmoddi4+0x2a0>
 8000c18:	2e00      	cmp	r6, #0
 8000c1a:	d069      	beq.n	8000cf0 <__udivmoddi4+0x2d0>
 8000c1c:	ebb3 0208 	subs.w	r2, r3, r8
 8000c20:	eb64 040e 	sbc.w	r4, r4, lr
 8000c24:	fa22 f301 	lsr.w	r3, r2, r1
 8000c28:	fa04 f707 	lsl.w	r7, r4, r7
 8000c2c:	431f      	orrs	r7, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c6 7400 	strd	r7, r4, [r6]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e747      	b.n	8000ac8 <__udivmoddi4+0xa8>
 8000c38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3c:	f1c2 0120 	rsb	r1, r2, #32
 8000c40:	fa25 f301 	lsr.w	r3, r5, r1
 8000c44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c48:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	430d      	orrs	r5, r1
 8000c50:	fbb3 f1f7 	udiv	r1, r3, r7
 8000c54:	fb07 3311 	mls	r3, r7, r1, r3
 8000c58:	fa1f fe8c 	uxth.w	lr, ip
 8000c5c:	0c28      	lsrs	r0, r5, #16
 8000c5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c62:	fb01 f30e 	mul.w	r3, r1, lr
 8000c66:	4283      	cmp	r3, r0
 8000c68:	fa04 f402 	lsl.w	r4, r4, r2
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x260>
 8000c6e:	eb1c 0000 	adds.w	r0, ip, r0
 8000c72:	f101 38ff 	add.w	r8, r1, #4294967295
 8000c76:	d22f      	bcs.n	8000cd8 <__udivmoddi4+0x2b8>
 8000c78:	4283      	cmp	r3, r0
 8000c7a:	d92d      	bls.n	8000cd8 <__udivmoddi4+0x2b8>
 8000c7c:	3902      	subs	r1, #2
 8000c7e:	4460      	add	r0, ip
 8000c80:	1ac0      	subs	r0, r0, r3
 8000c82:	fbb0 f3f7 	udiv	r3, r0, r7
 8000c86:	fb07 0013 	mls	r0, r7, r3, r0
 8000c8a:	b2ad      	uxth	r5, r5
 8000c8c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c90:	fb03 f00e 	mul.w	r0, r3, lr
 8000c94:	42a8      	cmp	r0, r5
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x28a>
 8000c98:	eb1c 0505 	adds.w	r5, ip, r5
 8000c9c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca0:	d216      	bcs.n	8000cd0 <__udivmoddi4+0x2b0>
 8000ca2:	42a8      	cmp	r0, r5
 8000ca4:	d914      	bls.n	8000cd0 <__udivmoddi4+0x2b0>
 8000ca6:	3b02      	subs	r3, #2
 8000ca8:	4465      	add	r5, ip
 8000caa:	1a28      	subs	r0, r5, r0
 8000cac:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cb0:	e738      	b.n	8000b24 <__udivmoddi4+0x104>
 8000cb2:	4631      	mov	r1, r6
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	e707      	b.n	8000ac8 <__udivmoddi4+0xa8>
 8000cb8:	462f      	mov	r7, r5
 8000cba:	e6e4      	b.n	8000a86 <__udivmoddi4+0x66>
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	e6f9      	b.n	8000ab4 <__udivmoddi4+0x94>
 8000cc0:	454b      	cmp	r3, r9
 8000cc2:	d2a9      	bcs.n	8000c18 <__udivmoddi4+0x1f8>
 8000cc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ccc:	3801      	subs	r0, #1
 8000cce:	e7a3      	b.n	8000c18 <__udivmoddi4+0x1f8>
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	e7ea      	b.n	8000caa <__udivmoddi4+0x28a>
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	e794      	b.n	8000c02 <__udivmoddi4+0x1e2>
 8000cd8:	4641      	mov	r1, r8
 8000cda:	e7d1      	b.n	8000c80 <__udivmoddi4+0x260>
 8000cdc:	46d0      	mov	r8, sl
 8000cde:	e77b      	b.n	8000bd8 <__udivmoddi4+0x1b8>
 8000ce0:	4464      	add	r4, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	e747      	b.n	8000b76 <__udivmoddi4+0x156>
 8000ce6:	3b02      	subs	r3, #2
 8000ce8:	4465      	add	r5, ip
 8000cea:	e72f      	b.n	8000b4c <__udivmoddi4+0x12c>
 8000cec:	4608      	mov	r0, r1
 8000cee:	e706      	b.n	8000afe <__udivmoddi4+0xde>
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e6e9      	b.n	8000ac8 <__udivmoddi4+0xa8>

08000cf4 <__aeabi_idiv0>:
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0c:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a34      	ldr	r2, [pc, #208]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d12:	f043 0310 	orr.w	r3, r3, #16
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0310 	and.w	r3, r3, #16
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d24:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d2a:	f043 0320 	orr.w	r3, r3, #32
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0320 	and.w	r3, r3, #32
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d72:	481d      	ldr	r0, [pc, #116]	; (8000de8 <MX_GPIO_Init+0xf0>)
 8000d74:	f000 ff97 	bl	8001ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7e:	481b      	ldr	r0, [pc, #108]	; (8000dec <MX_GPIO_Init+0xf4>)
 8000d80:	f000 ff91 	bl	8001ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4812      	ldr	r0, [pc, #72]	; (8000de8 <MX_GPIO_Init+0xf0>)
 8000d9e:	f000 fdef 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000da2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <MX_GPIO_Init+0xf4>)
 8000dbc:	f000 fde0 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_GPIO_Init+0xf4>)
 8000dd6:	f000 fdd3 	bl	8001980 <HAL_GPIO_Init>

}
 8000dda:	bf00      	nop
 8000ddc:	3720      	adds	r7, #32
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40011000 	.word	0x40011000
 8000dec:	40010c00 	.word	0x40010c00

08000df0 <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 8000df6:	2304      	movs	r3, #4
 8000df8:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 8000dfa:	e006      	b.n	8000e0a <hx711_delay_us+0x1a>
  {
    delay--;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
    __NOP();__NOP();__NOP();__NOP();
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
  while (delay > 0)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f5      	bne.n	8000dfc <hx711_delay_us+0xc>
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8000e24:	e002      	b.n	8000e2c <hx711_lock+0x10>
    hx711_delay(1);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 fca2 	bl	8001770 <HAL_Delay>
  while (hx711->lock)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7d1b      	ldrb	r3, [r3, #20]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f8      	bne.n	8000e26 <hx711_lock+0xa>
  hx711->lock = 1;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2201      	movs	r2, #1
 8000e38:	751a      	strb	r2, [r3, #20]
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	751a      	strb	r2, [r3, #20]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b088      	sub	sp, #32
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	4613      	mov	r3, r2
 8000e68:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f7ff ffd6 	bl	8000e1c <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e86:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	61fb      	str	r3, [r7, #28]
  gpio.Pin = clk_pin;
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	4619      	mov	r1, r3
 8000eac:	68b8      	ldr	r0, [r7, #8]
 8000eae:	f000 fd67 	bl	8001980 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_PULLUP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	61fb      	str	r3, [r7, #28]
  gpio.Pin = dat_pin;
 8000ebe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ec0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	6838      	ldr	r0, [r7, #0]
 8000eca:	f000 fd59 	bl	8001980 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	891b      	ldrh	r3, [r3, #8]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f000 fee4 	bl	8001ca6 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f000 fc46 	bl	8001770 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	891b      	ldrh	r3, [r3, #8]
 8000eec:	2200      	movs	r2, #0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f000 fed9 	bl	8001ca6 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8000ef4:	200a      	movs	r0, #10
 8000ef6:	f000 fc3b 	bl	8001770 <HAL_Delay>
  hx711_value(hx711);
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 f80a 	bl	8000f14 <hx711_value>
  hx711_value(hx711);
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f000 f807 	bl	8000f14 <hx711_value>
  hx711_unlock(hx711);
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f7ff ff9b 	bl	8000e42 <hx711_unlock>
}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8000f20:	f000 fc1c 	bl	800175c <HAL_GetTick>
 8000f24:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000f26:	e00b      	b.n	8000f40 <hx711_value+0x2c>
  {
    hx711_delay(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f000 fc21 	bl	8001770 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8000f2e:	f000 fc15 	bl	800175c <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b96      	cmp	r3, #150	; 0x96
 8000f3a:	d901      	bls.n	8000f40 <hx711_value+0x2c>
      return 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e055      	b.n	8000fec <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	895b      	ldrh	r3, [r3, #10]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	f000 fe94 	bl	8001c78 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d0e8      	beq.n	8000f28 <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	74fb      	strb	r3, [r7, #19]
 8000f5a:	e02a      	b.n	8000fb2 <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	891b      	ldrh	r3, [r3, #8]
 8000f64:	2201      	movs	r2, #1
 8000f66:	4619      	mov	r1, r3
 8000f68:	f000 fe9d 	bl	8001ca6 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8000f6c:	f7ff ff40 	bl	8000df0 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	891b      	ldrh	r3, [r3, #8]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f000 fe93 	bl	8001ca6 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8000f80:	f7ff ff36 	bl	8000df0 <hx711_delay_us>
    data = data << 1;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	895b      	ldrh	r3, [r3, #10]
 8000f92:	4619      	mov	r1, r3
 8000f94:	4610      	mov	r0, r2
 8000f96:	f000 fe6f 	bl	8001c78 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d102      	bne.n	8000fa6 <hx711_value+0x92>
      data ++;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8000fa6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	74fb      	strb	r3, [r7, #19]
 8000fb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fb6:	2b17      	cmp	r3, #23
 8000fb8:	ddd0      	ble.n	8000f5c <hx711_value+0x48>
  }
  data = data ^ 0x800000;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8000fc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	891b      	ldrh	r3, [r3, #8]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f000 fe6a 	bl	8001ca6 <HAL_GPIO_WritePin>
  hx711_delay_us();
 8000fd2:	f7ff ff0d 	bl	8000df0 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	891b      	ldrh	r3, [r3, #8]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f000 fe60 	bl	8001ca6 <HAL_GPIO_WritePin>
  hx711_delay_us();
 8000fe6:	f7ff ff03 	bl	8000df0 <hx711_delay_us>
  return data;
 8000fea:	697b      	ldr	r3, [r7, #20]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 8000ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	460b      	mov	r3, r1
 8001000:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff0a 	bl	8000e1c <hx711_lock>
  int64_t  ave = 0;
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 8001014:	2300      	movs	r3, #0
 8001016:	81fb      	strh	r3, [r7, #14]
 8001018:	e014      	b.n	8001044 <hx711_tare+0x50>
  {
    ave += hx711_value(hx711);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff7a 	bl	8000f14 <hx711_value>
 8001020:	4603      	mov	r3, r0
 8001022:	17da      	asrs	r2, r3, #31
 8001024:	461c      	mov	r4, r3
 8001026:	4615      	mov	r5, r2
 8001028:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800102c:	eb12 0804 	adds.w	r8, r2, r4
 8001030:	eb43 0905 	adc.w	r9, r3, r5
 8001034:	e9c7 8904 	strd	r8, r9, [r7, #16]
    hx711_delay(5);
 8001038:	2005      	movs	r0, #5
 800103a:	f000 fb99 	bl	8001770 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	3301      	adds	r3, #1
 8001042:	81fb      	strh	r3, [r7, #14]
 8001044:	89fa      	ldrh	r2, [r7, #14]
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	429a      	cmp	r2, r3
 800104a:	d3e6      	bcc.n	800101a <hx711_tare+0x26>
  }
  hx711->offset = (int32_t)(ave / sample);
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	2200      	movs	r2, #0
 8001050:	469a      	mov	sl, r3
 8001052:	4693      	mov	fp, r2
 8001054:	4652      	mov	r2, sl
 8001056:	465b      	mov	r3, fp
 8001058:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800105c:	f7ff fc90 	bl	8000980 <__aeabi_ldivmod>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff feea 	bl	8000e42 <hx711_unlock>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001078 <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8001078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800107c:	b088      	sub	sp, #32
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fec8 	bl	8000e1c <hx711_lock>
  int64_t  ave = 0;
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	82fb      	strh	r3, [r7, #22]
 800109c:	e014      	b.n	80010c8 <hx711_weight+0x50>
  {
    ave += hx711_value(hx711);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff38 	bl	8000f14 <hx711_value>
 80010a4:	4603      	mov	r3, r0
 80010a6:	17da      	asrs	r2, r3, #31
 80010a8:	461c      	mov	r4, r3
 80010aa:	4615      	mov	r5, r2
 80010ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010b0:	eb12 0804 	adds.w	r8, r2, r4
 80010b4:	eb43 0905 	adc.w	r9, r3, r5
 80010b8:	e9c7 8906 	strd	r8, r9, [r7, #24]
    hx711_delay(5);
 80010bc:	2005      	movs	r0, #5
 80010be:	f000 fb57 	bl	8001770 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 80010c2:	8afb      	ldrh	r3, [r7, #22]
 80010c4:	3301      	adds	r3, #1
 80010c6:	82fb      	strh	r3, [r7, #22]
 80010c8:	8afa      	ldrh	r2, [r7, #22]
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d3e6      	bcc.n	800109e <hx711_weight+0x26>
  }
  int32_t data = (int32_t)(ave / sample);
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	2200      	movs	r2, #0
 80010d4:	469a      	mov	sl, r3
 80010d6:	4693      	mov	fp, r2
 80010d8:	4652      	mov	r2, sl
 80010da:	465b      	mov	r3, fp
 80010dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010e0:	f7ff fc4e 	bl	8000980 <__aeabi_ldivmod>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4613      	mov	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa9f 	bl	8000638 <__aeabi_i2f>
 80010fa:	4602      	mov	r2, r0
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	4619      	mov	r1, r3
 8001102:	4610      	mov	r0, r2
 8001104:	f7ff fba0 	bl	8000848 <__aeabi_fdiv>
 8001108:	4603      	mov	r3, r0
 800110a:	60fb      	str	r3, [r7, #12]
  hx711_unlock(hx711);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fe98 	bl	8000e42 <hx711_unlock>
  return answer;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800111e <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
  hx711->coef = coef;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	611a      	str	r2, [r3, #16]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af02      	add	r7, sp, #8
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f023 030f 	bic.w	r3, r3, #15
 8001148:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	f043 030c 	orr.w	r3, r3, #12
 8001156:	b2db      	uxtb	r3, r3
 8001158:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	b2db      	uxtb	r3, r3
 8001162:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	f043 030c 	orr.w	r3, r3, #12
 800116a:	b2db      	uxtb	r3, r3
 800116c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	b2db      	uxtb	r3, r3
 8001176:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001178:	f107 0208 	add.w	r2, r7, #8
 800117c:	2364      	movs	r3, #100	; 0x64
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2304      	movs	r3, #4
 8001182:	214e      	movs	r1, #78	; 0x4e
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <lcd_send_cmd+0x5c>)
 8001186:	f000 ff03 	bl	8001f90 <HAL_I2C_Master_Transmit>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000008c 	.word	0x2000008c

08001198 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af02      	add	r7, sp, #8
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f023 030f 	bic.w	r3, r3, #15
 80011a8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	f043 030d 	orr.w	r3, r3, #13
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	f043 0309 	orr.w	r3, r3, #9
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80011c4:	7bbb      	ldrb	r3, [r7, #14]
 80011c6:	f043 030d 	orr.w	r3, r3, #13
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	f043 0309 	orr.w	r3, r3, #9
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011d8:	f107 0208 	add.w	r2, r7, #8
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2304      	movs	r3, #4
 80011e2:	214e      	movs	r1, #78	; 0x4e
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <lcd_send_data+0x5c>)
 80011e6:	f000 fed3 	bl	8001f90 <HAL_I2C_Master_Transmit>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000008c 	.word	0x2000008c

080011f8 <lcd_clear>:

void lcd_clear (void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80011fe:	2080      	movs	r0, #128	; 0x80
 8001200:	f7ff ff9a 	bl	8001138 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	e005      	b.n	8001216 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800120a:	2020      	movs	r0, #32
 800120c:	f7ff ffc4 	bl	8001198 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3301      	adds	r3, #1
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b45      	cmp	r3, #69	; 0x45
 800121a:	ddf6      	ble.n	800120a <lcd_clear+0x12>
	}
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
    switch (row)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <lcd_put_cur+0x18>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d005      	beq.n	8001248 <lcd_put_cur+0x22>
 800123c:	e009      	b.n	8001252 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001244:	603b      	str	r3, [r7, #0]
            break;
 8001246:	e004      	b.n	8001252 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800124e:	603b      	str	r3, [r7, #0]
            break;
 8001250:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff6e 	bl	8001138 <lcd_send_cmd>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <lcd_init>:


void lcd_init (void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001268:	2032      	movs	r0, #50	; 0x32
 800126a:	f000 fa81 	bl	8001770 <HAL_Delay>
	lcd_send_cmd (0x30);
 800126e:	2030      	movs	r0, #48	; 0x30
 8001270:	f7ff ff62 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001274:	2005      	movs	r0, #5
 8001276:	f000 fa7b 	bl	8001770 <HAL_Delay>
	lcd_send_cmd (0x30);
 800127a:	2030      	movs	r0, #48	; 0x30
 800127c:	f7ff ff5c 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001280:	2001      	movs	r0, #1
 8001282:	f000 fa75 	bl	8001770 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001286:	2030      	movs	r0, #48	; 0x30
 8001288:	f7ff ff56 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(10);
 800128c:	200a      	movs	r0, #10
 800128e:	f000 fa6f 	bl	8001770 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001292:	2020      	movs	r0, #32
 8001294:	f7ff ff50 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(10);
 8001298:	200a      	movs	r0, #10
 800129a:	f000 fa69 	bl	8001770 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800129e:	2028      	movs	r0, #40	; 0x28
 80012a0:	f7ff ff4a 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f000 fa63 	bl	8001770 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80012aa:	2008      	movs	r0, #8
 80012ac:	f7ff ff44 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(1);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f000 fa5d 	bl	8001770 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80012b6:	2001      	movs	r0, #1
 80012b8:	f7ff ff3e 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f000 fa57 	bl	8001770 <HAL_Delay>
	HAL_Delay(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f000 fa54 	bl	8001770 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80012c8:	2006      	movs	r0, #6
 80012ca:	f7ff ff35 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f000 fa4e 	bl	8001770 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80012d4:	200c      	movs	r0, #12
 80012d6:	f7ff ff2f 	bl	8001138 <lcd_send_cmd>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}

080012de <lcd_send_string>:

void lcd_send_string (char *str)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012e6:	e006      	b.n	80012f6 <lcd_send_string+0x18>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff51 	bl	8001198 <lcd_send_data>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f4      	bne.n	80012e8 <lcd_send_string+0xa>
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_I2C1_Init+0x50>)
 800130e:	4a13      	ldr	r2, [pc, #76]	; (800135c <MX_I2C1_Init+0x54>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_I2C1_Init+0x50>)
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_I2C1_Init+0x58>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_I2C1_Init+0x50>)
 8001326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_I2C1_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_I2C1_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_I2C1_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_I2C1_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_I2C1_Init+0x50>)
 8001346:	f000 fcdf 	bl	8001d08 <HAL_I2C_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001350:	f000 f8eb 	bl	800152a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000008c 	.word	0x2000008c
 800135c:	40005400 	.word	0x40005400
 8001360:	000186a0 	.word	0x000186a0

08001364 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <HAL_I2C_MspInit+0x74>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d125      	bne.n	80013d0 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_I2C_MspInit+0x78>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <HAL_I2C_MspInit+0x78>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_I2C_MspInit+0x78>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800139c:	23c0      	movs	r3, #192	; 0xc0
 800139e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a0:	2312      	movs	r3, #18
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4619      	mov	r1, r3
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <HAL_I2C_MspInit+0x7c>)
 80013b4:	f000 fae4 	bl	8001980 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_I2C_MspInit+0x78>)
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_I2C_MspInit+0x78>)
 80013be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013c2:	61d3      	str	r3, [r2, #28]
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_I2C_MspInit+0x78>)
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40005400 	.word	0x40005400
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010c00 	.word	0x40010c00

080013e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ea:	f000 f95f 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ee:	f000 f857 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f2:	f7ff fc81 	bl	8000cf8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013f6:	f7ff ff87 	bl	8001308 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize Loadcell with Module HX711 */
  hx711_init(&loadcell, HX711_CLK_GPIO_Port, HX711_CLK_Pin, HX711_DATA_GPIO_Port, HX711_DATA_Pin);
 80013fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <main+0x9c>)
 8001402:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001406:	491e      	ldr	r1, [pc, #120]	; (8001480 <main+0x9c>)
 8001408:	481e      	ldr	r0, [pc, #120]	; (8001484 <main+0xa0>)
 800140a:	f7ff fd26 	bl	8000e5a <hx711_init>

  /* Reading after calibration */
  hx711_coef_set(&loadcell, 354.5);
 800140e:	491e      	ldr	r1, [pc, #120]	; (8001488 <main+0xa4>)
 8001410:	481c      	ldr	r0, [pc, #112]	; (8001484 <main+0xa0>)
 8001412:	f7ff fe84 	bl	800111e <hx711_coef_set>
  hx711_tare(&loadcell, 10);
 8001416:	210a      	movs	r1, #10
 8001418:	481a      	ldr	r0, [pc, #104]	; (8001484 <main+0xa0>)
 800141a:	f7ff fdeb 	bl	8000ff4 <hx711_tare>

  /* Init LCD1602 */
  lcd_init();
 800141e:	f7ff ff21 	bl	8001264 <lcd_init>
  lcd_clear();
 8001422:	f7ff fee9 	bl	80011f8 <lcd_clear>
  lcd_put_cur(0, 0);
 8001426:	2100      	movs	r1, #0
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff fefc 	bl	8001226 <lcd_put_cur>
  lcd_send_string("Khoi luong: ");
 800142e:	4817      	ldr	r0, [pc, #92]	; (800148c <main+0xa8>)
 8001430:	f7ff ff55 	bl	80012de <lcd_send_string>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001438:	4815      	ldr	r0, [pc, #84]	; (8001490 <main+0xac>)
 800143a:	f000 fc4c 	bl	8001cd6 <HAL_GPIO_TogglePin>
	  weight = hx711_weight(&loadcell, 10);
 800143e:	210a      	movs	r1, #10
 8001440:	4810      	ldr	r0, [pc, #64]	; (8001484 <main+0xa0>)
 8001442:	f7ff fe19 	bl	8001078 <hx711_weight>
 8001446:	4603      	mov	r3, r0
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <main+0xb0>)
 800144a:	6013      	str	r3, [r2, #0]
	  snprintf(buffer, sizeof buffer, "%f", weight); // @suppress("Float formatting support")
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <main+0xb0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe ffdf 	bl	8000414 <__aeabi_f2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	e9cd 2300 	strd	r2, r3, [sp]
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <main+0xb4>)
 8001460:	210a      	movs	r1, #10
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <main+0xb8>)
 8001464:	f001 fcd2 	bl	8002e0c <sniprintf>

	  lcd_put_cur(1, 4);
 8001468:	2104      	movs	r1, #4
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff fedb 	bl	8001226 <lcd_put_cur>
	  lcd_send_string(buffer);
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <main+0xb8>)
 8001472:	f7ff ff34 	bl	80012de <lcd_send_string>

	  HAL_Delay(5000);
 8001476:	f241 3088 	movw	r0, #5000	; 0x1388
 800147a:	f000 f979 	bl	8001770 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800147e:	e7d9      	b.n	8001434 <main+0x50>
 8001480:	40010c00 	.word	0x40010c00
 8001484:	200000e0 	.word	0x200000e0
 8001488:	43b14000 	.word	0x43b14000
 800148c:	08003740 	.word	0x08003740
 8001490:	40011000 	.word	0x40011000
 8001494:	200000f8 	.word	0x200000f8
 8001498:	08003750 	.word	0x08003750
 800149c:	200000fc 	.word	0x200000fc

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b090      	sub	sp, #64	; 0x40
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	2228      	movs	r2, #40	; 0x28
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 fca4 	bl	8002dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d4:	2302      	movs	r3, #2
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 f857 	bl	800259c <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014f4:	f000 f819 	bl	800152a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	230f      	movs	r3, #15
 80014fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	2302      	movs	r3, #2
 80014fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001508:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2102      	movs	r1, #2
 8001512:	4618      	mov	r0, r3
 8001514:	f001 fac4 	bl	8002aa0 <HAL_RCC_ClockConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800151e:	f000 f804 	bl	800152a <Error_Handler>
  }
}
 8001522:	bf00      	nop
 8001524:	3740      	adds	r7, #64	; 0x40
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152e:	b672      	cpsid	i
}
 8001530:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001532:	e7fe      	b.n	8001532 <Error_Handler+0x8>

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_MspInit+0x5c>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	4a14      	ldr	r2, [pc, #80]	; (8001590 <HAL_MspInit+0x5c>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6193      	str	r3, [r2, #24]
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_MspInit+0x5c>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_MspInit+0x5c>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_MspInit+0x5c>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	61d3      	str	r3, [r2, #28]
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_MspInit+0x5c>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_MspInit+0x60>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_MspInit+0x60>)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	40021000 	.word	0x40021000
 8001594:	40010000 	.word	0x40010000

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800159c:	e7fe      	b.n	800159c <NMI_Handler+0x4>

0800159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <MemManage_Handler+0x4>

080015aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015de:	f000 f8ab 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <_sbrk+0x5c>)
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <_sbrk+0x60>)
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <_sbrk+0x64>)
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <_sbrk+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d207      	bcs.n	8001628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001618:	f001 fbc6 	bl	8002da8 <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	220c      	movs	r2, #12
 8001620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	e009      	b.n	800163c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <_sbrk+0x64>)
 8001638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20002800 	.word	0x20002800
 8001648:	00000400 	.word	0x00000400
 800164c:	20000108 	.word	0x20000108
 8001650:	20000120 	.word	0x20000120

08001654 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <Reset_Handler>:
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <LoopFillZerobss+0x12>)
 8001662:	490d      	ldr	r1, [pc, #52]	; (8001698 <LoopFillZerobss+0x16>)
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <LoopFillZerobss+0x1a>)
 8001666:	2300      	movs	r3, #0
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:
 800166a:	58d4      	ldr	r4, [r2, r3]
 800166c:	50c4      	str	r4, [r0, r3]
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:
 8001670:	18c4      	adds	r4, r0, r3
 8001672:	428c      	cmp	r4, r1
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <LoopFillZerobss+0x1e>)
 8001678:	4c0a      	ldr	r4, [pc, #40]	; (80016a4 <LoopFillZerobss+0x22>)
 800167a:	2300      	movs	r3, #0
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:
 8001682:	42a2      	cmp	r2, r4
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>
 8001686:	f7ff ffe5 	bl	8001654 <SystemInit>
 800168a:	f001 fb93 	bl	8002db4 <__libc_init_array>
 800168e:	f7ff fea9 	bl	80013e4 <main>
 8001692:	4770      	bx	lr
 8001694:	20000000 	.word	0x20000000
 8001698:	20000070 	.word	0x20000070
 800169c:	080037c0 	.word	0x080037c0
 80016a0:	20000070 	.word	0x20000070
 80016a4:	20000120 	.word	0x20000120

080016a8 <ADC1_2_IRQHandler>:
 80016a8:	e7fe      	b.n	80016a8 <ADC1_2_IRQHandler>
	...

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_Init+0x28>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_Init+0x28>)
 80016b6:	f043 0310 	orr.w	r3, r3, #16
 80016ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f92b 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c2:	200f      	movs	r0, #15
 80016c4:	f000 f808 	bl	80016d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c8:	f7ff ff34 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x54>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_InitTick+0x58>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f935 	bl	8001966 <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e00e      	b.n	8001724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d80a      	bhi.n	8001722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f000 f90b 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <HAL_InitTick+0x5c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000000 	.word	0x20000000
 8001730:	20000008 	.word	0x20000008
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x1c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x20>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a03      	ldr	r2, [pc, #12]	; (8001758 <HAL_IncTick+0x20>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	20000008 	.word	0x20000008
 8001758:	2000010c 	.word	0x2000010c

0800175c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <HAL_GetTick+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	2000010c 	.word	0x2000010c

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff fff0 	bl	800175c <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffe0 	bl	800175c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	; (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff90 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff49 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff5e 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff90 	bl	8001870 <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5f 	bl	800181c <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffb0 	bl	80018d4 <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b08b      	sub	sp, #44	; 0x2c
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	e161      	b.n	8001c58 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001994:	2201      	movs	r2, #1
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 8150 	bne.w	8001c52 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a97      	ldr	r2, [pc, #604]	; (8001c14 <HAL_GPIO_Init+0x294>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d05e      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019bc:	4a95      	ldr	r2, [pc, #596]	; (8001c14 <HAL_GPIO_Init+0x294>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d875      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019c2:	4a95      	ldr	r2, [pc, #596]	; (8001c18 <HAL_GPIO_Init+0x298>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d058      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019c8:	4a93      	ldr	r2, [pc, #588]	; (8001c18 <HAL_GPIO_Init+0x298>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d86f      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019ce:	4a93      	ldr	r2, [pc, #588]	; (8001c1c <HAL_GPIO_Init+0x29c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d052      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019d4:	4a91      	ldr	r2, [pc, #580]	; (8001c1c <HAL_GPIO_Init+0x29c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d869      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019da:	4a91      	ldr	r2, [pc, #580]	; (8001c20 <HAL_GPIO_Init+0x2a0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d04c      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019e0:	4a8f      	ldr	r2, [pc, #572]	; (8001c20 <HAL_GPIO_Init+0x2a0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d863      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019e6:	4a8f      	ldr	r2, [pc, #572]	; (8001c24 <HAL_GPIO_Init+0x2a4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d046      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019ec:	4a8d      	ldr	r2, [pc, #564]	; (8001c24 <HAL_GPIO_Init+0x2a4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d85d      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d82a      	bhi.n	8001a4c <HAL_GPIO_Init+0xcc>
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d859      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019fa:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <HAL_GPIO_Init+0x80>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a7b 	.word	0x08001a7b
 8001a04:	08001a55 	.word	0x08001a55
 8001a08:	08001a67 	.word	0x08001a67
 8001a0c:	08001aa9 	.word	0x08001aa9
 8001a10:	08001aaf 	.word	0x08001aaf
 8001a14:	08001aaf 	.word	0x08001aaf
 8001a18:	08001aaf 	.word	0x08001aaf
 8001a1c:	08001aaf 	.word	0x08001aaf
 8001a20:	08001aaf 	.word	0x08001aaf
 8001a24:	08001aaf 	.word	0x08001aaf
 8001a28:	08001aaf 	.word	0x08001aaf
 8001a2c:	08001aaf 	.word	0x08001aaf
 8001a30:	08001aaf 	.word	0x08001aaf
 8001a34:	08001aaf 	.word	0x08001aaf
 8001a38:	08001aaf 	.word	0x08001aaf
 8001a3c:	08001aaf 	.word	0x08001aaf
 8001a40:	08001aaf 	.word	0x08001aaf
 8001a44:	08001a5d 	.word	0x08001a5d
 8001a48:	08001a71 	.word	0x08001a71
 8001a4c:	4a76      	ldr	r2, [pc, #472]	; (8001c28 <HAL_GPIO_Init+0x2a8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a52:	e02c      	b.n	8001aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	623b      	str	r3, [r7, #32]
          break;
 8001a5a:	e029      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	3304      	adds	r3, #4
 8001a62:	623b      	str	r3, [r7, #32]
          break;
 8001a64:	e024      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e01f      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	330c      	adds	r3, #12
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e01a      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a82:	2304      	movs	r3, #4
 8001a84:	623b      	str	r3, [r7, #32]
          break;
 8001a86:	e013      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	611a      	str	r2, [r3, #16]
          break;
 8001a9a:	e009      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	615a      	str	r2, [r3, #20]
          break;
 8001aa6:	e003      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
          break;
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          break;
 8001aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d801      	bhi.n	8001aba <HAL_GPIO_Init+0x13a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_Init+0x13e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2bff      	cmp	r3, #255	; 0xff
 8001ac4:	d802      	bhi.n	8001acc <HAL_GPIO_Init+0x14c>
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x152>
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	3b08      	subs	r3, #8
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	210f      	movs	r1, #15
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	6a39      	ldr	r1, [r7, #32]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	431a      	orrs	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80a9 	beq.w	8001c52 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b00:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_GPIO_Init+0x2ac>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a49      	ldr	r2, [pc, #292]	; (8001c2c <HAL_GPIO_Init+0x2ac>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <HAL_GPIO_Init+0x2ac>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b18:	4a45      	ldr	r2, [pc, #276]	; (8001c30 <HAL_GPIO_Init+0x2b0>)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a3d      	ldr	r2, [pc, #244]	; (8001c34 <HAL_GPIO_Init+0x2b4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00d      	beq.n	8001b60 <HAL_GPIO_Init+0x1e0>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a3c      	ldr	r2, [pc, #240]	; (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d007      	beq.n	8001b5c <HAL_GPIO_Init+0x1dc>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a3b      	ldr	r2, [pc, #236]	; (8001c3c <HAL_GPIO_Init+0x2bc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d101      	bne.n	8001b58 <HAL_GPIO_Init+0x1d8>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e004      	b.n	8001b62 <HAL_GPIO_Init+0x1e2>
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e002      	b.n	8001b62 <HAL_GPIO_Init+0x1e2>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_GPIO_Init+0x1e2>
 8001b60:	2300      	movs	r3, #0
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	f002 0203 	and.w	r2, r2, #3
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	4093      	lsls	r3, r2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b72:	492f      	ldr	r1, [pc, #188]	; (8001c30 <HAL_GPIO_Init+0x2b0>)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	492b      	ldr	r1, [pc, #172]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4927      	ldr	r1, [pc, #156]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4921      	ldr	r1, [pc, #132]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	491d      	ldr	r1, [pc, #116]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bdc:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	4917      	ldr	r1, [pc, #92]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4913      	ldr	r1, [pc, #76]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01f      	beq.n	8001c44 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	490d      	ldr	r1, [pc, #52]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
 8001c10:	e01f      	b.n	8001c52 <HAL_GPIO_Init+0x2d2>
 8001c12:	bf00      	nop
 8001c14:	10320000 	.word	0x10320000
 8001c18:	10310000 	.word	0x10310000
 8001c1c:	10220000 	.word	0x10220000
 8001c20:	10210000 	.word	0x10210000
 8001c24:	10120000 	.word	0x10120000
 8001c28:	10110000 	.word	0x10110000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010000 	.word	0x40010000
 8001c34:	40010800 	.word	0x40010800
 8001c38:	40010c00 	.word	0x40010c00
 8001c3c:	40011000 	.word	0x40011000
 8001c40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_GPIO_Init+0x2f4>)
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	4909      	ldr	r1, [pc, #36]	; (8001c74 <HAL_GPIO_Init+0x2f4>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	3301      	adds	r3, #1
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f47f ae96 	bne.w	8001994 <HAL_GPIO_Init+0x14>
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	372c      	adds	r7, #44	; 0x2c
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40010400 	.word	0x40010400

08001c78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	887b      	ldrh	r3, [r7, #2]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e001      	b.n	8001c9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	807b      	strh	r3, [r7, #2]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cb6:	787b      	ldrb	r3, [r7, #1]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cbc:	887a      	ldrh	r2, [r7, #2]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cc2:	e003      	b.n	8001ccc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cc4:	887b      	ldrh	r3, [r7, #2]
 8001cc6:	041a      	lsls	r2, r3, #16
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	611a      	str	r2, [r3, #16]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ce8:	887a      	ldrh	r2, [r7, #2]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	041a      	lsls	r2, r3, #16
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	611a      	str	r2, [r3, #16]
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e12b      	b.n	8001f72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff fb18 	bl	8001364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2224      	movs	r2, #36	; 0x24
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d6c:	f000 ffea 	bl	8002d44 <HAL_RCC_GetPCLK1Freq>
 8001d70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4a81      	ldr	r2, [pc, #516]	; (8001f7c <HAL_I2C_Init+0x274>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d807      	bhi.n	8001d8c <HAL_I2C_Init+0x84>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4a80      	ldr	r2, [pc, #512]	; (8001f80 <HAL_I2C_Init+0x278>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	bf94      	ite	ls
 8001d84:	2301      	movls	r3, #1
 8001d86:	2300      	movhi	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	e006      	b.n	8001d9a <HAL_I2C_Init+0x92>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4a7d      	ldr	r2, [pc, #500]	; (8001f84 <HAL_I2C_Init+0x27c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	bf94      	ite	ls
 8001d94:	2301      	movls	r3, #1
 8001d96:	2300      	movhi	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0e7      	b.n	8001f72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a78      	ldr	r2, [pc, #480]	; (8001f88 <HAL_I2C_Init+0x280>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0c9b      	lsrs	r3, r3, #18
 8001dac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4a6a      	ldr	r2, [pc, #424]	; (8001f7c <HAL_I2C_Init+0x274>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d802      	bhi.n	8001ddc <HAL_I2C_Init+0xd4>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	e009      	b.n	8001df0 <HAL_I2C_Init+0xe8>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	4a69      	ldr	r2, [pc, #420]	; (8001f8c <HAL_I2C_Init+0x284>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	3301      	adds	r3, #1
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	495c      	ldr	r1, [pc, #368]	; (8001f7c <HAL_I2C_Init+0x274>)
 8001e0c:	428b      	cmp	r3, r1
 8001e0e:	d819      	bhi.n	8001e44 <HAL_I2C_Init+0x13c>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1e59      	subs	r1, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e1e:	1c59      	adds	r1, r3, #1
 8001e20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e24:	400b      	ands	r3, r1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00a      	beq.n	8001e40 <HAL_I2C_Init+0x138>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1e59      	subs	r1, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3e:	e051      	b.n	8001ee4 <HAL_I2C_Init+0x1dc>
 8001e40:	2304      	movs	r3, #4
 8001e42:	e04f      	b.n	8001ee4 <HAL_I2C_Init+0x1dc>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d111      	bne.n	8001e70 <HAL_I2C_Init+0x168>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1e58      	subs	r0, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	440b      	add	r3, r1
 8001e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	e012      	b.n	8001e96 <HAL_I2C_Init+0x18e>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1e58      	subs	r0, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6859      	ldr	r1, [r3, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	0099      	lsls	r1, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e86:	3301      	adds	r3, #1
 8001e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_I2C_Init+0x196>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e022      	b.n	8001ee4 <HAL_I2C_Init+0x1dc>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10e      	bne.n	8001ec4 <HAL_I2C_Init+0x1bc>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1e58      	subs	r0, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6859      	ldr	r1, [r3, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	440b      	add	r3, r1
 8001eb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec2:	e00f      	b.n	8001ee4 <HAL_I2C_Init+0x1dc>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1e58      	subs	r0, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	0099      	lsls	r1, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eda:	3301      	adds	r3, #1
 8001edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	6809      	ldr	r1, [r1, #0]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69da      	ldr	r2, [r3, #28]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6911      	ldr	r1, [r2, #16]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68d2      	ldr	r2, [r2, #12]
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	430b      	orrs	r3, r1
 8001f26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	000186a0 	.word	0x000186a0
 8001f80:	001e847f 	.word	0x001e847f
 8001f84:	003d08ff 	.word	0x003d08ff
 8001f88:	431bde83 	.word	0x431bde83
 8001f8c:	10624dd3 	.word	0x10624dd3

08001f90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	817b      	strh	r3, [r7, #10]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fa4:	f7ff fbda 	bl	800175c <HAL_GetTick>
 8001fa8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	f040 80e0 	bne.w	8002178 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	2319      	movs	r3, #25
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4970      	ldr	r1, [pc, #448]	; (8002184 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f964 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e0d3      	b.n	800217a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_I2C_Master_Transmit+0x50>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e0cc      	b.n	800217a <HAL_I2C_Master_Transmit+0x1ea>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d007      	beq.n	8002006 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0201 	orr.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002014:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2221      	movs	r2, #33	; 0x21
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2210      	movs	r2, #16
 8002022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	893a      	ldrh	r2, [r7, #8]
 8002036:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4a50      	ldr	r2, [pc, #320]	; (8002188 <HAL_I2C_Master_Transmit+0x1f8>)
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002048:	8979      	ldrh	r1, [r7, #10]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	6a3a      	ldr	r2, [r7, #32]
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f89c 	bl	800218c <I2C_MasterRequestWrite>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e08d      	b.n	800217a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002074:	e066      	b.n	8002144 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	6a39      	ldr	r1, [r7, #32]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f9de 	bl	800243c <I2C_WaitOnTXEFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00d      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2b04      	cmp	r3, #4
 800208c:	d107      	bne.n	800209e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06b      	b.n	800217a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d11b      	bne.n	8002118 <HAL_I2C_Master_Transmit+0x188>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d017      	beq.n	8002118 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	781a      	ldrb	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	6a39      	ldr	r1, [r7, #32]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f9ce 	bl	80024be <I2C_WaitOnBTFFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00d      	beq.n	8002144 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	2b04      	cmp	r3, #4
 800212e:	d107      	bne.n	8002140 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e01a      	b.n	800217a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	d194      	bne.n	8002076 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	e000      	b.n	800217a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002178:	2302      	movs	r3, #2
  }
}
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	00100002 	.word	0x00100002
 8002188:	ffff0000 	.word	0xffff0000

0800218c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af02      	add	r7, sp, #8
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	460b      	mov	r3, r1
 800219a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d006      	beq.n	80021b6 <I2C_MasterRequestWrite+0x2a>
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d003      	beq.n	80021b6 <I2C_MasterRequestWrite+0x2a>
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021b4:	d108      	bne.n	80021c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	e00b      	b.n	80021e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	2b12      	cmp	r3, #18
 80021ce:	d107      	bne.n	80021e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f84f 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00d      	beq.n	8002214 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002206:	d103      	bne.n	8002210 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e035      	b.n	8002280 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800221c:	d108      	bne.n	8002230 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800221e:	897b      	ldrh	r3, [r7, #10]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800222c:	611a      	str	r2, [r3, #16]
 800222e:	e01b      	b.n	8002268 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002230:	897b      	ldrh	r3, [r7, #10]
 8002232:	11db      	asrs	r3, r3, #7
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f003 0306 	and.w	r3, r3, #6
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f063 030f 	orn	r3, r3, #15
 8002240:	b2da      	uxtb	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	490e      	ldr	r1, [pc, #56]	; (8002288 <I2C_MasterRequestWrite+0xfc>)
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f875 	bl	800233e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e010      	b.n	8002280 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800225e:	897b      	ldrh	r3, [r7, #10]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4907      	ldr	r1, [pc, #28]	; (800228c <I2C_MasterRequestWrite+0x100>)
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f865 	bl	800233e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	00010008 	.word	0x00010008
 800228c:	00010002 	.word	0x00010002

08002290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a0:	e025      	b.n	80022ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d021      	beq.n	80022ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022aa:	f7ff fa57 	bl	800175c <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d302      	bcc.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d116      	bne.n	80022ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2220      	movs	r2, #32
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f043 0220 	orr.w	r2, r3, #32
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e023      	b.n	8002336 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10d      	bne.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x84>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4013      	ands	r3, r2
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	bf0c      	ite	eq
 800230a:	2301      	moveq	r3, #1
 800230c:	2300      	movne	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	e00c      	b.n	800232e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4013      	ands	r3, r2
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	bf0c      	ite	eq
 8002326:	2301      	moveq	r3, #1
 8002328:	2300      	movne	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	429a      	cmp	r2, r3
 8002332:	d0b6      	beq.n	80022a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800234c:	e051      	b.n	80023f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235c:	d123      	bne.n	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002376:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f043 0204 	orr.w	r2, r3, #4
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e046      	b.n	8002434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d021      	beq.n	80023f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ae:	f7ff f9d5 	bl	800175c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d302      	bcc.n	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d116      	bne.n	80023f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f043 0220 	orr.w	r2, r3, #32
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e020      	b.n	8002434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	0c1b      	lsrs	r3, r3, #16
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d10c      	bne.n	8002416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4013      	ands	r3, r2
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf14      	ite	ne
 800240e:	2301      	movne	r3, #1
 8002410:	2300      	moveq	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	e00b      	b.n	800242e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	43da      	mvns	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	4013      	ands	r3, r2
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d18d      	bne.n	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002448:	e02d      	b.n	80024a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f878 	bl	8002540 <I2C_IsAcknowledgeFailed>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e02d      	b.n	80024b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d021      	beq.n	80024a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002462:	f7ff f97b 	bl	800175c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	429a      	cmp	r2, r3
 8002470:	d302      	bcc.n	8002478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d116      	bne.n	80024a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f043 0220 	orr.w	r2, r3, #32
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e007      	b.n	80024b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b0:	2b80      	cmp	r3, #128	; 0x80
 80024b2:	d1ca      	bne.n	800244a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024ca:	e02d      	b.n	8002528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f837 	bl	8002540 <I2C_IsAcknowledgeFailed>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e02d      	b.n	8002538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e2:	d021      	beq.n	8002528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e4:	f7ff f93a 	bl	800175c <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d302      	bcc.n	80024fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d116      	bne.n	8002528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f043 0220 	orr.w	r2, r3, #32
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e007      	b.n	8002538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b04      	cmp	r3, #4
 8002534:	d1ca      	bne.n	80024cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002556:	d11b      	bne.n	8002590 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002560:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0204 	orr.w	r2, r3, #4
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e272      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8087 	beq.w	80026ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025bc:	4b92      	ldr	r3, [pc, #584]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d00c      	beq.n	80025e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025c8:	4b8f      	ldr	r3, [pc, #572]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d112      	bne.n	80025fa <HAL_RCC_OscConfig+0x5e>
 80025d4:	4b8c      	ldr	r3, [pc, #560]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e0:	d10b      	bne.n	80025fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e2:	4b89      	ldr	r3, [pc, #548]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d06c      	beq.n	80026c8 <HAL_RCC_OscConfig+0x12c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d168      	bne.n	80026c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e24c      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x76>
 8002604:	4b80      	ldr	r3, [pc, #512]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a7f      	ldr	r2, [pc, #508]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800260a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	e02e      	b.n	8002670 <HAL_RCC_OscConfig+0xd4>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x98>
 800261a:	4b7b      	ldr	r3, [pc, #492]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7a      	ldr	r2, [pc, #488]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b78      	ldr	r3, [pc, #480]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a77      	ldr	r2, [pc, #476]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e01d      	b.n	8002670 <HAL_RCC_OscConfig+0xd4>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0xbc>
 800263e:	4b72      	ldr	r3, [pc, #456]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a71      	ldr	r2, [pc, #452]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b6f      	ldr	r3, [pc, #444]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6e      	ldr	r2, [pc, #440]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e00b      	b.n	8002670 <HAL_RCC_OscConfig+0xd4>
 8002658:	4b6b      	ldr	r3, [pc, #428]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6a      	ldr	r2, [pc, #424]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800265e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b68      	ldr	r3, [pc, #416]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a67      	ldr	r2, [pc, #412]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800266a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800266e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7ff f870 	bl	800175c <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002680:	f7ff f86c 	bl	800175c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e200      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0xe4>
 800269e:	e014      	b.n	80026ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7ff f85c 	bl	800175c <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7ff f858 	bl	800175c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e1ec      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ba:	4b53      	ldr	r3, [pc, #332]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x10c>
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d063      	beq.n	800279e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026d6:	4b4c      	ldr	r3, [pc, #304]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026e2:	4b49      	ldr	r3, [pc, #292]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d11c      	bne.n	8002728 <HAL_RCC_OscConfig+0x18c>
 80026ee:	4b46      	ldr	r3, [pc, #280]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d116      	bne.n	8002728 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fa:	4b43      	ldr	r3, [pc, #268]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_RCC_OscConfig+0x176>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d001      	beq.n	8002712 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e1c0      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4939      	ldr	r1, [pc, #228]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	e03a      	b.n	800279e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d020      	beq.n	8002772 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <HAL_RCC_OscConfig+0x270>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7ff f811 	bl	800175c <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273e:	f7ff f80d 	bl	800175c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e1a1      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002750:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275c:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4927      	ldr	r1, [pc, #156]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]
 8002770:	e015      	b.n	800279e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002772:	4b26      	ldr	r3, [pc, #152]	; (800280c <HAL_RCC_OscConfig+0x270>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fff0 	bl	800175c <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002780:	f7fe ffec 	bl	800175c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e180      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d03a      	beq.n	8002820 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d019      	beq.n	80027e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_RCC_OscConfig+0x274>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b8:	f7fe ffd0 	bl	800175c <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c0:	f7fe ffcc 	bl	800175c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e160      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027de:	2001      	movs	r0, #1
 80027e0:	f000 fac4 	bl	8002d6c <RCC_Delay>
 80027e4:	e01c      	b.n	8002820 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_RCC_OscConfig+0x274>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ec:	f7fe ffb6 	bl	800175c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f2:	e00f      	b.n	8002814 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f4:	f7fe ffb2 	bl	800175c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d908      	bls.n	8002814 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e146      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	42420000 	.word	0x42420000
 8002810:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	4b92      	ldr	r3, [pc, #584]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e9      	bne.n	80027f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80a6 	beq.w	800297a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002832:	4b8b      	ldr	r3, [pc, #556]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b88      	ldr	r3, [pc, #544]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a87      	ldr	r2, [pc, #540]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	61d3      	str	r3, [r2, #28]
 800284a:	4b85      	ldr	r3, [pc, #532]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	4b82      	ldr	r3, [pc, #520]	; (8002a64 <HAL_RCC_OscConfig+0x4c8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d118      	bne.n	8002898 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002866:	4b7f      	ldr	r3, [pc, #508]	; (8002a64 <HAL_RCC_OscConfig+0x4c8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a7e      	ldr	r2, [pc, #504]	; (8002a64 <HAL_RCC_OscConfig+0x4c8>)
 800286c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002872:	f7fe ff73 	bl	800175c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287a:	f7fe ff6f 	bl	800175c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b64      	cmp	r3, #100	; 0x64
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e103      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b75      	ldr	r3, [pc, #468]	; (8002a64 <HAL_RCC_OscConfig+0x4c8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x312>
 80028a0:	4b6f      	ldr	r3, [pc, #444]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4a6e      	ldr	r2, [pc, #440]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6213      	str	r3, [r2, #32]
 80028ac:	e02d      	b.n	800290a <HAL_RCC_OscConfig+0x36e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x334>
 80028b6:	4b6a      	ldr	r3, [pc, #424]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4a69      	ldr	r2, [pc, #420]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6213      	str	r3, [r2, #32]
 80028c2:	4b67      	ldr	r3, [pc, #412]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a66      	ldr	r2, [pc, #408]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f023 0304 	bic.w	r3, r3, #4
 80028cc:	6213      	str	r3, [r2, #32]
 80028ce:	e01c      	b.n	800290a <HAL_RCC_OscConfig+0x36e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d10c      	bne.n	80028f2 <HAL_RCC_OscConfig+0x356>
 80028d8:	4b61      	ldr	r3, [pc, #388]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4a60      	ldr	r2, [pc, #384]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	6213      	str	r3, [r2, #32]
 80028e4:	4b5e      	ldr	r3, [pc, #376]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a5d      	ldr	r2, [pc, #372]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	e00b      	b.n	800290a <HAL_RCC_OscConfig+0x36e>
 80028f2:	4b5b      	ldr	r3, [pc, #364]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a5a      	ldr	r2, [pc, #360]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6213      	str	r3, [r2, #32]
 80028fe:	4b58      	ldr	r3, [pc, #352]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a57      	ldr	r2, [pc, #348]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	f023 0304 	bic.w	r3, r3, #4
 8002908:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d015      	beq.n	800293e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002912:	f7fe ff23 	bl	800175c <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002918:	e00a      	b.n	8002930 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291a:	f7fe ff1f 	bl	800175c <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f241 3288 	movw	r2, #5000	; 0x1388
 8002928:	4293      	cmp	r3, r2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e0b1      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002930:	4b4b      	ldr	r3, [pc, #300]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ee      	beq.n	800291a <HAL_RCC_OscConfig+0x37e>
 800293c:	e014      	b.n	8002968 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7fe ff0d 	bl	800175c <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002944:	e00a      	b.n	800295c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe ff09 	bl	800175c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	; 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e09b      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295c:	4b40      	ldr	r3, [pc, #256]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1ee      	bne.n	8002946 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002968:	7dfb      	ldrb	r3, [r7, #23]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d105      	bne.n	800297a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296e:	4b3c      	ldr	r3, [pc, #240]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4a3b      	ldr	r2, [pc, #236]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002978:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 8087 	beq.w	8002a92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002984:	4b36      	ldr	r3, [pc, #216]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b08      	cmp	r3, #8
 800298e:	d061      	beq.n	8002a54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d146      	bne.n	8002a26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002998:	4b33      	ldr	r3, [pc, #204]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7fe fedd 	bl	800175c <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fe fed9 	bl	800175c <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e06d      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b8:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d108      	bne.n	80029e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029ce:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4921      	ldr	r1, [pc, #132]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a19      	ldr	r1, [r3, #32]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	430b      	orrs	r3, r1
 80029f2:	491b      	ldr	r1, [pc, #108]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7fe fead 	bl	800175c <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a06:	f7fe fea9 	bl	800175c <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e03d      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x46a>
 8002a24:	e035      	b.n	8002a92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fe96 	bl	800175c <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe fe92 	bl	800175c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e026      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x498>
 8002a52:	e01e      	b.n	8002a92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e019      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
 8002a68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_OscConfig+0x500>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0d0      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d910      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b67      	ldr	r3, [pc, #412]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 0207 	bic.w	r2, r3, #7
 8002aca:	4965      	ldr	r1, [pc, #404]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b63      	ldr	r3, [pc, #396]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0b8      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002afc:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b14:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4a52      	ldr	r2, [pc, #328]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b20:	4b50      	ldr	r3, [pc, #320]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	494d      	ldr	r1, [pc, #308]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d040      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d115      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e07f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5e:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e073      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e06b      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7e:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f023 0203 	bic.w	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4936      	ldr	r1, [pc, #216]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b90:	f7fe fde4 	bl	800175c <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b98:	f7fe fde0 	bl	800175c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e053      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 020c 	and.w	r2, r3, #12
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d1eb      	bne.n	8002b98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d210      	bcs.n	8002bf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 0207 	bic.w	r2, r3, #7
 8002bd6:	4922      	ldr	r1, [pc, #136]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e032      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4916      	ldr	r1, [pc, #88]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	490e      	ldr	r1, [pc, #56]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c2e:	f000 f821 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8002c32:	4602      	mov	r2, r0
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	490a      	ldr	r1, [pc, #40]	; (8002c68 <HAL_RCC_ClockConfig+0x1c8>)
 8002c40:	5ccb      	ldrb	r3, [r1, r3]
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <HAL_RCC_ClockConfig+0x1cc>)
 8002c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_RCC_ClockConfig+0x1d0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fd42 	bl	80016d8 <HAL_InitTick>

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40022000 	.word	0x40022000
 8002c64:	40021000 	.word	0x40021000
 8002c68:	08003764 	.word	0x08003764
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	20000004 	.word	0x20000004

08002c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c74:	b490      	push	{r4, r7}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c7a:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c7c:	1d3c      	adds	r4, r7, #4
 8002c7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c84:	f240 2301 	movw	r3, #513	; 0x201
 8002c88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d002      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d003      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x46>
 8002cb2:	e02b      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb4:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cb6:	623b      	str	r3, [r7, #32]
      break;
 8002cb8:	e02b      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	0c9b      	lsrs	r3, r3, #18
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	3328      	adds	r3, #40	; 0x28
 8002cc4:	443b      	add	r3, r7
 8002cc6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d012      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cd6:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	0c5b      	lsrs	r3, r3, #17
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	3328      	adds	r3, #40	; 0x28
 8002ce2:	443b      	add	r3, r7
 8002ce4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ce8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cee:	fb03 f202 	mul.w	r2, r3, r2
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfa:	e004      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d00:	fb02 f303 	mul.w	r3, r2, r3
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	623b      	str	r3, [r7, #32]
      break;
 8002d0a:	e002      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d0e:	623b      	str	r3, [r7, #32]
      break;
 8002d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d12:	6a3b      	ldr	r3, [r7, #32]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3728      	adds	r7, #40	; 0x28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc90      	pop	{r4, r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	08003754 	.word	0x08003754
 8002d24:	40021000 	.word	0x40021000
 8002d28:	007a1200 	.word	0x007a1200
 8002d2c:	003d0900 	.word	0x003d0900

08002d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d34:	4b02      	ldr	r3, [pc, #8]	; (8002d40 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	20000000 	.word	0x20000000

08002d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d48:	f7ff fff2 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4903      	ldr	r1, [pc, #12]	; (8002d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000
 8002d68:	08003774 	.word	0x08003774

08002d6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d74:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <RCC_Delay+0x34>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <RCC_Delay+0x38>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0a5b      	lsrs	r3, r3, #9
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d88:	bf00      	nop
  }
  while (Delay --);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1e5a      	subs	r2, r3, #1
 8002d8e:	60fa      	str	r2, [r7, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f9      	bne.n	8002d88 <RCC_Delay+0x1c>
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	20000000 	.word	0x20000000
 8002da4:	10624dd3 	.word	0x10624dd3

08002da8 <__errno>:
 8002da8:	4b01      	ldr	r3, [pc, #4]	; (8002db0 <__errno+0x8>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	2000000c 	.word	0x2000000c

08002db4 <__libc_init_array>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	2600      	movs	r6, #0
 8002db8:	4d0c      	ldr	r5, [pc, #48]	; (8002dec <__libc_init_array+0x38>)
 8002dba:	4c0d      	ldr	r4, [pc, #52]	; (8002df0 <__libc_init_array+0x3c>)
 8002dbc:	1b64      	subs	r4, r4, r5
 8002dbe:	10a4      	asrs	r4, r4, #2
 8002dc0:	42a6      	cmp	r6, r4
 8002dc2:	d109      	bne.n	8002dd8 <__libc_init_array+0x24>
 8002dc4:	f000 fcb0 	bl	8003728 <_init>
 8002dc8:	2600      	movs	r6, #0
 8002dca:	4d0a      	ldr	r5, [pc, #40]	; (8002df4 <__libc_init_array+0x40>)
 8002dcc:	4c0a      	ldr	r4, [pc, #40]	; (8002df8 <__libc_init_array+0x44>)
 8002dce:	1b64      	subs	r4, r4, r5
 8002dd0:	10a4      	asrs	r4, r4, #2
 8002dd2:	42a6      	cmp	r6, r4
 8002dd4:	d105      	bne.n	8002de2 <__libc_init_array+0x2e>
 8002dd6:	bd70      	pop	{r4, r5, r6, pc}
 8002dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ddc:	4798      	blx	r3
 8002dde:	3601      	adds	r6, #1
 8002de0:	e7ee      	b.n	8002dc0 <__libc_init_array+0xc>
 8002de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de6:	4798      	blx	r3
 8002de8:	3601      	adds	r6, #1
 8002dea:	e7f2      	b.n	8002dd2 <__libc_init_array+0x1e>
 8002dec:	080037b8 	.word	0x080037b8
 8002df0:	080037b8 	.word	0x080037b8
 8002df4:	080037b8 	.word	0x080037b8
 8002df8:	080037bc 	.word	0x080037bc

08002dfc <memset>:
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4402      	add	r2, r0
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d100      	bne.n	8002e06 <memset+0xa>
 8002e04:	4770      	bx	lr
 8002e06:	f803 1b01 	strb.w	r1, [r3], #1
 8002e0a:	e7f9      	b.n	8002e00 <memset+0x4>

08002e0c <sniprintf>:
 8002e0c:	b40c      	push	{r2, r3}
 8002e0e:	b530      	push	{r4, r5, lr}
 8002e10:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <sniprintf+0x64>)
 8002e12:	1e0c      	subs	r4, r1, #0
 8002e14:	681d      	ldr	r5, [r3, #0]
 8002e16:	b09d      	sub	sp, #116	; 0x74
 8002e18:	da08      	bge.n	8002e2c <sniprintf+0x20>
 8002e1a:	238b      	movs	r3, #139	; 0x8b
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e20:	602b      	str	r3, [r5, #0]
 8002e22:	b01d      	add	sp, #116	; 0x74
 8002e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e28:	b002      	add	sp, #8
 8002e2a:	4770      	bx	lr
 8002e2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002e30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002e34:	bf0c      	ite	eq
 8002e36:	4623      	moveq	r3, r4
 8002e38:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002e3c:	9304      	str	r3, [sp, #16]
 8002e3e:	9307      	str	r3, [sp, #28]
 8002e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e44:	9002      	str	r0, [sp, #8]
 8002e46:	9006      	str	r0, [sp, #24]
 8002e48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	ab21      	add	r3, sp, #132	; 0x84
 8002e50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002e52:	a902      	add	r1, sp, #8
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	f000 f869 	bl	8002f2c <_svfiprintf_r>
 8002e5a:	1c43      	adds	r3, r0, #1
 8002e5c:	bfbc      	itt	lt
 8002e5e:	238b      	movlt	r3, #139	; 0x8b
 8002e60:	602b      	strlt	r3, [r5, #0]
 8002e62:	2c00      	cmp	r4, #0
 8002e64:	d0dd      	beq.n	8002e22 <sniprintf+0x16>
 8002e66:	2200      	movs	r2, #0
 8002e68:	9b02      	ldr	r3, [sp, #8]
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	e7d9      	b.n	8002e22 <sniprintf+0x16>
 8002e6e:	bf00      	nop
 8002e70:	2000000c 	.word	0x2000000c

08002e74 <__ssputs_r>:
 8002e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e78:	688e      	ldr	r6, [r1, #8]
 8002e7a:	4682      	mov	sl, r0
 8002e7c:	429e      	cmp	r6, r3
 8002e7e:	460c      	mov	r4, r1
 8002e80:	4690      	mov	r8, r2
 8002e82:	461f      	mov	r7, r3
 8002e84:	d838      	bhi.n	8002ef8 <__ssputs_r+0x84>
 8002e86:	898a      	ldrh	r2, [r1, #12]
 8002e88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e8c:	d032      	beq.n	8002ef4 <__ssputs_r+0x80>
 8002e8e:	6825      	ldr	r5, [r4, #0]
 8002e90:	6909      	ldr	r1, [r1, #16]
 8002e92:	3301      	adds	r3, #1
 8002e94:	eba5 0901 	sub.w	r9, r5, r1
 8002e98:	6965      	ldr	r5, [r4, #20]
 8002e9a:	444b      	add	r3, r9
 8002e9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ea0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ea4:	106d      	asrs	r5, r5, #1
 8002ea6:	429d      	cmp	r5, r3
 8002ea8:	bf38      	it	cc
 8002eaa:	461d      	movcc	r5, r3
 8002eac:	0553      	lsls	r3, r2, #21
 8002eae:	d531      	bpl.n	8002f14 <__ssputs_r+0xa0>
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	f000 fb6f 	bl	8003594 <_malloc_r>
 8002eb6:	4606      	mov	r6, r0
 8002eb8:	b950      	cbnz	r0, 8002ed0 <__ssputs_r+0x5c>
 8002eba:	230c      	movs	r3, #12
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	f8ca 3000 	str.w	r3, [sl]
 8002ec4:	89a3      	ldrh	r3, [r4, #12]
 8002ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eca:	81a3      	strh	r3, [r4, #12]
 8002ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ed0:	464a      	mov	r2, r9
 8002ed2:	6921      	ldr	r1, [r4, #16]
 8002ed4:	f000 face 	bl	8003474 <memcpy>
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee2:	81a3      	strh	r3, [r4, #12]
 8002ee4:	6126      	str	r6, [r4, #16]
 8002ee6:	444e      	add	r6, r9
 8002ee8:	6026      	str	r6, [r4, #0]
 8002eea:	463e      	mov	r6, r7
 8002eec:	6165      	str	r5, [r4, #20]
 8002eee:	eba5 0509 	sub.w	r5, r5, r9
 8002ef2:	60a5      	str	r5, [r4, #8]
 8002ef4:	42be      	cmp	r6, r7
 8002ef6:	d900      	bls.n	8002efa <__ssputs_r+0x86>
 8002ef8:	463e      	mov	r6, r7
 8002efa:	4632      	mov	r2, r6
 8002efc:	4641      	mov	r1, r8
 8002efe:	6820      	ldr	r0, [r4, #0]
 8002f00:	f000 fac6 	bl	8003490 <memmove>
 8002f04:	68a3      	ldr	r3, [r4, #8]
 8002f06:	2000      	movs	r0, #0
 8002f08:	1b9b      	subs	r3, r3, r6
 8002f0a:	60a3      	str	r3, [r4, #8]
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	4433      	add	r3, r6
 8002f10:	6023      	str	r3, [r4, #0]
 8002f12:	e7db      	b.n	8002ecc <__ssputs_r+0x58>
 8002f14:	462a      	mov	r2, r5
 8002f16:	f000 fbb1 	bl	800367c <_realloc_r>
 8002f1a:	4606      	mov	r6, r0
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d1e1      	bne.n	8002ee4 <__ssputs_r+0x70>
 8002f20:	4650      	mov	r0, sl
 8002f22:	6921      	ldr	r1, [r4, #16]
 8002f24:	f000 face 	bl	80034c4 <_free_r>
 8002f28:	e7c7      	b.n	8002eba <__ssputs_r+0x46>
	...

08002f2c <_svfiprintf_r>:
 8002f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f30:	4698      	mov	r8, r3
 8002f32:	898b      	ldrh	r3, [r1, #12]
 8002f34:	4607      	mov	r7, r0
 8002f36:	061b      	lsls	r3, r3, #24
 8002f38:	460d      	mov	r5, r1
 8002f3a:	4614      	mov	r4, r2
 8002f3c:	b09d      	sub	sp, #116	; 0x74
 8002f3e:	d50e      	bpl.n	8002f5e <_svfiprintf_r+0x32>
 8002f40:	690b      	ldr	r3, [r1, #16]
 8002f42:	b963      	cbnz	r3, 8002f5e <_svfiprintf_r+0x32>
 8002f44:	2140      	movs	r1, #64	; 0x40
 8002f46:	f000 fb25 	bl	8003594 <_malloc_r>
 8002f4a:	6028      	str	r0, [r5, #0]
 8002f4c:	6128      	str	r0, [r5, #16]
 8002f4e:	b920      	cbnz	r0, 8002f5a <_svfiprintf_r+0x2e>
 8002f50:	230c      	movs	r3, #12
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295
 8002f58:	e0d1      	b.n	80030fe <_svfiprintf_r+0x1d2>
 8002f5a:	2340      	movs	r3, #64	; 0x40
 8002f5c:	616b      	str	r3, [r5, #20]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9309      	str	r3, [sp, #36]	; 0x24
 8002f62:	2320      	movs	r3, #32
 8002f64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f68:	2330      	movs	r3, #48	; 0x30
 8002f6a:	f04f 0901 	mov.w	r9, #1
 8002f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003118 <_svfiprintf_r+0x1ec>
 8002f76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	469a      	mov	sl, r3
 8002f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f82:	b10a      	cbz	r2, 8002f88 <_svfiprintf_r+0x5c>
 8002f84:	2a25      	cmp	r2, #37	; 0x25
 8002f86:	d1f9      	bne.n	8002f7c <_svfiprintf_r+0x50>
 8002f88:	ebba 0b04 	subs.w	fp, sl, r4
 8002f8c:	d00b      	beq.n	8002fa6 <_svfiprintf_r+0x7a>
 8002f8e:	465b      	mov	r3, fp
 8002f90:	4622      	mov	r2, r4
 8002f92:	4629      	mov	r1, r5
 8002f94:	4638      	mov	r0, r7
 8002f96:	f7ff ff6d 	bl	8002e74 <__ssputs_r>
 8002f9a:	3001      	adds	r0, #1
 8002f9c:	f000 80aa 	beq.w	80030f4 <_svfiprintf_r+0x1c8>
 8002fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fa2:	445a      	add	r2, fp
 8002fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8002fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80a2 	beq.w	80030f4 <_svfiprintf_r+0x1c8>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fba:	f10a 0a01 	add.w	sl, sl, #1
 8002fbe:	9304      	str	r3, [sp, #16]
 8002fc0:	9307      	str	r3, [sp, #28]
 8002fc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fc6:	931a      	str	r3, [sp, #104]	; 0x68
 8002fc8:	4654      	mov	r4, sl
 8002fca:	2205      	movs	r2, #5
 8002fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fd0:	4851      	ldr	r0, [pc, #324]	; (8003118 <_svfiprintf_r+0x1ec>)
 8002fd2:	f000 fa41 	bl	8003458 <memchr>
 8002fd6:	9a04      	ldr	r2, [sp, #16]
 8002fd8:	b9d8      	cbnz	r0, 8003012 <_svfiprintf_r+0xe6>
 8002fda:	06d0      	lsls	r0, r2, #27
 8002fdc:	bf44      	itt	mi
 8002fde:	2320      	movmi	r3, #32
 8002fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fe4:	0711      	lsls	r1, r2, #28
 8002fe6:	bf44      	itt	mi
 8002fe8:	232b      	movmi	r3, #43	; 0x2b
 8002fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fee:	f89a 3000 	ldrb.w	r3, [sl]
 8002ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ff4:	d015      	beq.n	8003022 <_svfiprintf_r+0xf6>
 8002ff6:	4654      	mov	r4, sl
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f04f 0c0a 	mov.w	ip, #10
 8002ffe:	9a07      	ldr	r2, [sp, #28]
 8003000:	4621      	mov	r1, r4
 8003002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003006:	3b30      	subs	r3, #48	; 0x30
 8003008:	2b09      	cmp	r3, #9
 800300a:	d94e      	bls.n	80030aa <_svfiprintf_r+0x17e>
 800300c:	b1b0      	cbz	r0, 800303c <_svfiprintf_r+0x110>
 800300e:	9207      	str	r2, [sp, #28]
 8003010:	e014      	b.n	800303c <_svfiprintf_r+0x110>
 8003012:	eba0 0308 	sub.w	r3, r0, r8
 8003016:	fa09 f303 	lsl.w	r3, r9, r3
 800301a:	4313      	orrs	r3, r2
 800301c:	46a2      	mov	sl, r4
 800301e:	9304      	str	r3, [sp, #16]
 8003020:	e7d2      	b.n	8002fc8 <_svfiprintf_r+0x9c>
 8003022:	9b03      	ldr	r3, [sp, #12]
 8003024:	1d19      	adds	r1, r3, #4
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	9103      	str	r1, [sp, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	bfbb      	ittet	lt
 800302e:	425b      	neglt	r3, r3
 8003030:	f042 0202 	orrlt.w	r2, r2, #2
 8003034:	9307      	strge	r3, [sp, #28]
 8003036:	9307      	strlt	r3, [sp, #28]
 8003038:	bfb8      	it	lt
 800303a:	9204      	strlt	r2, [sp, #16]
 800303c:	7823      	ldrb	r3, [r4, #0]
 800303e:	2b2e      	cmp	r3, #46	; 0x2e
 8003040:	d10c      	bne.n	800305c <_svfiprintf_r+0x130>
 8003042:	7863      	ldrb	r3, [r4, #1]
 8003044:	2b2a      	cmp	r3, #42	; 0x2a
 8003046:	d135      	bne.n	80030b4 <_svfiprintf_r+0x188>
 8003048:	9b03      	ldr	r3, [sp, #12]
 800304a:	3402      	adds	r4, #2
 800304c:	1d1a      	adds	r2, r3, #4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	9203      	str	r2, [sp, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	bfb8      	it	lt
 8003056:	f04f 33ff 	movlt.w	r3, #4294967295
 800305a:	9305      	str	r3, [sp, #20]
 800305c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800311c <_svfiprintf_r+0x1f0>
 8003060:	2203      	movs	r2, #3
 8003062:	4650      	mov	r0, sl
 8003064:	7821      	ldrb	r1, [r4, #0]
 8003066:	f000 f9f7 	bl	8003458 <memchr>
 800306a:	b140      	cbz	r0, 800307e <_svfiprintf_r+0x152>
 800306c:	2340      	movs	r3, #64	; 0x40
 800306e:	eba0 000a 	sub.w	r0, r0, sl
 8003072:	fa03 f000 	lsl.w	r0, r3, r0
 8003076:	9b04      	ldr	r3, [sp, #16]
 8003078:	3401      	adds	r4, #1
 800307a:	4303      	orrs	r3, r0
 800307c:	9304      	str	r3, [sp, #16]
 800307e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003082:	2206      	movs	r2, #6
 8003084:	4826      	ldr	r0, [pc, #152]	; (8003120 <_svfiprintf_r+0x1f4>)
 8003086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800308a:	f000 f9e5 	bl	8003458 <memchr>
 800308e:	2800      	cmp	r0, #0
 8003090:	d038      	beq.n	8003104 <_svfiprintf_r+0x1d8>
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <_svfiprintf_r+0x1f8>)
 8003094:	bb1b      	cbnz	r3, 80030de <_svfiprintf_r+0x1b2>
 8003096:	9b03      	ldr	r3, [sp, #12]
 8003098:	3307      	adds	r3, #7
 800309a:	f023 0307 	bic.w	r3, r3, #7
 800309e:	3308      	adds	r3, #8
 80030a0:	9303      	str	r3, [sp, #12]
 80030a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030a4:	4433      	add	r3, r6
 80030a6:	9309      	str	r3, [sp, #36]	; 0x24
 80030a8:	e767      	b.n	8002f7a <_svfiprintf_r+0x4e>
 80030aa:	460c      	mov	r4, r1
 80030ac:	2001      	movs	r0, #1
 80030ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80030b2:	e7a5      	b.n	8003000 <_svfiprintf_r+0xd4>
 80030b4:	2300      	movs	r3, #0
 80030b6:	f04f 0c0a 	mov.w	ip, #10
 80030ba:	4619      	mov	r1, r3
 80030bc:	3401      	adds	r4, #1
 80030be:	9305      	str	r3, [sp, #20]
 80030c0:	4620      	mov	r0, r4
 80030c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030c6:	3a30      	subs	r2, #48	; 0x30
 80030c8:	2a09      	cmp	r2, #9
 80030ca:	d903      	bls.n	80030d4 <_svfiprintf_r+0x1a8>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0c5      	beq.n	800305c <_svfiprintf_r+0x130>
 80030d0:	9105      	str	r1, [sp, #20]
 80030d2:	e7c3      	b.n	800305c <_svfiprintf_r+0x130>
 80030d4:	4604      	mov	r4, r0
 80030d6:	2301      	movs	r3, #1
 80030d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80030dc:	e7f0      	b.n	80030c0 <_svfiprintf_r+0x194>
 80030de:	ab03      	add	r3, sp, #12
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	462a      	mov	r2, r5
 80030e4:	4638      	mov	r0, r7
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <_svfiprintf_r+0x1fc>)
 80030e8:	a904      	add	r1, sp, #16
 80030ea:	f3af 8000 	nop.w
 80030ee:	1c42      	adds	r2, r0, #1
 80030f0:	4606      	mov	r6, r0
 80030f2:	d1d6      	bne.n	80030a2 <_svfiprintf_r+0x176>
 80030f4:	89ab      	ldrh	r3, [r5, #12]
 80030f6:	065b      	lsls	r3, r3, #25
 80030f8:	f53f af2c 	bmi.w	8002f54 <_svfiprintf_r+0x28>
 80030fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030fe:	b01d      	add	sp, #116	; 0x74
 8003100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003104:	ab03      	add	r3, sp, #12
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	462a      	mov	r2, r5
 800310a:	4638      	mov	r0, r7
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <_svfiprintf_r+0x1fc>)
 800310e:	a904      	add	r1, sp, #16
 8003110:	f000 f87c 	bl	800320c <_printf_i>
 8003114:	e7eb      	b.n	80030ee <_svfiprintf_r+0x1c2>
 8003116:	bf00      	nop
 8003118:	0800377c 	.word	0x0800377c
 800311c:	08003782 	.word	0x08003782
 8003120:	08003786 	.word	0x08003786
 8003124:	00000000 	.word	0x00000000
 8003128:	08002e75 	.word	0x08002e75

0800312c <_printf_common>:
 800312c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003130:	4616      	mov	r6, r2
 8003132:	4699      	mov	r9, r3
 8003134:	688a      	ldr	r2, [r1, #8]
 8003136:	690b      	ldr	r3, [r1, #16]
 8003138:	4607      	mov	r7, r0
 800313a:	4293      	cmp	r3, r2
 800313c:	bfb8      	it	lt
 800313e:	4613      	movlt	r3, r2
 8003140:	6033      	str	r3, [r6, #0]
 8003142:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003146:	460c      	mov	r4, r1
 8003148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800314c:	b10a      	cbz	r2, 8003152 <_printf_common+0x26>
 800314e:	3301      	adds	r3, #1
 8003150:	6033      	str	r3, [r6, #0]
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	0699      	lsls	r1, r3, #26
 8003156:	bf42      	ittt	mi
 8003158:	6833      	ldrmi	r3, [r6, #0]
 800315a:	3302      	addmi	r3, #2
 800315c:	6033      	strmi	r3, [r6, #0]
 800315e:	6825      	ldr	r5, [r4, #0]
 8003160:	f015 0506 	ands.w	r5, r5, #6
 8003164:	d106      	bne.n	8003174 <_printf_common+0x48>
 8003166:	f104 0a19 	add.w	sl, r4, #25
 800316a:	68e3      	ldr	r3, [r4, #12]
 800316c:	6832      	ldr	r2, [r6, #0]
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	42ab      	cmp	r3, r5
 8003172:	dc28      	bgt.n	80031c6 <_printf_common+0x9a>
 8003174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003178:	1e13      	subs	r3, r2, #0
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	bf18      	it	ne
 800317e:	2301      	movne	r3, #1
 8003180:	0692      	lsls	r2, r2, #26
 8003182:	d42d      	bmi.n	80031e0 <_printf_common+0xb4>
 8003184:	4649      	mov	r1, r9
 8003186:	4638      	mov	r0, r7
 8003188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800318c:	47c0      	blx	r8
 800318e:	3001      	adds	r0, #1
 8003190:	d020      	beq.n	80031d4 <_printf_common+0xa8>
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	68e5      	ldr	r5, [r4, #12]
 8003196:	f003 0306 	and.w	r3, r3, #6
 800319a:	2b04      	cmp	r3, #4
 800319c:	bf18      	it	ne
 800319e:	2500      	movne	r5, #0
 80031a0:	6832      	ldr	r2, [r6, #0]
 80031a2:	f04f 0600 	mov.w	r6, #0
 80031a6:	68a3      	ldr	r3, [r4, #8]
 80031a8:	bf08      	it	eq
 80031aa:	1aad      	subeq	r5, r5, r2
 80031ac:	6922      	ldr	r2, [r4, #16]
 80031ae:	bf08      	it	eq
 80031b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031b4:	4293      	cmp	r3, r2
 80031b6:	bfc4      	itt	gt
 80031b8:	1a9b      	subgt	r3, r3, r2
 80031ba:	18ed      	addgt	r5, r5, r3
 80031bc:	341a      	adds	r4, #26
 80031be:	42b5      	cmp	r5, r6
 80031c0:	d11a      	bne.n	80031f8 <_printf_common+0xcc>
 80031c2:	2000      	movs	r0, #0
 80031c4:	e008      	b.n	80031d8 <_printf_common+0xac>
 80031c6:	2301      	movs	r3, #1
 80031c8:	4652      	mov	r2, sl
 80031ca:	4649      	mov	r1, r9
 80031cc:	4638      	mov	r0, r7
 80031ce:	47c0      	blx	r8
 80031d0:	3001      	adds	r0, #1
 80031d2:	d103      	bne.n	80031dc <_printf_common+0xb0>
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031dc:	3501      	adds	r5, #1
 80031de:	e7c4      	b.n	800316a <_printf_common+0x3e>
 80031e0:	2030      	movs	r0, #48	; 0x30
 80031e2:	18e1      	adds	r1, r4, r3
 80031e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031ee:	4422      	add	r2, r4
 80031f0:	3302      	adds	r3, #2
 80031f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031f6:	e7c5      	b.n	8003184 <_printf_common+0x58>
 80031f8:	2301      	movs	r3, #1
 80031fa:	4622      	mov	r2, r4
 80031fc:	4649      	mov	r1, r9
 80031fe:	4638      	mov	r0, r7
 8003200:	47c0      	blx	r8
 8003202:	3001      	adds	r0, #1
 8003204:	d0e6      	beq.n	80031d4 <_printf_common+0xa8>
 8003206:	3601      	adds	r6, #1
 8003208:	e7d9      	b.n	80031be <_printf_common+0x92>
	...

0800320c <_printf_i>:
 800320c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003210:	7e0f      	ldrb	r7, [r1, #24]
 8003212:	4691      	mov	r9, r2
 8003214:	2f78      	cmp	r7, #120	; 0x78
 8003216:	4680      	mov	r8, r0
 8003218:	460c      	mov	r4, r1
 800321a:	469a      	mov	sl, r3
 800321c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800321e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003222:	d807      	bhi.n	8003234 <_printf_i+0x28>
 8003224:	2f62      	cmp	r7, #98	; 0x62
 8003226:	d80a      	bhi.n	800323e <_printf_i+0x32>
 8003228:	2f00      	cmp	r7, #0
 800322a:	f000 80d9 	beq.w	80033e0 <_printf_i+0x1d4>
 800322e:	2f58      	cmp	r7, #88	; 0x58
 8003230:	f000 80a4 	beq.w	800337c <_printf_i+0x170>
 8003234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800323c:	e03a      	b.n	80032b4 <_printf_i+0xa8>
 800323e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003242:	2b15      	cmp	r3, #21
 8003244:	d8f6      	bhi.n	8003234 <_printf_i+0x28>
 8003246:	a101      	add	r1, pc, #4	; (adr r1, 800324c <_printf_i+0x40>)
 8003248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800324c:	080032a5 	.word	0x080032a5
 8003250:	080032b9 	.word	0x080032b9
 8003254:	08003235 	.word	0x08003235
 8003258:	08003235 	.word	0x08003235
 800325c:	08003235 	.word	0x08003235
 8003260:	08003235 	.word	0x08003235
 8003264:	080032b9 	.word	0x080032b9
 8003268:	08003235 	.word	0x08003235
 800326c:	08003235 	.word	0x08003235
 8003270:	08003235 	.word	0x08003235
 8003274:	08003235 	.word	0x08003235
 8003278:	080033c7 	.word	0x080033c7
 800327c:	080032e9 	.word	0x080032e9
 8003280:	080033a9 	.word	0x080033a9
 8003284:	08003235 	.word	0x08003235
 8003288:	08003235 	.word	0x08003235
 800328c:	080033e9 	.word	0x080033e9
 8003290:	08003235 	.word	0x08003235
 8003294:	080032e9 	.word	0x080032e9
 8003298:	08003235 	.word	0x08003235
 800329c:	08003235 	.word	0x08003235
 80032a0:	080033b1 	.word	0x080033b1
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	1d1a      	adds	r2, r3, #4
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	602a      	str	r2, [r5, #0]
 80032ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0a4      	b.n	8003402 <_printf_i+0x1f6>
 80032b8:	6820      	ldr	r0, [r4, #0]
 80032ba:	6829      	ldr	r1, [r5, #0]
 80032bc:	0606      	lsls	r6, r0, #24
 80032be:	f101 0304 	add.w	r3, r1, #4
 80032c2:	d50a      	bpl.n	80032da <_printf_i+0xce>
 80032c4:	680e      	ldr	r6, [r1, #0]
 80032c6:	602b      	str	r3, [r5, #0]
 80032c8:	2e00      	cmp	r6, #0
 80032ca:	da03      	bge.n	80032d4 <_printf_i+0xc8>
 80032cc:	232d      	movs	r3, #45	; 0x2d
 80032ce:	4276      	negs	r6, r6
 80032d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032d4:	230a      	movs	r3, #10
 80032d6:	485e      	ldr	r0, [pc, #376]	; (8003450 <_printf_i+0x244>)
 80032d8:	e019      	b.n	800330e <_printf_i+0x102>
 80032da:	680e      	ldr	r6, [r1, #0]
 80032dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032e0:	602b      	str	r3, [r5, #0]
 80032e2:	bf18      	it	ne
 80032e4:	b236      	sxthne	r6, r6
 80032e6:	e7ef      	b.n	80032c8 <_printf_i+0xbc>
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	6820      	ldr	r0, [r4, #0]
 80032ec:	1d19      	adds	r1, r3, #4
 80032ee:	6029      	str	r1, [r5, #0]
 80032f0:	0601      	lsls	r1, r0, #24
 80032f2:	d501      	bpl.n	80032f8 <_printf_i+0xec>
 80032f4:	681e      	ldr	r6, [r3, #0]
 80032f6:	e002      	b.n	80032fe <_printf_i+0xf2>
 80032f8:	0646      	lsls	r6, r0, #25
 80032fa:	d5fb      	bpl.n	80032f4 <_printf_i+0xe8>
 80032fc:	881e      	ldrh	r6, [r3, #0]
 80032fe:	2f6f      	cmp	r7, #111	; 0x6f
 8003300:	bf0c      	ite	eq
 8003302:	2308      	moveq	r3, #8
 8003304:	230a      	movne	r3, #10
 8003306:	4852      	ldr	r0, [pc, #328]	; (8003450 <_printf_i+0x244>)
 8003308:	2100      	movs	r1, #0
 800330a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800330e:	6865      	ldr	r5, [r4, #4]
 8003310:	2d00      	cmp	r5, #0
 8003312:	bfa8      	it	ge
 8003314:	6821      	ldrge	r1, [r4, #0]
 8003316:	60a5      	str	r5, [r4, #8]
 8003318:	bfa4      	itt	ge
 800331a:	f021 0104 	bicge.w	r1, r1, #4
 800331e:	6021      	strge	r1, [r4, #0]
 8003320:	b90e      	cbnz	r6, 8003326 <_printf_i+0x11a>
 8003322:	2d00      	cmp	r5, #0
 8003324:	d04d      	beq.n	80033c2 <_printf_i+0x1b6>
 8003326:	4615      	mov	r5, r2
 8003328:	fbb6 f1f3 	udiv	r1, r6, r3
 800332c:	fb03 6711 	mls	r7, r3, r1, r6
 8003330:	5dc7      	ldrb	r7, [r0, r7]
 8003332:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003336:	4637      	mov	r7, r6
 8003338:	42bb      	cmp	r3, r7
 800333a:	460e      	mov	r6, r1
 800333c:	d9f4      	bls.n	8003328 <_printf_i+0x11c>
 800333e:	2b08      	cmp	r3, #8
 8003340:	d10b      	bne.n	800335a <_printf_i+0x14e>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	07de      	lsls	r6, r3, #31
 8003346:	d508      	bpl.n	800335a <_printf_i+0x14e>
 8003348:	6923      	ldr	r3, [r4, #16]
 800334a:	6861      	ldr	r1, [r4, #4]
 800334c:	4299      	cmp	r1, r3
 800334e:	bfde      	ittt	le
 8003350:	2330      	movle	r3, #48	; 0x30
 8003352:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003356:	f105 35ff 	addle.w	r5, r5, #4294967295
 800335a:	1b52      	subs	r2, r2, r5
 800335c:	6122      	str	r2, [r4, #16]
 800335e:	464b      	mov	r3, r9
 8003360:	4621      	mov	r1, r4
 8003362:	4640      	mov	r0, r8
 8003364:	f8cd a000 	str.w	sl, [sp]
 8003368:	aa03      	add	r2, sp, #12
 800336a:	f7ff fedf 	bl	800312c <_printf_common>
 800336e:	3001      	adds	r0, #1
 8003370:	d14c      	bne.n	800340c <_printf_i+0x200>
 8003372:	f04f 30ff 	mov.w	r0, #4294967295
 8003376:	b004      	add	sp, #16
 8003378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800337c:	4834      	ldr	r0, [pc, #208]	; (8003450 <_printf_i+0x244>)
 800337e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003382:	6829      	ldr	r1, [r5, #0]
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	f851 6b04 	ldr.w	r6, [r1], #4
 800338a:	6029      	str	r1, [r5, #0]
 800338c:	061d      	lsls	r5, r3, #24
 800338e:	d514      	bpl.n	80033ba <_printf_i+0x1ae>
 8003390:	07df      	lsls	r7, r3, #31
 8003392:	bf44      	itt	mi
 8003394:	f043 0320 	orrmi.w	r3, r3, #32
 8003398:	6023      	strmi	r3, [r4, #0]
 800339a:	b91e      	cbnz	r6, 80033a4 <_printf_i+0x198>
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	f023 0320 	bic.w	r3, r3, #32
 80033a2:	6023      	str	r3, [r4, #0]
 80033a4:	2310      	movs	r3, #16
 80033a6:	e7af      	b.n	8003308 <_printf_i+0xfc>
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	f043 0320 	orr.w	r3, r3, #32
 80033ae:	6023      	str	r3, [r4, #0]
 80033b0:	2378      	movs	r3, #120	; 0x78
 80033b2:	4828      	ldr	r0, [pc, #160]	; (8003454 <_printf_i+0x248>)
 80033b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033b8:	e7e3      	b.n	8003382 <_printf_i+0x176>
 80033ba:	0659      	lsls	r1, r3, #25
 80033bc:	bf48      	it	mi
 80033be:	b2b6      	uxthmi	r6, r6
 80033c0:	e7e6      	b.n	8003390 <_printf_i+0x184>
 80033c2:	4615      	mov	r5, r2
 80033c4:	e7bb      	b.n	800333e <_printf_i+0x132>
 80033c6:	682b      	ldr	r3, [r5, #0]
 80033c8:	6826      	ldr	r6, [r4, #0]
 80033ca:	1d18      	adds	r0, r3, #4
 80033cc:	6961      	ldr	r1, [r4, #20]
 80033ce:	6028      	str	r0, [r5, #0]
 80033d0:	0635      	lsls	r5, r6, #24
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	d501      	bpl.n	80033da <_printf_i+0x1ce>
 80033d6:	6019      	str	r1, [r3, #0]
 80033d8:	e002      	b.n	80033e0 <_printf_i+0x1d4>
 80033da:	0670      	lsls	r0, r6, #25
 80033dc:	d5fb      	bpl.n	80033d6 <_printf_i+0x1ca>
 80033de:	8019      	strh	r1, [r3, #0]
 80033e0:	2300      	movs	r3, #0
 80033e2:	4615      	mov	r5, r2
 80033e4:	6123      	str	r3, [r4, #16]
 80033e6:	e7ba      	b.n	800335e <_printf_i+0x152>
 80033e8:	682b      	ldr	r3, [r5, #0]
 80033ea:	2100      	movs	r1, #0
 80033ec:	1d1a      	adds	r2, r3, #4
 80033ee:	602a      	str	r2, [r5, #0]
 80033f0:	681d      	ldr	r5, [r3, #0]
 80033f2:	6862      	ldr	r2, [r4, #4]
 80033f4:	4628      	mov	r0, r5
 80033f6:	f000 f82f 	bl	8003458 <memchr>
 80033fa:	b108      	cbz	r0, 8003400 <_printf_i+0x1f4>
 80033fc:	1b40      	subs	r0, r0, r5
 80033fe:	6060      	str	r0, [r4, #4]
 8003400:	6863      	ldr	r3, [r4, #4]
 8003402:	6123      	str	r3, [r4, #16]
 8003404:	2300      	movs	r3, #0
 8003406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800340a:	e7a8      	b.n	800335e <_printf_i+0x152>
 800340c:	462a      	mov	r2, r5
 800340e:	4649      	mov	r1, r9
 8003410:	4640      	mov	r0, r8
 8003412:	6923      	ldr	r3, [r4, #16]
 8003414:	47d0      	blx	sl
 8003416:	3001      	adds	r0, #1
 8003418:	d0ab      	beq.n	8003372 <_printf_i+0x166>
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	079b      	lsls	r3, r3, #30
 800341e:	d413      	bmi.n	8003448 <_printf_i+0x23c>
 8003420:	68e0      	ldr	r0, [r4, #12]
 8003422:	9b03      	ldr	r3, [sp, #12]
 8003424:	4298      	cmp	r0, r3
 8003426:	bfb8      	it	lt
 8003428:	4618      	movlt	r0, r3
 800342a:	e7a4      	b.n	8003376 <_printf_i+0x16a>
 800342c:	2301      	movs	r3, #1
 800342e:	4632      	mov	r2, r6
 8003430:	4649      	mov	r1, r9
 8003432:	4640      	mov	r0, r8
 8003434:	47d0      	blx	sl
 8003436:	3001      	adds	r0, #1
 8003438:	d09b      	beq.n	8003372 <_printf_i+0x166>
 800343a:	3501      	adds	r5, #1
 800343c:	68e3      	ldr	r3, [r4, #12]
 800343e:	9903      	ldr	r1, [sp, #12]
 8003440:	1a5b      	subs	r3, r3, r1
 8003442:	42ab      	cmp	r3, r5
 8003444:	dcf2      	bgt.n	800342c <_printf_i+0x220>
 8003446:	e7eb      	b.n	8003420 <_printf_i+0x214>
 8003448:	2500      	movs	r5, #0
 800344a:	f104 0619 	add.w	r6, r4, #25
 800344e:	e7f5      	b.n	800343c <_printf_i+0x230>
 8003450:	0800378d 	.word	0x0800378d
 8003454:	0800379e 	.word	0x0800379e

08003458 <memchr>:
 8003458:	4603      	mov	r3, r0
 800345a:	b510      	push	{r4, lr}
 800345c:	b2c9      	uxtb	r1, r1
 800345e:	4402      	add	r2, r0
 8003460:	4293      	cmp	r3, r2
 8003462:	4618      	mov	r0, r3
 8003464:	d101      	bne.n	800346a <memchr+0x12>
 8003466:	2000      	movs	r0, #0
 8003468:	e003      	b.n	8003472 <memchr+0x1a>
 800346a:	7804      	ldrb	r4, [r0, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	428c      	cmp	r4, r1
 8003470:	d1f6      	bne.n	8003460 <memchr+0x8>
 8003472:	bd10      	pop	{r4, pc}

08003474 <memcpy>:
 8003474:	440a      	add	r2, r1
 8003476:	4291      	cmp	r1, r2
 8003478:	f100 33ff 	add.w	r3, r0, #4294967295
 800347c:	d100      	bne.n	8003480 <memcpy+0xc>
 800347e:	4770      	bx	lr
 8003480:	b510      	push	{r4, lr}
 8003482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003486:	4291      	cmp	r1, r2
 8003488:	f803 4f01 	strb.w	r4, [r3, #1]!
 800348c:	d1f9      	bne.n	8003482 <memcpy+0xe>
 800348e:	bd10      	pop	{r4, pc}

08003490 <memmove>:
 8003490:	4288      	cmp	r0, r1
 8003492:	b510      	push	{r4, lr}
 8003494:	eb01 0402 	add.w	r4, r1, r2
 8003498:	d902      	bls.n	80034a0 <memmove+0x10>
 800349a:	4284      	cmp	r4, r0
 800349c:	4623      	mov	r3, r4
 800349e:	d807      	bhi.n	80034b0 <memmove+0x20>
 80034a0:	1e43      	subs	r3, r0, #1
 80034a2:	42a1      	cmp	r1, r4
 80034a4:	d008      	beq.n	80034b8 <memmove+0x28>
 80034a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034ae:	e7f8      	b.n	80034a2 <memmove+0x12>
 80034b0:	4601      	mov	r1, r0
 80034b2:	4402      	add	r2, r0
 80034b4:	428a      	cmp	r2, r1
 80034b6:	d100      	bne.n	80034ba <memmove+0x2a>
 80034b8:	bd10      	pop	{r4, pc}
 80034ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034c2:	e7f7      	b.n	80034b4 <memmove+0x24>

080034c4 <_free_r>:
 80034c4:	b538      	push	{r3, r4, r5, lr}
 80034c6:	4605      	mov	r5, r0
 80034c8:	2900      	cmp	r1, #0
 80034ca:	d040      	beq.n	800354e <_free_r+0x8a>
 80034cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034d0:	1f0c      	subs	r4, r1, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bfb8      	it	lt
 80034d6:	18e4      	addlt	r4, r4, r3
 80034d8:	f000 f910 	bl	80036fc <__malloc_lock>
 80034dc:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <_free_r+0x8c>)
 80034de:	6813      	ldr	r3, [r2, #0]
 80034e0:	b933      	cbnz	r3, 80034f0 <_free_r+0x2c>
 80034e2:	6063      	str	r3, [r4, #4]
 80034e4:	6014      	str	r4, [r2, #0]
 80034e6:	4628      	mov	r0, r5
 80034e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034ec:	f000 b90c 	b.w	8003708 <__malloc_unlock>
 80034f0:	42a3      	cmp	r3, r4
 80034f2:	d908      	bls.n	8003506 <_free_r+0x42>
 80034f4:	6820      	ldr	r0, [r4, #0]
 80034f6:	1821      	adds	r1, r4, r0
 80034f8:	428b      	cmp	r3, r1
 80034fa:	bf01      	itttt	eq
 80034fc:	6819      	ldreq	r1, [r3, #0]
 80034fe:	685b      	ldreq	r3, [r3, #4]
 8003500:	1809      	addeq	r1, r1, r0
 8003502:	6021      	streq	r1, [r4, #0]
 8003504:	e7ed      	b.n	80034e2 <_free_r+0x1e>
 8003506:	461a      	mov	r2, r3
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	b10b      	cbz	r3, 8003510 <_free_r+0x4c>
 800350c:	42a3      	cmp	r3, r4
 800350e:	d9fa      	bls.n	8003506 <_free_r+0x42>
 8003510:	6811      	ldr	r1, [r2, #0]
 8003512:	1850      	adds	r0, r2, r1
 8003514:	42a0      	cmp	r0, r4
 8003516:	d10b      	bne.n	8003530 <_free_r+0x6c>
 8003518:	6820      	ldr	r0, [r4, #0]
 800351a:	4401      	add	r1, r0
 800351c:	1850      	adds	r0, r2, r1
 800351e:	4283      	cmp	r3, r0
 8003520:	6011      	str	r1, [r2, #0]
 8003522:	d1e0      	bne.n	80034e6 <_free_r+0x22>
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4401      	add	r1, r0
 800352a:	6011      	str	r1, [r2, #0]
 800352c:	6053      	str	r3, [r2, #4]
 800352e:	e7da      	b.n	80034e6 <_free_r+0x22>
 8003530:	d902      	bls.n	8003538 <_free_r+0x74>
 8003532:	230c      	movs	r3, #12
 8003534:	602b      	str	r3, [r5, #0]
 8003536:	e7d6      	b.n	80034e6 <_free_r+0x22>
 8003538:	6820      	ldr	r0, [r4, #0]
 800353a:	1821      	adds	r1, r4, r0
 800353c:	428b      	cmp	r3, r1
 800353e:	bf01      	itttt	eq
 8003540:	6819      	ldreq	r1, [r3, #0]
 8003542:	685b      	ldreq	r3, [r3, #4]
 8003544:	1809      	addeq	r1, r1, r0
 8003546:	6021      	streq	r1, [r4, #0]
 8003548:	6063      	str	r3, [r4, #4]
 800354a:	6054      	str	r4, [r2, #4]
 800354c:	e7cb      	b.n	80034e6 <_free_r+0x22>
 800354e:	bd38      	pop	{r3, r4, r5, pc}
 8003550:	20000110 	.word	0x20000110

08003554 <sbrk_aligned>:
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	4e0e      	ldr	r6, [pc, #56]	; (8003590 <sbrk_aligned+0x3c>)
 8003558:	460c      	mov	r4, r1
 800355a:	6831      	ldr	r1, [r6, #0]
 800355c:	4605      	mov	r5, r0
 800355e:	b911      	cbnz	r1, 8003566 <sbrk_aligned+0x12>
 8003560:	f000 f8bc 	bl	80036dc <_sbrk_r>
 8003564:	6030      	str	r0, [r6, #0]
 8003566:	4621      	mov	r1, r4
 8003568:	4628      	mov	r0, r5
 800356a:	f000 f8b7 	bl	80036dc <_sbrk_r>
 800356e:	1c43      	adds	r3, r0, #1
 8003570:	d00a      	beq.n	8003588 <sbrk_aligned+0x34>
 8003572:	1cc4      	adds	r4, r0, #3
 8003574:	f024 0403 	bic.w	r4, r4, #3
 8003578:	42a0      	cmp	r0, r4
 800357a:	d007      	beq.n	800358c <sbrk_aligned+0x38>
 800357c:	1a21      	subs	r1, r4, r0
 800357e:	4628      	mov	r0, r5
 8003580:	f000 f8ac 	bl	80036dc <_sbrk_r>
 8003584:	3001      	adds	r0, #1
 8003586:	d101      	bne.n	800358c <sbrk_aligned+0x38>
 8003588:	f04f 34ff 	mov.w	r4, #4294967295
 800358c:	4620      	mov	r0, r4
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	20000114 	.word	0x20000114

08003594 <_malloc_r>:
 8003594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003598:	1ccd      	adds	r5, r1, #3
 800359a:	f025 0503 	bic.w	r5, r5, #3
 800359e:	3508      	adds	r5, #8
 80035a0:	2d0c      	cmp	r5, #12
 80035a2:	bf38      	it	cc
 80035a4:	250c      	movcc	r5, #12
 80035a6:	2d00      	cmp	r5, #0
 80035a8:	4607      	mov	r7, r0
 80035aa:	db01      	blt.n	80035b0 <_malloc_r+0x1c>
 80035ac:	42a9      	cmp	r1, r5
 80035ae:	d905      	bls.n	80035bc <_malloc_r+0x28>
 80035b0:	230c      	movs	r3, #12
 80035b2:	2600      	movs	r6, #0
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4630      	mov	r0, r6
 80035b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035bc:	4e2e      	ldr	r6, [pc, #184]	; (8003678 <_malloc_r+0xe4>)
 80035be:	f000 f89d 	bl	80036fc <__malloc_lock>
 80035c2:	6833      	ldr	r3, [r6, #0]
 80035c4:	461c      	mov	r4, r3
 80035c6:	bb34      	cbnz	r4, 8003616 <_malloc_r+0x82>
 80035c8:	4629      	mov	r1, r5
 80035ca:	4638      	mov	r0, r7
 80035cc:	f7ff ffc2 	bl	8003554 <sbrk_aligned>
 80035d0:	1c43      	adds	r3, r0, #1
 80035d2:	4604      	mov	r4, r0
 80035d4:	d14d      	bne.n	8003672 <_malloc_r+0xde>
 80035d6:	6834      	ldr	r4, [r6, #0]
 80035d8:	4626      	mov	r6, r4
 80035da:	2e00      	cmp	r6, #0
 80035dc:	d140      	bne.n	8003660 <_malloc_r+0xcc>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	4631      	mov	r1, r6
 80035e2:	4638      	mov	r0, r7
 80035e4:	eb04 0803 	add.w	r8, r4, r3
 80035e8:	f000 f878 	bl	80036dc <_sbrk_r>
 80035ec:	4580      	cmp	r8, r0
 80035ee:	d13a      	bne.n	8003666 <_malloc_r+0xd2>
 80035f0:	6821      	ldr	r1, [r4, #0]
 80035f2:	3503      	adds	r5, #3
 80035f4:	1a6d      	subs	r5, r5, r1
 80035f6:	f025 0503 	bic.w	r5, r5, #3
 80035fa:	3508      	adds	r5, #8
 80035fc:	2d0c      	cmp	r5, #12
 80035fe:	bf38      	it	cc
 8003600:	250c      	movcc	r5, #12
 8003602:	4638      	mov	r0, r7
 8003604:	4629      	mov	r1, r5
 8003606:	f7ff ffa5 	bl	8003554 <sbrk_aligned>
 800360a:	3001      	adds	r0, #1
 800360c:	d02b      	beq.n	8003666 <_malloc_r+0xd2>
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	442b      	add	r3, r5
 8003612:	6023      	str	r3, [r4, #0]
 8003614:	e00e      	b.n	8003634 <_malloc_r+0xa0>
 8003616:	6822      	ldr	r2, [r4, #0]
 8003618:	1b52      	subs	r2, r2, r5
 800361a:	d41e      	bmi.n	800365a <_malloc_r+0xc6>
 800361c:	2a0b      	cmp	r2, #11
 800361e:	d916      	bls.n	800364e <_malloc_r+0xba>
 8003620:	1961      	adds	r1, r4, r5
 8003622:	42a3      	cmp	r3, r4
 8003624:	6025      	str	r5, [r4, #0]
 8003626:	bf18      	it	ne
 8003628:	6059      	strne	r1, [r3, #4]
 800362a:	6863      	ldr	r3, [r4, #4]
 800362c:	bf08      	it	eq
 800362e:	6031      	streq	r1, [r6, #0]
 8003630:	5162      	str	r2, [r4, r5]
 8003632:	604b      	str	r3, [r1, #4]
 8003634:	4638      	mov	r0, r7
 8003636:	f104 060b 	add.w	r6, r4, #11
 800363a:	f000 f865 	bl	8003708 <__malloc_unlock>
 800363e:	f026 0607 	bic.w	r6, r6, #7
 8003642:	1d23      	adds	r3, r4, #4
 8003644:	1af2      	subs	r2, r6, r3
 8003646:	d0b6      	beq.n	80035b6 <_malloc_r+0x22>
 8003648:	1b9b      	subs	r3, r3, r6
 800364a:	50a3      	str	r3, [r4, r2]
 800364c:	e7b3      	b.n	80035b6 <_malloc_r+0x22>
 800364e:	6862      	ldr	r2, [r4, #4]
 8003650:	42a3      	cmp	r3, r4
 8003652:	bf0c      	ite	eq
 8003654:	6032      	streq	r2, [r6, #0]
 8003656:	605a      	strne	r2, [r3, #4]
 8003658:	e7ec      	b.n	8003634 <_malloc_r+0xa0>
 800365a:	4623      	mov	r3, r4
 800365c:	6864      	ldr	r4, [r4, #4]
 800365e:	e7b2      	b.n	80035c6 <_malloc_r+0x32>
 8003660:	4634      	mov	r4, r6
 8003662:	6876      	ldr	r6, [r6, #4]
 8003664:	e7b9      	b.n	80035da <_malloc_r+0x46>
 8003666:	230c      	movs	r3, #12
 8003668:	4638      	mov	r0, r7
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	f000 f84c 	bl	8003708 <__malloc_unlock>
 8003670:	e7a1      	b.n	80035b6 <_malloc_r+0x22>
 8003672:	6025      	str	r5, [r4, #0]
 8003674:	e7de      	b.n	8003634 <_malloc_r+0xa0>
 8003676:	bf00      	nop
 8003678:	20000110 	.word	0x20000110

0800367c <_realloc_r>:
 800367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003680:	4680      	mov	r8, r0
 8003682:	4614      	mov	r4, r2
 8003684:	460e      	mov	r6, r1
 8003686:	b921      	cbnz	r1, 8003692 <_realloc_r+0x16>
 8003688:	4611      	mov	r1, r2
 800368a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800368e:	f7ff bf81 	b.w	8003594 <_malloc_r>
 8003692:	b92a      	cbnz	r2, 80036a0 <_realloc_r+0x24>
 8003694:	f7ff ff16 	bl	80034c4 <_free_r>
 8003698:	4625      	mov	r5, r4
 800369a:	4628      	mov	r0, r5
 800369c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036a0:	f000 f838 	bl	8003714 <_malloc_usable_size_r>
 80036a4:	4284      	cmp	r4, r0
 80036a6:	4607      	mov	r7, r0
 80036a8:	d802      	bhi.n	80036b0 <_realloc_r+0x34>
 80036aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036ae:	d812      	bhi.n	80036d6 <_realloc_r+0x5a>
 80036b0:	4621      	mov	r1, r4
 80036b2:	4640      	mov	r0, r8
 80036b4:	f7ff ff6e 	bl	8003594 <_malloc_r>
 80036b8:	4605      	mov	r5, r0
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d0ed      	beq.n	800369a <_realloc_r+0x1e>
 80036be:	42bc      	cmp	r4, r7
 80036c0:	4622      	mov	r2, r4
 80036c2:	4631      	mov	r1, r6
 80036c4:	bf28      	it	cs
 80036c6:	463a      	movcs	r2, r7
 80036c8:	f7ff fed4 	bl	8003474 <memcpy>
 80036cc:	4631      	mov	r1, r6
 80036ce:	4640      	mov	r0, r8
 80036d0:	f7ff fef8 	bl	80034c4 <_free_r>
 80036d4:	e7e1      	b.n	800369a <_realloc_r+0x1e>
 80036d6:	4635      	mov	r5, r6
 80036d8:	e7df      	b.n	800369a <_realloc_r+0x1e>
	...

080036dc <_sbrk_r>:
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	2300      	movs	r3, #0
 80036e0:	4d05      	ldr	r5, [pc, #20]	; (80036f8 <_sbrk_r+0x1c>)
 80036e2:	4604      	mov	r4, r0
 80036e4:	4608      	mov	r0, r1
 80036e6:	602b      	str	r3, [r5, #0]
 80036e8:	f7fd ff7e 	bl	80015e8 <_sbrk>
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	d102      	bne.n	80036f6 <_sbrk_r+0x1a>
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	b103      	cbz	r3, 80036f6 <_sbrk_r+0x1a>
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	bd38      	pop	{r3, r4, r5, pc}
 80036f8:	20000118 	.word	0x20000118

080036fc <__malloc_lock>:
 80036fc:	4801      	ldr	r0, [pc, #4]	; (8003704 <__malloc_lock+0x8>)
 80036fe:	f000 b811 	b.w	8003724 <__retarget_lock_acquire_recursive>
 8003702:	bf00      	nop
 8003704:	2000011c 	.word	0x2000011c

08003708 <__malloc_unlock>:
 8003708:	4801      	ldr	r0, [pc, #4]	; (8003710 <__malloc_unlock+0x8>)
 800370a:	f000 b80c 	b.w	8003726 <__retarget_lock_release_recursive>
 800370e:	bf00      	nop
 8003710:	2000011c 	.word	0x2000011c

08003714 <_malloc_usable_size_r>:
 8003714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003718:	1f18      	subs	r0, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	bfbc      	itt	lt
 800371e:	580b      	ldrlt	r3, [r1, r0]
 8003720:	18c0      	addlt	r0, r0, r3
 8003722:	4770      	bx	lr

08003724 <__retarget_lock_acquire_recursive>:
 8003724:	4770      	bx	lr

08003726 <__retarget_lock_release_recursive>:
 8003726:	4770      	bx	lr

08003728 <_init>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	bf00      	nop
 800372c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372e:	bc08      	pop	{r3}
 8003730:	469e      	mov	lr, r3
 8003732:	4770      	bx	lr

08003734 <_fini>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	bf00      	nop
 8003738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373a:	bc08      	pop	{r3}
 800373c:	469e      	mov	lr, r3
 800373e:	4770      	bx	lr
