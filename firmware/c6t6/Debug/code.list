
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004264  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004370  08004370  00014370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e0  080043e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043e8  080043e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08004460  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004460  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5cf  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002312  00000000  00000000  0002d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0002f980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00030888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002891  00000000  00000000  00031680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c5b  00000000  00000000  00033f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a460  00000000  00000000  00045b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cffcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004438  00000000  00000000  000d001c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004358 	.word	0x08004358

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004358 	.word	0x08004358

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	; 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	3a01      	subs	r2, #1
 800057e:	bf28      	it	cs
 8000580:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000584:	d2ed      	bcs.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000732:	2afd      	cmp	r2, #253	; 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	; 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	; 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	; 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <__aeabi_ldivmod>:
 8000980:	b97b      	cbnz	r3, 80009a2 <__aeabi_ldivmod+0x22>
 8000982:	b972      	cbnz	r2, 80009a2 <__aeabi_ldivmod+0x22>
 8000984:	2900      	cmp	r1, #0
 8000986:	bfbe      	ittt	lt
 8000988:	2000      	movlt	r0, #0
 800098a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800098e:	e006      	blt.n	800099e <__aeabi_ldivmod+0x1e>
 8000990:	bf08      	it	eq
 8000992:	2800      	cmpeq	r0, #0
 8000994:	bf1c      	itt	ne
 8000996:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800099a:	f04f 30ff 	movne.w	r0, #4294967295
 800099e:	f000 b9a9 	b.w	8000cf4 <__aeabi_idiv0>
 80009a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009aa:	2900      	cmp	r1, #0
 80009ac:	db09      	blt.n	80009c2 <__aeabi_ldivmod+0x42>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db1a      	blt.n	80009e8 <__aeabi_ldivmod+0x68>
 80009b2:	f000 f835 	bl	8000a20 <__udivmoddi4>
 80009b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009be:	b004      	add	sp, #16
 80009c0:	4770      	bx	lr
 80009c2:	4240      	negs	r0, r0
 80009c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db1b      	blt.n	8000a04 <__aeabi_ldivmod+0x84>
 80009cc:	f000 f828 	bl	8000a20 <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4240      	negs	r0, r0
 80009dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009e0:	4252      	negs	r2, r2
 80009e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009e6:	4770      	bx	lr
 80009e8:	4252      	negs	r2, r2
 80009ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009ee:	f000 f817 	bl	8000a20 <__udivmoddi4>
 80009f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009fa:	b004      	add	sp, #16
 80009fc:	4240      	negs	r0, r0
 80009fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a02:	4770      	bx	lr
 8000a04:	4252      	negs	r2, r2
 8000a06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a0a:	f000 f809 	bl	8000a20 <__udivmoddi4>
 8000a0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a16:	b004      	add	sp, #16
 8000a18:	4252      	negs	r2, r2
 8000a1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a1e:	4770      	bx	lr

08000a20 <__udivmoddi4>:
 8000a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a24:	9e08      	ldr	r6, [sp, #32]
 8000a26:	460d      	mov	r5, r1
 8000a28:	4604      	mov	r4, r0
 8000a2a:	4688      	mov	r8, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d14d      	bne.n	8000acc <__udivmoddi4+0xac>
 8000a30:	428a      	cmp	r2, r1
 8000a32:	4694      	mov	ip, r2
 8000a34:	d968      	bls.n	8000b08 <__udivmoddi4+0xe8>
 8000a36:	fab2 f282 	clz	r2, r2
 8000a3a:	b152      	cbz	r2, 8000a52 <__udivmoddi4+0x32>
 8000a3c:	fa01 f302 	lsl.w	r3, r1, r2
 8000a40:	f1c2 0120 	rsb	r1, r2, #32
 8000a44:	fa20 f101 	lsr.w	r1, r0, r1
 8000a48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a4c:	ea41 0803 	orr.w	r8, r1, r3
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000a56:	fbb8 f7f1 	udiv	r7, r8, r1
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	fb01 8817 	mls	r8, r1, r7, r8
 8000a62:	fb07 f00e 	mul.w	r0, r7, lr
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a6c:	4298      	cmp	r0, r3
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x66>
 8000a70:	eb1c 0303 	adds.w	r3, ip, r3
 8000a74:	f107 35ff 	add.w	r5, r7, #4294967295
 8000a78:	f080 811e 	bcs.w	8000cb8 <__udivmoddi4+0x298>
 8000a7c:	4298      	cmp	r0, r3
 8000a7e:	f240 811b 	bls.w	8000cb8 <__udivmoddi4+0x298>
 8000a82:	3f02      	subs	r7, #2
 8000a84:	4463      	add	r3, ip
 8000a86:	1a1b      	subs	r3, r3, r0
 8000a88:	fbb3 f0f1 	udiv	r0, r3, r1
 8000a8c:	fb01 3310 	mls	r3, r1, r0, r3
 8000a90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a94:	b2a4      	uxth	r4, r4
 8000a96:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a9a:	45a6      	cmp	lr, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x94>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa6:	f080 8109 	bcs.w	8000cbc <__udivmoddi4+0x29c>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f240 8106 	bls.w	8000cbc <__udivmoddi4+0x29c>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	eba4 040e 	sub.w	r4, r4, lr
 8000aba:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000abe:	b11e      	cbz	r6, 8000ac8 <__udivmoddi4+0xa8>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	40d4      	lsrs	r4, r2
 8000ac4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d908      	bls.n	8000ae2 <__udivmoddi4+0xc2>
 8000ad0:	2e00      	cmp	r6, #0
 8000ad2:	f000 80ee 	beq.w	8000cb2 <__udivmoddi4+0x292>
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e9c6 0500 	strd	r0, r5, [r6]
 8000adc:	4608      	mov	r0, r1
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	fab3 f183 	clz	r1, r3
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	d14a      	bne.n	8000b80 <__udivmoddi4+0x160>
 8000aea:	42ab      	cmp	r3, r5
 8000aec:	d302      	bcc.n	8000af4 <__udivmoddi4+0xd4>
 8000aee:	4282      	cmp	r2, r0
 8000af0:	f200 80fc 	bhi.w	8000cec <__udivmoddi4+0x2cc>
 8000af4:	1a84      	subs	r4, r0, r2
 8000af6:	eb65 0303 	sbc.w	r3, r5, r3
 8000afa:	2001      	movs	r0, #1
 8000afc:	4698      	mov	r8, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d0e2      	beq.n	8000ac8 <__udivmoddi4+0xa8>
 8000b02:	e9c6 4800 	strd	r4, r8, [r6]
 8000b06:	e7df      	b.n	8000ac8 <__udivmoddi4+0xa8>
 8000b08:	b902      	cbnz	r2, 8000b0c <__udivmoddi4+0xec>
 8000b0a:	deff      	udf	#255	; 0xff
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f040 8091 	bne.w	8000c38 <__udivmoddi4+0x218>
 8000b16:	eba1 000c 	sub.w	r0, r1, ip
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b20:	fa1f fe8c 	uxth.w	lr, ip
 8000b24:	fbb0 f3f7 	udiv	r3, r0, r7
 8000b28:	fb07 0013 	mls	r0, r7, r3, r0
 8000b2c:	0c25      	lsrs	r5, r4, #16
 8000b2e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000b32:	fb0e f003 	mul.w	r0, lr, r3
 8000b36:	42a8      	cmp	r0, r5
 8000b38:	d908      	bls.n	8000b4c <__udivmoddi4+0x12c>
 8000b3a:	eb1c 0505 	adds.w	r5, ip, r5
 8000b3e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b42:	d202      	bcs.n	8000b4a <__udivmoddi4+0x12a>
 8000b44:	42a8      	cmp	r0, r5
 8000b46:	f200 80ce 	bhi.w	8000ce6 <__udivmoddi4+0x2c6>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	1a2d      	subs	r5, r5, r0
 8000b4e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000b52:	fb07 5510 	mls	r5, r7, r0, r5
 8000b56:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d908      	bls.n	8000b76 <__udivmoddi4+0x156>
 8000b64:	eb1c 0404 	adds.w	r4, ip, r4
 8000b68:	f100 35ff 	add.w	r5, r0, #4294967295
 8000b6c:	d202      	bcs.n	8000b74 <__udivmoddi4+0x154>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f200 80b6 	bhi.w	8000ce0 <__udivmoddi4+0x2c0>
 8000b74:	4628      	mov	r0, r5
 8000b76:	eba4 040e 	sub.w	r4, r4, lr
 8000b7a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b7e:	e79e      	b.n	8000abe <__udivmoddi4+0x9e>
 8000b80:	f1c1 0720 	rsb	r7, r1, #32
 8000b84:	408b      	lsls	r3, r1
 8000b86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000b92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b96:	fbba f8f9 	udiv	r8, sl, r9
 8000b9a:	fa20 f307 	lsr.w	r3, r0, r7
 8000b9e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000ba2:	408d      	lsls	r5, r1
 8000ba4:	fa1f fe8c 	uxth.w	lr, ip
 8000ba8:	431d      	orrs	r5, r3
 8000baa:	fa00 f301 	lsl.w	r3, r0, r1
 8000bae:	fb08 f00e 	mul.w	r0, r8, lr
 8000bb2:	0c2c      	lsrs	r4, r5, #16
 8000bb4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000bb8:	42a0      	cmp	r0, r4
 8000bba:	fa02 f201 	lsl.w	r2, r2, r1
 8000bbe:	d90b      	bls.n	8000bd8 <__udivmoddi4+0x1b8>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc8:	f080 8088 	bcs.w	8000cdc <__udivmoddi4+0x2bc>
 8000bcc:	42a0      	cmp	r0, r4
 8000bce:	f240 8085 	bls.w	8000cdc <__udivmoddi4+0x2bc>
 8000bd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd6:	4464      	add	r4, ip
 8000bd8:	1a24      	subs	r4, r4, r0
 8000bda:	fbb4 f0f9 	udiv	r0, r4, r9
 8000bde:	fb09 4410 	mls	r4, r9, r0, r4
 8000be2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x1e2>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000bf8:	d26c      	bcs.n	8000cd4 <__udivmoddi4+0x2b4>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	d96a      	bls.n	8000cd4 <__udivmoddi4+0x2b4>
 8000bfe:	3802      	subs	r0, #2
 8000c00:	4464      	add	r4, ip
 8000c02:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c06:	fba0 9502 	umull	r9, r5, r0, r2
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	42ac      	cmp	r4, r5
 8000c10:	46c8      	mov	r8, r9
 8000c12:	46ae      	mov	lr, r5
 8000c14:	d356      	bcc.n	8000cc4 <__udivmoddi4+0x2a4>
 8000c16:	d053      	beq.n	8000cc0 <__udivmoddi4+0x2a0>
 8000c18:	2e00      	cmp	r6, #0
 8000c1a:	d069      	beq.n	8000cf0 <__udivmoddi4+0x2d0>
 8000c1c:	ebb3 0208 	subs.w	r2, r3, r8
 8000c20:	eb64 040e 	sbc.w	r4, r4, lr
 8000c24:	fa22 f301 	lsr.w	r3, r2, r1
 8000c28:	fa04 f707 	lsl.w	r7, r4, r7
 8000c2c:	431f      	orrs	r7, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c6 7400 	strd	r7, r4, [r6]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e747      	b.n	8000ac8 <__udivmoddi4+0xa8>
 8000c38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3c:	f1c2 0120 	rsb	r1, r2, #32
 8000c40:	fa25 f301 	lsr.w	r3, r5, r1
 8000c44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c48:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	430d      	orrs	r5, r1
 8000c50:	fbb3 f1f7 	udiv	r1, r3, r7
 8000c54:	fb07 3311 	mls	r3, r7, r1, r3
 8000c58:	fa1f fe8c 	uxth.w	lr, ip
 8000c5c:	0c28      	lsrs	r0, r5, #16
 8000c5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c62:	fb01 f30e 	mul.w	r3, r1, lr
 8000c66:	4283      	cmp	r3, r0
 8000c68:	fa04 f402 	lsl.w	r4, r4, r2
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x260>
 8000c6e:	eb1c 0000 	adds.w	r0, ip, r0
 8000c72:	f101 38ff 	add.w	r8, r1, #4294967295
 8000c76:	d22f      	bcs.n	8000cd8 <__udivmoddi4+0x2b8>
 8000c78:	4283      	cmp	r3, r0
 8000c7a:	d92d      	bls.n	8000cd8 <__udivmoddi4+0x2b8>
 8000c7c:	3902      	subs	r1, #2
 8000c7e:	4460      	add	r0, ip
 8000c80:	1ac0      	subs	r0, r0, r3
 8000c82:	fbb0 f3f7 	udiv	r3, r0, r7
 8000c86:	fb07 0013 	mls	r0, r7, r3, r0
 8000c8a:	b2ad      	uxth	r5, r5
 8000c8c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c90:	fb03 f00e 	mul.w	r0, r3, lr
 8000c94:	42a8      	cmp	r0, r5
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x28a>
 8000c98:	eb1c 0505 	adds.w	r5, ip, r5
 8000c9c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca0:	d216      	bcs.n	8000cd0 <__udivmoddi4+0x2b0>
 8000ca2:	42a8      	cmp	r0, r5
 8000ca4:	d914      	bls.n	8000cd0 <__udivmoddi4+0x2b0>
 8000ca6:	3b02      	subs	r3, #2
 8000ca8:	4465      	add	r5, ip
 8000caa:	1a28      	subs	r0, r5, r0
 8000cac:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cb0:	e738      	b.n	8000b24 <__udivmoddi4+0x104>
 8000cb2:	4631      	mov	r1, r6
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	e707      	b.n	8000ac8 <__udivmoddi4+0xa8>
 8000cb8:	462f      	mov	r7, r5
 8000cba:	e6e4      	b.n	8000a86 <__udivmoddi4+0x66>
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	e6f9      	b.n	8000ab4 <__udivmoddi4+0x94>
 8000cc0:	454b      	cmp	r3, r9
 8000cc2:	d2a9      	bcs.n	8000c18 <__udivmoddi4+0x1f8>
 8000cc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ccc:	3801      	subs	r0, #1
 8000cce:	e7a3      	b.n	8000c18 <__udivmoddi4+0x1f8>
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	e7ea      	b.n	8000caa <__udivmoddi4+0x28a>
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	e794      	b.n	8000c02 <__udivmoddi4+0x1e2>
 8000cd8:	4641      	mov	r1, r8
 8000cda:	e7d1      	b.n	8000c80 <__udivmoddi4+0x260>
 8000cdc:	46d0      	mov	r8, sl
 8000cde:	e77b      	b.n	8000bd8 <__udivmoddi4+0x1b8>
 8000ce0:	4464      	add	r4, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	e747      	b.n	8000b76 <__udivmoddi4+0x156>
 8000ce6:	3b02      	subs	r3, #2
 8000ce8:	4465      	add	r5, ip
 8000cea:	e72f      	b.n	8000b4c <__udivmoddi4+0x12c>
 8000cec:	4608      	mov	r0, r1
 8000cee:	e706      	b.n	8000afe <__udivmoddi4+0xde>
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e6e9      	b.n	8000ac8 <__udivmoddi4+0xa8>

08000cf4 <__aeabi_idiv0>:
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0c:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a34      	ldr	r2, [pc, #208]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d12:	f043 0310 	orr.w	r3, r3, #16
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0310 	and.w	r3, r3, #16
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d24:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d2a:	f043 0320 	orr.w	r3, r3, #32
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0320 	and.w	r3, r3, #32
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0308 	and.w	r3, r3, #8
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d72:	481d      	ldr	r0, [pc, #116]	; (8000de8 <MX_GPIO_Init+0xf0>)
 8000d74:	f001 f8dd 	bl	8001f32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7e:	481b      	ldr	r0, [pc, #108]	; (8000dec <MX_GPIO_Init+0xf4>)
 8000d80:	f001 f8d7 	bl	8001f32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4812      	ldr	r0, [pc, #72]	; (8000de8 <MX_GPIO_Init+0xf0>)
 8000d9e:	f000 ff35 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000da2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <MX_GPIO_Init+0xf4>)
 8000dbc:	f000 ff26 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_GPIO_Init+0xf4>)
 8000dd6:	f000 ff19 	bl	8001c0c <HAL_GPIO_Init>

}
 8000dda:	bf00      	nop
 8000ddc:	3720      	adds	r7, #32
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40011000 	.word	0x40011000
 8000dec:	40010c00 	.word	0x40010c00

08000df0 <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 8000df6:	2304      	movs	r3, #4
 8000df8:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 8000dfa:	e006      	b.n	8000e0a <hx711_delay_us+0x1a>
  {
    delay--;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
    __NOP();__NOP();__NOP();__NOP();
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
  while (delay > 0)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f5      	bne.n	8000dfc <hx711_delay_us+0xc>
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8000e24:	e002      	b.n	8000e2c <hx711_lock+0x10>
    hx711_delay(1);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 fde8 	bl	80019fc <HAL_Delay>
  while (hx711->lock)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7d1b      	ldrb	r3, [r3, #20]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f8      	bne.n	8000e26 <hx711_lock+0xa>
  hx711->lock = 1;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2201      	movs	r2, #1
 8000e38:	751a      	strb	r2, [r3, #20]
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	751a      	strb	r2, [r3, #20]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b088      	sub	sp, #32
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	4613      	mov	r3, r2
 8000e68:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f7ff ffd6 	bl	8000e1c <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e86:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	61fb      	str	r3, [r7, #28]
  gpio.Pin = clk_pin;
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	4619      	mov	r1, r3
 8000eac:	68b8      	ldr	r0, [r7, #8]
 8000eae:	f000 fead 	bl	8001c0c <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_PULLUP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	61fb      	str	r3, [r7, #28]
  gpio.Pin = dat_pin;
 8000ebe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ec0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	6838      	ldr	r0, [r7, #0]
 8000eca:	f000 fe9f 	bl	8001c0c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	891b      	ldrh	r3, [r3, #8]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f001 f82a 	bl	8001f32 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f000 fd8c 	bl	80019fc <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	891b      	ldrh	r3, [r3, #8]
 8000eec:	2200      	movs	r2, #0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f001 f81f 	bl	8001f32 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8000ef4:	200a      	movs	r0, #10
 8000ef6:	f000 fd81 	bl	80019fc <HAL_Delay>
  hx711_value(hx711);
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 f80a 	bl	8000f14 <hx711_value>
  hx711_value(hx711);
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f000 f807 	bl	8000f14 <hx711_value>
  hx711_unlock(hx711);
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f7ff ff9b 	bl	8000e42 <hx711_unlock>
}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8000f20:	f000 fd62 	bl	80019e8 <HAL_GetTick>
 8000f24:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000f26:	e00b      	b.n	8000f40 <hx711_value+0x2c>
  {
    hx711_delay(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f000 fd67 	bl	80019fc <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8000f2e:	f000 fd5b 	bl	80019e8 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b96      	cmp	r3, #150	; 0x96
 8000f3a:	d901      	bls.n	8000f40 <hx711_value+0x2c>
      return 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e055      	b.n	8000fec <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	895b      	ldrh	r3, [r3, #10]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	f000 ffda 	bl	8001f04 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d0e8      	beq.n	8000f28 <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	74fb      	strb	r3, [r7, #19]
 8000f5a:	e02a      	b.n	8000fb2 <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	891b      	ldrh	r3, [r3, #8]
 8000f64:	2201      	movs	r2, #1
 8000f66:	4619      	mov	r1, r3
 8000f68:	f000 ffe3 	bl	8001f32 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8000f6c:	f7ff ff40 	bl	8000df0 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	891b      	ldrh	r3, [r3, #8]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f000 ffd9 	bl	8001f32 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8000f80:	f7ff ff36 	bl	8000df0 <hx711_delay_us>
    data = data << 1;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	895b      	ldrh	r3, [r3, #10]
 8000f92:	4619      	mov	r1, r3
 8000f94:	4610      	mov	r0, r2
 8000f96:	f000 ffb5 	bl	8001f04 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d102      	bne.n	8000fa6 <hx711_value+0x92>
      data ++;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8000fa6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	74fb      	strb	r3, [r7, #19]
 8000fb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fb6:	2b17      	cmp	r3, #23
 8000fb8:	ddd0      	ble.n	8000f5c <hx711_value+0x48>
  }
  data = data ^ 0x800000;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8000fc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	891b      	ldrh	r3, [r3, #8]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f000 ffb0 	bl	8001f32 <HAL_GPIO_WritePin>
  hx711_delay_us();
 8000fd2:	f7ff ff0d 	bl	8000df0 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	891b      	ldrh	r3, [r3, #8]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f000 ffa6 	bl	8001f32 <HAL_GPIO_WritePin>
  hx711_delay_us();
 8000fe6:	f7ff ff03 	bl	8000df0 <hx711_delay_us>
  return data;
 8000fea:	697b      	ldr	r3, [r7, #20]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 8000ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	460b      	mov	r3, r1
 8001000:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff0a 	bl	8000e1c <hx711_lock>
  int64_t  ave = 0;
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 8001014:	2300      	movs	r3, #0
 8001016:	81fb      	strh	r3, [r7, #14]
 8001018:	e014      	b.n	8001044 <hx711_tare+0x50>
  {
    ave += hx711_value(hx711);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff7a 	bl	8000f14 <hx711_value>
 8001020:	4603      	mov	r3, r0
 8001022:	17da      	asrs	r2, r3, #31
 8001024:	461c      	mov	r4, r3
 8001026:	4615      	mov	r5, r2
 8001028:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800102c:	eb12 0804 	adds.w	r8, r2, r4
 8001030:	eb43 0905 	adc.w	r9, r3, r5
 8001034:	e9c7 8904 	strd	r8, r9, [r7, #16]
    hx711_delay(5);
 8001038:	2005      	movs	r0, #5
 800103a:	f000 fcdf 	bl	80019fc <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	3301      	adds	r3, #1
 8001042:	81fb      	strh	r3, [r7, #14]
 8001044:	89fa      	ldrh	r2, [r7, #14]
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	429a      	cmp	r2, r3
 800104a:	d3e6      	bcc.n	800101a <hx711_tare+0x26>
  }
  hx711->offset = (int32_t)(ave / sample);
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	2200      	movs	r2, #0
 8001050:	469a      	mov	sl, r3
 8001052:	4693      	mov	fp, r2
 8001054:	4652      	mov	r2, sl
 8001056:	465b      	mov	r3, fp
 8001058:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800105c:	f7ff fc90 	bl	8000980 <__aeabi_ldivmod>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff feea 	bl	8000e42 <hx711_unlock>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001078 <hx711_weight>:
  hx711->coef = (load_raw - noload_raw) / scale;
  hx711_unlock(hx711);
}
//#############################################################################################
float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8001078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800107c:	b088      	sub	sp, #32
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fec8 	bl	8000e1c <hx711_lock>
  int64_t  ave = 0;
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	82fb      	strh	r3, [r7, #22]
 800109c:	e014      	b.n	80010c8 <hx711_weight+0x50>
  {
    ave += hx711_value(hx711);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff38 	bl	8000f14 <hx711_value>
 80010a4:	4603      	mov	r3, r0
 80010a6:	17da      	asrs	r2, r3, #31
 80010a8:	461c      	mov	r4, r3
 80010aa:	4615      	mov	r5, r2
 80010ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010b0:	eb12 0804 	adds.w	r8, r2, r4
 80010b4:	eb43 0905 	adc.w	r9, r3, r5
 80010b8:	e9c7 8906 	strd	r8, r9, [r7, #24]
    hx711_delay(5);
 80010bc:	2005      	movs	r0, #5
 80010be:	f000 fc9d 	bl	80019fc <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 80010c2:	8afb      	ldrh	r3, [r7, #22]
 80010c4:	3301      	adds	r3, #1
 80010c6:	82fb      	strh	r3, [r7, #22]
 80010c8:	8afa      	ldrh	r2, [r7, #22]
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d3e6      	bcc.n	800109e <hx711_weight+0x26>
  }
  int32_t data = (int32_t)(ave / sample);
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	2200      	movs	r2, #0
 80010d4:	469a      	mov	sl, r3
 80010d6:	4693      	mov	fp, r2
 80010d8:	4652      	mov	r2, sl
 80010da:	465b      	mov	r3, fp
 80010dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010e0:	f7ff fc4e 	bl	8000980 <__aeabi_ldivmod>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4613      	mov	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa9f 	bl	8000638 <__aeabi_i2f>
 80010fa:	4602      	mov	r2, r0
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	4619      	mov	r1, r3
 8001102:	4610      	mov	r0, r2
 8001104:	f7ff fba0 	bl	8000848 <__aeabi_fdiv>
 8001108:	4603      	mov	r3, r0
 800110a:	60fb      	str	r3, [r7, #12]
  hx711_unlock(hx711);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fe98 	bl	8000e42 <hx711_unlock>
  return answer;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800111e <hx711_coef_set>:
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
  hx711->coef = coef;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	611a      	str	r2, [r3, #16]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af02      	add	r7, sp, #8
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f023 030f 	bic.w	r3, r3, #15
 8001148:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	f043 030c 	orr.w	r3, r3, #12
 8001156:	b2db      	uxtb	r3, r3
 8001158:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	b2db      	uxtb	r3, r3
 8001162:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	f043 030c 	orr.w	r3, r3, #12
 800116a:	b2db      	uxtb	r3, r3
 800116c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	b2db      	uxtb	r3, r3
 8001176:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001178:	f107 0208 	add.w	r2, r7, #8
 800117c:	2364      	movs	r3, #100	; 0x64
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2304      	movs	r3, #4
 8001182:	214e      	movs	r1, #78	; 0x4e
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <lcd_send_cmd+0x5c>)
 8001186:	f001 f849 	bl	800221c <HAL_I2C_Master_Transmit>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000008c 	.word	0x2000008c

08001198 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af02      	add	r7, sp, #8
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f023 030f 	bic.w	r3, r3, #15
 80011a8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	f043 030d 	orr.w	r3, r3, #13
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	f043 0309 	orr.w	r3, r3, #9
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80011c4:	7bbb      	ldrb	r3, [r7, #14]
 80011c6:	f043 030d 	orr.w	r3, r3, #13
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	f043 0309 	orr.w	r3, r3, #9
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011d8:	f107 0208 	add.w	r2, r7, #8
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2304      	movs	r3, #4
 80011e2:	214e      	movs	r1, #78	; 0x4e
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <lcd_send_data+0x5c>)
 80011e6:	f001 f819 	bl	800221c <HAL_I2C_Master_Transmit>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000008c 	.word	0x2000008c

080011f8 <lcd_clear>:

void lcd_clear (void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80011fe:	2080      	movs	r0, #128	; 0x80
 8001200:	f7ff ff9a 	bl	8001138 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	e005      	b.n	8001216 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800120a:	2020      	movs	r0, #32
 800120c:	f7ff ffc4 	bl	8001198 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3301      	adds	r3, #1
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b45      	cmp	r3, #69	; 0x45
 800121a:	ddf6      	ble.n	800120a <lcd_clear+0x12>
	}
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
    switch (row)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <lcd_put_cur+0x18>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d005      	beq.n	8001248 <lcd_put_cur+0x22>
 800123c:	e009      	b.n	8001252 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001244:	603b      	str	r3, [r7, #0]
            break;
 8001246:	e004      	b.n	8001252 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800124e:	603b      	str	r3, [r7, #0]
            break;
 8001250:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff6e 	bl	8001138 <lcd_send_cmd>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <lcd_init>:


void lcd_init (void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001268:	2032      	movs	r0, #50	; 0x32
 800126a:	f000 fbc7 	bl	80019fc <HAL_Delay>
	lcd_send_cmd (0x30);
 800126e:	2030      	movs	r0, #48	; 0x30
 8001270:	f7ff ff62 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001274:	2005      	movs	r0, #5
 8001276:	f000 fbc1 	bl	80019fc <HAL_Delay>
	lcd_send_cmd (0x30);
 800127a:	2030      	movs	r0, #48	; 0x30
 800127c:	f7ff ff5c 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001280:	2001      	movs	r0, #1
 8001282:	f000 fbbb 	bl	80019fc <HAL_Delay>
	lcd_send_cmd (0x30);
 8001286:	2030      	movs	r0, #48	; 0x30
 8001288:	f7ff ff56 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(10);
 800128c:	200a      	movs	r0, #10
 800128e:	f000 fbb5 	bl	80019fc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001292:	2020      	movs	r0, #32
 8001294:	f7ff ff50 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(10);
 8001298:	200a      	movs	r0, #10
 800129a:	f000 fbaf 	bl	80019fc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800129e:	2028      	movs	r0, #40	; 0x28
 80012a0:	f7ff ff4a 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f000 fba9 	bl	80019fc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80012aa:	2008      	movs	r0, #8
 80012ac:	f7ff ff44 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(1);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f000 fba3 	bl	80019fc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80012b6:	2001      	movs	r0, #1
 80012b8:	f7ff ff3e 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f000 fb9d 	bl	80019fc <HAL_Delay>
	HAL_Delay(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f000 fb9a 	bl	80019fc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80012c8:	2006      	movs	r0, #6
 80012ca:	f7ff ff35 	bl	8001138 <lcd_send_cmd>
	HAL_Delay(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f000 fb94 	bl	80019fc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80012d4:	200c      	movs	r0, #12
 80012d6:	f7ff ff2f 	bl	8001138 <lcd_send_cmd>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}

080012de <lcd_send_string>:

void lcd_send_string (char *str)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012e6:	e006      	b.n	80012f6 <lcd_send_string+0x18>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff51 	bl	8001198 <lcd_send_data>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f4      	bne.n	80012e8 <lcd_send_string+0xa>
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_I2C1_Init+0x50>)
 800130e:	4a13      	ldr	r2, [pc, #76]	; (800135c <MX_I2C1_Init+0x54>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_I2C1_Init+0x50>)
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_I2C1_Init+0x58>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_I2C1_Init+0x50>)
 8001326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_I2C1_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_I2C1_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_I2C1_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_I2C1_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_I2C1_Init+0x50>)
 8001346:	f000 fe25 	bl	8001f94 <HAL_I2C_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001350:	f000 f8ef 	bl	8001532 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000008c 	.word	0x2000008c
 800135c:	40005400 	.word	0x40005400
 8001360:	000186a0 	.word	0x000186a0

08001364 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <HAL_I2C_MspInit+0x74>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d125      	bne.n	80013d0 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_I2C_MspInit+0x78>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <HAL_I2C_MspInit+0x78>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_I2C_MspInit+0x78>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800139c:	23c0      	movs	r3, #192	; 0xc0
 800139e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a0:	2312      	movs	r3, #18
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4619      	mov	r1, r3
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <HAL_I2C_MspInit+0x7c>)
 80013b4:	f000 fc2a 	bl	8001c0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_I2C_MspInit+0x78>)
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_I2C_MspInit+0x78>)
 80013be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013c2:	61d3      	str	r3, [r2, #28]
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_I2C_MspInit+0x78>)
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40005400 	.word	0x40005400
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010c00 	.word	0x40010c00

080013e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ea:	f000 faa5 	bl	8001938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ee:	f000 f85b 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f2:	f7ff fc81 	bl	8000cf8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013f6:	f7ff ff87 	bl	8001308 <MX_I2C1_Init>
  MX_SPI1_Init();
 80013fa:	f000 f89f 	bl	800153c <MX_SPI1_Init>
  MX_TIM3_Init();
 80013fe:	f000 f9b3 	bl	8001768 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize Loadcell with Module HX711 */
  hx711_init(&loadcell, HX711_CLK_GPIO_Port, HX711_CLK_Pin, HX711_DATA_GPIO_Port, HX711_DATA_Pin);
 8001402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <main+0xa4>)
 800140a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140e:	491e      	ldr	r1, [pc, #120]	; (8001488 <main+0xa4>)
 8001410:	481e      	ldr	r0, [pc, #120]	; (800148c <main+0xa8>)
 8001412:	f7ff fd22 	bl	8000e5a <hx711_init>

  /* Reading after calibration */
  hx711_coef_set(&loadcell, 354.5);
 8001416:	491e      	ldr	r1, [pc, #120]	; (8001490 <main+0xac>)
 8001418:	481c      	ldr	r0, [pc, #112]	; (800148c <main+0xa8>)
 800141a:	f7ff fe80 	bl	800111e <hx711_coef_set>
  hx711_tare(&loadcell, 10);
 800141e:	210a      	movs	r1, #10
 8001420:	481a      	ldr	r0, [pc, #104]	; (800148c <main+0xa8>)
 8001422:	f7ff fde7 	bl	8000ff4 <hx711_tare>

  /* Init LCD1602 */
  lcd_init();
 8001426:	f7ff ff1d 	bl	8001264 <lcd_init>
  lcd_clear();
 800142a:	f7ff fee5 	bl	80011f8 <lcd_clear>
  lcd_put_cur(0, 0);
 800142e:	2100      	movs	r1, #0
 8001430:	2000      	movs	r0, #0
 8001432:	f7ff fef8 	bl	8001226 <lcd_put_cur>
  lcd_send_string("Khoi luong: ");
 8001436:	4817      	ldr	r0, [pc, #92]	; (8001494 <main+0xb0>)
 8001438:	f7ff ff51 	bl	80012de <lcd_send_string>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	4815      	ldr	r0, [pc, #84]	; (8001498 <main+0xb4>)
 8001442:	f000 fd8e 	bl	8001f62 <HAL_GPIO_TogglePin>

	  /* Read data, stored in weight variable */
	  weight = hx711_weight(&loadcell, 10);
 8001446:	210a      	movs	r1, #10
 8001448:	4810      	ldr	r0, [pc, #64]	; (800148c <main+0xa8>)
 800144a:	f7ff fe15 	bl	8001078 <hx711_weight>
 800144e:	4603      	mov	r3, r0
 8001450:	4a12      	ldr	r2, [pc, #72]	; (800149c <main+0xb8>)
 8001452:	6013      	str	r3, [r2, #0]
	  snprintf(buffer, sizeof buffer, "%f", weight); // @suppress("Float formatting support")
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <main+0xb8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7fe ffdb 	bl	8000414 <__aeabi_f2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	e9cd 2300 	strd	r2, r3, [sp]
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <main+0xbc>)
 8001468:	210a      	movs	r1, #10
 800146a:	480e      	ldr	r0, [pc, #56]	; (80014a4 <main+0xc0>)
 800146c:	f002 fae6 	bl	8003a3c <sniprintf>

	  /* Display on LCD */
	  lcd_put_cur(1, 4);
 8001470:	2104      	movs	r1, #4
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff fed7 	bl	8001226 <lcd_put_cur>
	  lcd_send_string(buffer);
 8001478:	480a      	ldr	r0, [pc, #40]	; (80014a4 <main+0xc0>)
 800147a:	f7ff ff30 	bl	80012de <lcd_send_string>

	  HAL_Delay(5000);
 800147e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001482:	f000 fabb 	bl	80019fc <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001486:	e7d9      	b.n	800143c <main+0x58>
 8001488:	40010c00 	.word	0x40010c00
 800148c:	200000e0 	.word	0x200000e0
 8001490:	43b14000 	.word	0x43b14000
 8001494:	08004370 	.word	0x08004370
 8001498:	40011000 	.word	0x40011000
 800149c:	200000f8 	.word	0x200000f8
 80014a0:	08004380 	.word	0x08004380
 80014a4:	200000fc 	.word	0x200000fc

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b090      	sub	sp, #64	; 0x40
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	2228      	movs	r2, #40	; 0x28
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 fab8 	bl	8003a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d8:	2301      	movs	r3, #1
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014dc:	2302      	movs	r3, #2
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 f999 	bl	8002828 <HAL_RCC_OscConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014fc:	f000 f819 	bl	8001532 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001500:	230f      	movs	r3, #15
 8001502:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001504:	2302      	movs	r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800150c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001510:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2102      	movs	r1, #2
 800151a:	4618      	mov	r0, r3
 800151c:	f001 fc06 	bl	8002d2c <HAL_RCC_ClockConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001526:	f000 f804 	bl	8001532 <Error_Handler>
  }
}
 800152a:	bf00      	nop
 800152c:	3740      	adds	r7, #64	; 0x40
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001536:	b672      	cpsid	i
}
 8001538:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153a:	e7fe      	b.n	800153a <Error_Handler+0x8>

0800153c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <MX_SPI1_Init+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001548:	f44f 7282 	mov.w	r2, #260	; 0x104
 800154c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_SPI1_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_SPI1_Init+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001588:	220a      	movs	r2, #10
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_SPI1_Init+0x64>)
 800158e:	f001 fd51 	bl	8003034 <HAL_SPI_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001598:	f7ff ffcb 	bl	8001532 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000108 	.word	0x20000108
 80015a4:	40013000 	.word	0x40013000

080015a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <HAL_SPI_MspInit+0x88>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d12f      	bne.n	8001628 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_SPI_MspInit+0x8c>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a19      	ldr	r2, [pc, #100]	; (8001634 <HAL_SPI_MspInit+0x8c>)
 80015ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_SPI_MspInit+0x8c>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_SPI_MspInit+0x8c>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a13      	ldr	r2, [pc, #76]	; (8001634 <HAL_SPI_MspInit+0x8c>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_SPI_MspInit+0x8c>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015f8:	23a0      	movs	r3, #160	; 0xa0
 80015fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	4619      	mov	r1, r3
 800160a:	480b      	ldr	r0, [pc, #44]	; (8001638 <HAL_SPI_MspInit+0x90>)
 800160c:	f000 fafe 	bl	8001c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001610:	2340      	movs	r3, #64	; 0x40
 8001612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	4619      	mov	r1, r3
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <HAL_SPI_MspInit+0x90>)
 8001624:	f000 faf2 	bl	8001c0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001628:	bf00      	nop
 800162a:	3720      	adds	r7, #32
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40013000 	.word	0x40013000
 8001634:	40021000 	.word	0x40021000
 8001638:	40010800 	.word	0x40010800

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_MspInit+0x5c>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	4a14      	ldr	r2, [pc, #80]	; (8001698 <HAL_MspInit+0x5c>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6193      	str	r3, [r2, #24]
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_MspInit+0x5c>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_MspInit+0x5c>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_MspInit+0x5c>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_MspInit+0x5c>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_MspInit+0x60>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_MspInit+0x60>)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <NMI_Handler+0x4>

080016a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <MemManage_Handler+0x4>

080016b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <UsageFault_Handler+0x4>

080016be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e6:	f000 f96d 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f002 f95a 	bl	80039d8 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20002800 	.word	0x20002800
 8001750:	00000400 	.word	0x00000400
 8001754:	20000160 	.word	0x20000160
 8001758:	200001c0 	.word	0x200001c0

0800175c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176e:	f107 0318 	add.w	r3, r7, #24
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001786:	463b      	mov	r3, r7
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <MX_TIM3_Init+0xd8>)
 8001794:	4a2b      	ldr	r2, [pc, #172]	; (8001844 <MX_TIM3_Init+0xdc>)
 8001796:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001798:	4b29      	ldr	r3, [pc, #164]	; (8001840 <MX_TIM3_Init+0xd8>)
 800179a:	2247      	movs	r2, #71	; 0x47
 800179c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b28      	ldr	r3, [pc, #160]	; (8001840 <MX_TIM3_Init+0xd8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80017a4:	4b26      	ldr	r3, [pc, #152]	; (8001840 <MX_TIM3_Init+0xd8>)
 80017a6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80017aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ac:	4b24      	ldr	r3, [pc, #144]	; (8001840 <MX_TIM3_Init+0xd8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b2:	4b23      	ldr	r3, [pc, #140]	; (8001840 <MX_TIM3_Init+0xd8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017b8:	4821      	ldr	r0, [pc, #132]	; (8001840 <MX_TIM3_Init+0xd8>)
 80017ba:	f001 fcbf 	bl	800313c <HAL_TIM_Base_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80017c4:	f7ff feb5 	bl	8001532 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017cc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ce:	f107 0318 	add.w	r3, r7, #24
 80017d2:	4619      	mov	r1, r3
 80017d4:	481a      	ldr	r0, [pc, #104]	; (8001840 <MX_TIM3_Init+0xd8>)
 80017d6:	f001 fdec 	bl	80033b2 <HAL_TIM_ConfigClockSource>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017e0:	f7ff fea7 	bl	8001532 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80017e4:	4816      	ldr	r0, [pc, #88]	; (8001840 <MX_TIM3_Init+0xd8>)
 80017e6:	f001 fcf8 	bl	80031da <HAL_TIM_IC_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80017f0:	f7ff fe9f 	bl	8001532 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	480f      	ldr	r0, [pc, #60]	; (8001840 <MX_TIM3_Init+0xd8>)
 8001804:	f002 f890 	bl	8003928 <HAL_TIMEx_MasterConfigSynchronization>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800180e:	f7ff fe90 	bl	8001532 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001816:	2301      	movs	r3, #1
 8001818:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001822:	463b      	mov	r3, r7
 8001824:	2200      	movs	r2, #0
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_TIM3_Init+0xd8>)
 800182a:	f001 fd2e 	bl	800328a <HAL_TIM_IC_ConfigChannel>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001834:	f7ff fe7d 	bl	8001532 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000164 	.word	0x20000164
 8001844:	40000400 	.word	0x40000400

08001848 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM3)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <HAL_TIM_Base_MspInit+0x94>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d135      	bne.n	80018d4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_TIM_Base_MspInit+0x98>)
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	4a1c      	ldr	r2, [pc, #112]	; (80018e0 <HAL_TIM_Base_MspInit+0x98>)
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	61d3      	str	r3, [r2, #28]
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_TIM_Base_MspInit+0x98>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_TIM_Base_MspInit+0x98>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a16      	ldr	r2, [pc, #88]	; (80018e0 <HAL_TIM_Base_MspInit+0x98>)
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_TIM_Base_MspInit+0x98>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001898:	2310      	movs	r3, #16
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	480e      	ldr	r0, [pc, #56]	; (80018e4 <HAL_TIM_Base_MspInit+0x9c>)
 80018ac:	f000 f9ae 	bl	8001c0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
 80018ce:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80018d4:	bf00      	nop
 80018d6:	3728      	adds	r7, #40	; 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40000400 	.word	0x40000400
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010c00 	.word	0x40010c00
 80018e8:	40010000 	.word	0x40010000

080018ec <Reset_Handler>:
 80018ec:	480c      	ldr	r0, [pc, #48]	; (8001920 <LoopFillZerobss+0x12>)
 80018ee:	490d      	ldr	r1, [pc, #52]	; (8001924 <LoopFillZerobss+0x16>)
 80018f0:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <LoopFillZerobss+0x1a>)
 80018f2:	2300      	movs	r3, #0
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:
 80018f6:	58d4      	ldr	r4, [r2, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:
 80018fc:	18c4      	adds	r4, r0, r3
 80018fe:	428c      	cmp	r4, r1
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <LoopFillZerobss+0x1e>)
 8001904:	4c0a      	ldr	r4, [pc, #40]	; (8001930 <LoopFillZerobss+0x22>)
 8001906:	2300      	movs	r3, #0
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:
 800190e:	42a2      	cmp	r2, r4
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>
 8001912:	f7ff ff23 	bl	800175c <SystemInit>
 8001916:	f002 f865 	bl	80039e4 <__libc_init_array>
 800191a:	f7ff fd63 	bl	80013e4 <main>
 800191e:	4770      	bx	lr
 8001920:	20000000 	.word	0x20000000
 8001924:	20000070 	.word	0x20000070
 8001928:	080043f0 	.word	0x080043f0
 800192c:	20000070 	.word	0x20000070
 8001930:	200001c0 	.word	0x200001c0

08001934 <ADC1_2_IRQHandler>:
 8001934:	e7fe      	b.n	8001934 <ADC1_2_IRQHandler>
	...

08001938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_Init+0x28>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_Init+0x28>)
 8001942:	f043 0310 	orr.w	r3, r3, #16
 8001946:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001948:	2003      	movs	r0, #3
 800194a:	f000 f92b 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194e:	200f      	movs	r0, #15
 8001950:	f000 f808 	bl	8001964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001954:	f7ff fe72 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40022000 	.word	0x40022000

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_InitTick+0x54>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_InitTick+0x58>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	fbb3 f3f1 	udiv	r3, r3, r1
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f935 	bl	8001bf2 <HAL_SYSTICK_Config>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e00e      	b.n	80019b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d80a      	bhi.n	80019ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f000 f90b 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <HAL_InitTick+0x5c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000008 	.word	0x20000008
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_IncTick+0x1c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_IncTick+0x20>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <HAL_IncTick+0x20>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000008 	.word	0x20000008
 80019e4:	200001ac 	.word	0x200001ac

080019e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <HAL_GetTick+0x10>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	200001ac 	.word	0x200001ac

080019fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff fff0 	bl	80019e8 <HAL_GetTick>
 8001a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a14:	d005      	beq.n	8001a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_Delay+0x44>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a22:	bf00      	nop
 8001a24:	f7ff ffe0 	bl	80019e8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8f7      	bhi.n	8001a24 <HAL_Delay+0x28>
  {
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000008 	.word	0x20000008

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff90 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff49 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff5e 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff90 	bl	8001afc <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5f 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffb0 	bl	8001b60 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1e:	e161      	b.n	8001ee4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c20:	2201      	movs	r2, #1
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	f040 8150 	bne.w	8001ede <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4a97      	ldr	r2, [pc, #604]	; (8001ea0 <HAL_GPIO_Init+0x294>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d05e      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c48:	4a95      	ldr	r2, [pc, #596]	; (8001ea0 <HAL_GPIO_Init+0x294>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d875      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c4e:	4a95      	ldr	r2, [pc, #596]	; (8001ea4 <HAL_GPIO_Init+0x298>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d058      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c54:	4a93      	ldr	r2, [pc, #588]	; (8001ea4 <HAL_GPIO_Init+0x298>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d86f      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c5a:	4a93      	ldr	r2, [pc, #588]	; (8001ea8 <HAL_GPIO_Init+0x29c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d052      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c60:	4a91      	ldr	r2, [pc, #580]	; (8001ea8 <HAL_GPIO_Init+0x29c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d869      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c66:	4a91      	ldr	r2, [pc, #580]	; (8001eac <HAL_GPIO_Init+0x2a0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d04c      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c6c:	4a8f      	ldr	r2, [pc, #572]	; (8001eac <HAL_GPIO_Init+0x2a0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d863      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c72:	4a8f      	ldr	r2, [pc, #572]	; (8001eb0 <HAL_GPIO_Init+0x2a4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d046      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c78:	4a8d      	ldr	r2, [pc, #564]	; (8001eb0 <HAL_GPIO_Init+0x2a4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d85d      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c7e:	2b12      	cmp	r3, #18
 8001c80:	d82a      	bhi.n	8001cd8 <HAL_GPIO_Init+0xcc>
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d859      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c86:	a201      	add	r2, pc, #4	; (adr r2, 8001c8c <HAL_GPIO_Init+0x80>)
 8001c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8c:	08001d07 	.word	0x08001d07
 8001c90:	08001ce1 	.word	0x08001ce1
 8001c94:	08001cf3 	.word	0x08001cf3
 8001c98:	08001d35 	.word	0x08001d35
 8001c9c:	08001d3b 	.word	0x08001d3b
 8001ca0:	08001d3b 	.word	0x08001d3b
 8001ca4:	08001d3b 	.word	0x08001d3b
 8001ca8:	08001d3b 	.word	0x08001d3b
 8001cac:	08001d3b 	.word	0x08001d3b
 8001cb0:	08001d3b 	.word	0x08001d3b
 8001cb4:	08001d3b 	.word	0x08001d3b
 8001cb8:	08001d3b 	.word	0x08001d3b
 8001cbc:	08001d3b 	.word	0x08001d3b
 8001cc0:	08001d3b 	.word	0x08001d3b
 8001cc4:	08001d3b 	.word	0x08001d3b
 8001cc8:	08001d3b 	.word	0x08001d3b
 8001ccc:	08001d3b 	.word	0x08001d3b
 8001cd0:	08001ce9 	.word	0x08001ce9
 8001cd4:	08001cfd 	.word	0x08001cfd
 8001cd8:	4a76      	ldr	r2, [pc, #472]	; (8001eb4 <HAL_GPIO_Init+0x2a8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cde:	e02c      	b.n	8001d3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	623b      	str	r3, [r7, #32]
          break;
 8001ce6:	e029      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	3304      	adds	r3, #4
 8001cee:	623b      	str	r3, [r7, #32]
          break;
 8001cf0:	e024      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	623b      	str	r3, [r7, #32]
          break;
 8001cfa:	e01f      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	330c      	adds	r3, #12
 8001d02:	623b      	str	r3, [r7, #32]
          break;
 8001d04:	e01a      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	623b      	str	r3, [r7, #32]
          break;
 8001d12:	e013      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	611a      	str	r2, [r3, #16]
          break;
 8001d26:	e009      	b.n	8001d3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	615a      	str	r2, [r3, #20]
          break;
 8001d32:	e003      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e000      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          break;
 8001d3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2bff      	cmp	r3, #255	; 0xff
 8001d40:	d801      	bhi.n	8001d46 <HAL_GPIO_Init+0x13a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	e001      	b.n	8001d4a <HAL_GPIO_Init+0x13e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2bff      	cmp	r3, #255	; 0xff
 8001d50:	d802      	bhi.n	8001d58 <HAL_GPIO_Init+0x14c>
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	e002      	b.n	8001d5e <HAL_GPIO_Init+0x152>
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	3b08      	subs	r3, #8
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	210f      	movs	r1, #15
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	6a39      	ldr	r1, [r7, #32]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80a9 	beq.w	8001ede <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d8c:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <HAL_GPIO_Init+0x2ac>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a49      	ldr	r2, [pc, #292]	; (8001eb8 <HAL_GPIO_Init+0x2ac>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <HAL_GPIO_Init+0x2ac>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001da4:	4a45      	ldr	r2, [pc, #276]	; (8001ebc <HAL_GPIO_Init+0x2b0>)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a3d      	ldr	r2, [pc, #244]	; (8001ec0 <HAL_GPIO_Init+0x2b4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d00d      	beq.n	8001dec <HAL_GPIO_Init+0x1e0>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3c      	ldr	r2, [pc, #240]	; (8001ec4 <HAL_GPIO_Init+0x2b8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d007      	beq.n	8001de8 <HAL_GPIO_Init+0x1dc>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a3b      	ldr	r2, [pc, #236]	; (8001ec8 <HAL_GPIO_Init+0x2bc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d101      	bne.n	8001de4 <HAL_GPIO_Init+0x1d8>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e004      	b.n	8001dee <HAL_GPIO_Init+0x1e2>
 8001de4:	2303      	movs	r3, #3
 8001de6:	e002      	b.n	8001dee <HAL_GPIO_Init+0x1e2>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <HAL_GPIO_Init+0x1e2>
 8001dec:	2300      	movs	r3, #0
 8001dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df0:	f002 0203 	and.w	r2, r2, #3
 8001df4:	0092      	lsls	r2, r2, #2
 8001df6:	4093      	lsls	r3, r2
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dfe:	492f      	ldr	r1, [pc, #188]	; (8001ebc <HAL_GPIO_Init+0x2b0>)
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e18:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	492b      	ldr	r1, [pc, #172]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4927      	ldr	r1, [pc, #156]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4921      	ldr	r1, [pc, #132]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
 8001e4c:	e006      	b.n	8001e5c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	491d      	ldr	r1, [pc, #116]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4917      	ldr	r1, [pc, #92]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4913      	ldr	r1, [pc, #76]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01f      	beq.n	8001ed0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	490d      	ldr	r1, [pc, #52]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]
 8001e9c:	e01f      	b.n	8001ede <HAL_GPIO_Init+0x2d2>
 8001e9e:	bf00      	nop
 8001ea0:	10320000 	.word	0x10320000
 8001ea4:	10310000 	.word	0x10310000
 8001ea8:	10220000 	.word	0x10220000
 8001eac:	10210000 	.word	0x10210000
 8001eb0:	10120000 	.word	0x10120000
 8001eb4:	10110000 	.word	0x10110000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40010000 	.word	0x40010000
 8001ec0:	40010800 	.word	0x40010800
 8001ec4:	40010c00 	.word	0x40010c00
 8001ec8:	40011000 	.word	0x40011000
 8001ecc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_GPIO_Init+0x2f4>)
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	4909      	ldr	r1, [pc, #36]	; (8001f00 <HAL_GPIO_Init+0x2f4>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	fa22 f303 	lsr.w	r3, r2, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f47f ae96 	bne.w	8001c20 <HAL_GPIO_Init+0x14>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	372c      	adds	r7, #44	; 0x2c
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e001      	b.n	8001f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	807b      	strh	r3, [r7, #2]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f42:	787b      	ldrb	r3, [r7, #1]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f48:	887a      	ldrh	r2, [r7, #2]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f4e:	e003      	b.n	8001f58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	041a      	lsls	r2, r3, #16
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	611a      	str	r2, [r3, #16]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f74:	887a      	ldrh	r2, [r7, #2]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	041a      	lsls	r2, r3, #16
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	887b      	ldrh	r3, [r7, #2]
 8001f82:	400b      	ands	r3, r1
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e12b      	b.n	80021fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff f9d2 	bl	8001364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2224      	movs	r2, #36	; 0x24
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fe6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ff8:	f000 ffea 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8001ffc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4a81      	ldr	r2, [pc, #516]	; (8002208 <HAL_I2C_Init+0x274>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d807      	bhi.n	8002018 <HAL_I2C_Init+0x84>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4a80      	ldr	r2, [pc, #512]	; (800220c <HAL_I2C_Init+0x278>)
 800200c:	4293      	cmp	r3, r2
 800200e:	bf94      	ite	ls
 8002010:	2301      	movls	r3, #1
 8002012:	2300      	movhi	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e006      	b.n	8002026 <HAL_I2C_Init+0x92>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a7d      	ldr	r2, [pc, #500]	; (8002210 <HAL_I2C_Init+0x27c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	bf94      	ite	ls
 8002020:	2301      	movls	r3, #1
 8002022:	2300      	movhi	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0e7      	b.n	80021fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4a78      	ldr	r2, [pc, #480]	; (8002214 <HAL_I2C_Init+0x280>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0c9b      	lsrs	r3, r3, #18
 8002038:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	430a      	orrs	r2, r1
 800204c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4a6a      	ldr	r2, [pc, #424]	; (8002208 <HAL_I2C_Init+0x274>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d802      	bhi.n	8002068 <HAL_I2C_Init+0xd4>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3301      	adds	r3, #1
 8002066:	e009      	b.n	800207c <HAL_I2C_Init+0xe8>
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	4a69      	ldr	r2, [pc, #420]	; (8002218 <HAL_I2C_Init+0x284>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	099b      	lsrs	r3, r3, #6
 800207a:	3301      	adds	r3, #1
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	430b      	orrs	r3, r1
 8002082:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800208e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	495c      	ldr	r1, [pc, #368]	; (8002208 <HAL_I2C_Init+0x274>)
 8002098:	428b      	cmp	r3, r1
 800209a:	d819      	bhi.n	80020d0 <HAL_I2C_Init+0x13c>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e59      	subs	r1, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020aa:	1c59      	adds	r1, r3, #1
 80020ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020b0:	400b      	ands	r3, r1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_I2C_Init+0x138>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1e59      	subs	r1, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c4:	3301      	adds	r3, #1
 80020c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ca:	e051      	b.n	8002170 <HAL_I2C_Init+0x1dc>
 80020cc:	2304      	movs	r3, #4
 80020ce:	e04f      	b.n	8002170 <HAL_I2C_Init+0x1dc>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d111      	bne.n	80020fc <HAL_I2C_Init+0x168>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1e58      	subs	r0, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	440b      	add	r3, r1
 80020e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	e012      	b.n	8002122 <HAL_I2C_Init+0x18e>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1e58      	subs	r0, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	0099      	lsls	r1, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002112:	3301      	adds	r3, #1
 8002114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Init+0x196>
 8002126:	2301      	movs	r3, #1
 8002128:	e022      	b.n	8002170 <HAL_I2C_Init+0x1dc>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10e      	bne.n	8002150 <HAL_I2C_Init+0x1bc>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1e58      	subs	r0, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6859      	ldr	r1, [r3, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	440b      	add	r3, r1
 8002140:	fbb0 f3f3 	udiv	r3, r0, r3
 8002144:	3301      	adds	r3, #1
 8002146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800214e:	e00f      	b.n	8002170 <HAL_I2C_Init+0x1dc>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1e58      	subs	r0, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6859      	ldr	r1, [r3, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	0099      	lsls	r1, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	fbb0 f3f3 	udiv	r3, r0, r3
 8002166:	3301      	adds	r3, #1
 8002168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	6809      	ldr	r1, [r1, #0]
 8002174:	4313      	orrs	r3, r2
 8002176:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800219e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6911      	ldr	r1, [r2, #16]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68d2      	ldr	r2, [r2, #12]
 80021aa:	4311      	orrs	r1, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	430b      	orrs	r3, r1
 80021b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	000186a0 	.word	0x000186a0
 800220c:	001e847f 	.word	0x001e847f
 8002210:	003d08ff 	.word	0x003d08ff
 8002214:	431bde83 	.word	0x431bde83
 8002218:	10624dd3 	.word	0x10624dd3

0800221c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af02      	add	r7, sp, #8
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	461a      	mov	r2, r3
 8002228:	460b      	mov	r3, r1
 800222a:	817b      	strh	r3, [r7, #10]
 800222c:	4613      	mov	r3, r2
 800222e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff fbda 	bl	80019e8 <HAL_GetTick>
 8002234:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b20      	cmp	r3, #32
 8002240:	f040 80e0 	bne.w	8002404 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	2319      	movs	r3, #25
 800224a:	2201      	movs	r2, #1
 800224c:	4970      	ldr	r1, [pc, #448]	; (8002410 <HAL_I2C_Master_Transmit+0x1f4>)
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f964 	bl	800251c <I2C_WaitOnFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800225a:	2302      	movs	r3, #2
 800225c:	e0d3      	b.n	8002406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_I2C_Master_Transmit+0x50>
 8002268:	2302      	movs	r3, #2
 800226a:	e0cc      	b.n	8002406 <HAL_I2C_Master_Transmit+0x1ea>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b01      	cmp	r3, #1
 8002280:	d007      	beq.n	8002292 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0201 	orr.w	r2, r2, #1
 8002290:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2221      	movs	r2, #33	; 0x21
 80022a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2210      	movs	r2, #16
 80022ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	893a      	ldrh	r2, [r7, #8]
 80022c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a50      	ldr	r2, [pc, #320]	; (8002414 <HAL_I2C_Master_Transmit+0x1f8>)
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022d4:	8979      	ldrh	r1, [r7, #10]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	6a3a      	ldr	r2, [r7, #32]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f89c 	bl	8002418 <I2C_MasterRequestWrite>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e08d      	b.n	8002406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002300:	e066      	b.n	80023d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	6a39      	ldr	r1, [r7, #32]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f9de 	bl	80026c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00d      	beq.n	800232e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	2b04      	cmp	r3, #4
 8002318:	d107      	bne.n	800232a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002328:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e06b      	b.n	8002406 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	781a      	ldrb	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002348:	b29b      	uxth	r3, r3
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b04      	cmp	r3, #4
 800236a:	d11b      	bne.n	80023a4 <HAL_I2C_Master_Transmit+0x188>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	2b00      	cmp	r3, #0
 8002372:	d017      	beq.n	80023a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	781a      	ldrb	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	6a39      	ldr	r1, [r7, #32]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f9ce 	bl	800274a <I2C_WaitOnBTFFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00d      	beq.n	80023d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d107      	bne.n	80023cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e01a      	b.n	8002406 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d194      	bne.n	8002302 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e000      	b.n	8002406 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002404:	2302      	movs	r3, #2
  }
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	00100002 	.word	0x00100002
 8002414:	ffff0000 	.word	0xffff0000

08002418 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af02      	add	r7, sp, #8
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	460b      	mov	r3, r1
 8002426:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b08      	cmp	r3, #8
 8002432:	d006      	beq.n	8002442 <I2C_MasterRequestWrite+0x2a>
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d003      	beq.n	8002442 <I2C_MasterRequestWrite+0x2a>
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002440:	d108      	bne.n	8002454 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	e00b      	b.n	800246c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	2b12      	cmp	r3, #18
 800245a:	d107      	bne.n	800246c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f84f 	bl	800251c <I2C_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00d      	beq.n	80024a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002492:	d103      	bne.n	800249c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e035      	b.n	800250c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024a8:	d108      	bne.n	80024bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024aa:	897b      	ldrh	r3, [r7, #10]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024b8:	611a      	str	r2, [r3, #16]
 80024ba:	e01b      	b.n	80024f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024bc:	897b      	ldrh	r3, [r7, #10]
 80024be:	11db      	asrs	r3, r3, #7
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 0306 	and.w	r3, r3, #6
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f063 030f 	orn	r3, r3, #15
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <I2C_MasterRequestWrite+0xfc>)
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f875 	bl	80025ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e010      	b.n	800250c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ea:	897b      	ldrh	r3, [r7, #10]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4907      	ldr	r1, [pc, #28]	; (8002518 <I2C_MasterRequestWrite+0x100>)
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f865 	bl	80025ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	00010008 	.word	0x00010008
 8002518:	00010002 	.word	0x00010002

0800251c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800252c:	e025      	b.n	800257a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d021      	beq.n	800257a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002536:	f7ff fa57 	bl	80019e8 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d302      	bcc.n	800254c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d116      	bne.n	800257a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f043 0220 	orr.w	r2, r3, #32
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e023      	b.n	80025c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	0c1b      	lsrs	r3, r3, #16
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d10d      	bne.n	80025a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4013      	ands	r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	e00c      	b.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	43da      	mvns	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4013      	ands	r3, r2
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	bf0c      	ite	eq
 80025b2:	2301      	moveq	r3, #1
 80025b4:	2300      	movne	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d0b6      	beq.n	800252e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025d8:	e051      	b.n	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e8:	d123      	bne.n	8002632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002602:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f043 0204 	orr.w	r2, r3, #4
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e046      	b.n	80026c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d021      	beq.n	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263a:	f7ff f9d5 	bl	80019e8 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d302      	bcc.n	8002650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d116      	bne.n	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f043 0220 	orr.w	r2, r3, #32
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e020      	b.n	80026c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d10c      	bne.n	80026a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4013      	ands	r3, r2
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf14      	ite	ne
 800269a:	2301      	movne	r3, #1
 800269c:	2300      	moveq	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	e00b      	b.n	80026ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	43da      	mvns	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4013      	ands	r3, r2
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d18d      	bne.n	80025da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d4:	e02d      	b.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f878 	bl	80027cc <I2C_IsAcknowledgeFailed>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e02d      	b.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d021      	beq.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ee:	f7ff f97b 	bl	80019e8 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d302      	bcc.n	8002704 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d116      	bne.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f043 0220 	orr.w	r2, r3, #32
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e007      	b.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d1ca      	bne.n	80026d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002756:	e02d      	b.n	80027b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f837 	bl	80027cc <I2C_IsAcknowledgeFailed>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e02d      	b.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d021      	beq.n	80027b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002770:	f7ff f93a 	bl	80019e8 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	429a      	cmp	r2, r3
 800277e:	d302      	bcc.n	8002786 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d116      	bne.n	80027b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	f043 0220 	orr.w	r2, r3, #32
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e007      	b.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d1ca      	bne.n	8002758 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e2:	d11b      	bne.n	800281c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f043 0204 	orr.w	r2, r3, #4
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e272      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8087 	beq.w	8002956 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002848:	4b92      	ldr	r3, [pc, #584]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b04      	cmp	r3, #4
 8002852:	d00c      	beq.n	800286e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002854:	4b8f      	ldr	r3, [pc, #572]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d112      	bne.n	8002886 <HAL_RCC_OscConfig+0x5e>
 8002860:	4b8c      	ldr	r3, [pc, #560]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d10b      	bne.n	8002886 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286e:	4b89      	ldr	r3, [pc, #548]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d06c      	beq.n	8002954 <HAL_RCC_OscConfig+0x12c>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d168      	bne.n	8002954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e24c      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x76>
 8002890:	4b80      	ldr	r3, [pc, #512]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a7f      	ldr	r2, [pc, #508]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	e02e      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x98>
 80028a6:	4b7b      	ldr	r3, [pc, #492]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a7a      	ldr	r2, [pc, #488]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b78      	ldr	r3, [pc, #480]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a77      	ldr	r2, [pc, #476]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e01d      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0xbc>
 80028ca:	4b72      	ldr	r3, [pc, #456]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a71      	ldr	r2, [pc, #452]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b6f      	ldr	r3, [pc, #444]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a6e      	ldr	r2, [pc, #440]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 80028e4:	4b6b      	ldr	r3, [pc, #428]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a6a      	ldr	r2, [pc, #424]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b68      	ldr	r3, [pc, #416]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a67      	ldr	r2, [pc, #412]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7ff f870 	bl	80019e8 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7ff f86c 	bl	80019e8 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e200      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	4b5d      	ldr	r3, [pc, #372]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0xe4>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff f85c 	bl	80019e8 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7ff f858 	bl	80019e8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1ec      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x10c>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d063      	beq.n	8002a2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002962:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800296e:	4b49      	ldr	r3, [pc, #292]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b08      	cmp	r3, #8
 8002978:	d11c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x18c>
 800297a:	4b46      	ldr	r3, [pc, #280]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d116      	bne.n	80029b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x176>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e1c0      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4939      	ldr	r1, [pc, #228]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	e03a      	b.n	8002a2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029bc:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7ff f811 	bl	80019e8 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ca:	f7ff f80d 	bl	80019e8 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e1a1      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	4b2d      	ldr	r3, [pc, #180]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4927      	ldr	r1, [pc, #156]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]
 80029fc:	e015      	b.n	8002a2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fe:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe fff0 	bl	80019e8 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7fe ffec 	bl	80019e8 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e180      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d03a      	beq.n	8002aac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d019      	beq.n	8002a72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a44:	f7fe ffd0 	bl	80019e8 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a4c:	f7fe ffcc 	bl	80019e8 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e160      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f000 fac4 	bl	8002ff8 <RCC_Delay>
 8002a70:	e01c      	b.n	8002aac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a78:	f7fe ffb6 	bl	80019e8 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7e:	e00f      	b.n	8002aa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fe ffb2 	bl	80019e8 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d908      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e146      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	42420000 	.word	0x42420000
 8002a9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	4b92      	ldr	r3, [pc, #584]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e9      	bne.n	8002a80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80a6 	beq.w	8002c06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002abe:	4b8b      	ldr	r3, [pc, #556]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10d      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aca:	4b88      	ldr	r3, [pc, #544]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	4a87      	ldr	r2, [pc, #540]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	61d3      	str	r3, [r2, #28]
 8002ad6:	4b85      	ldr	r3, [pc, #532]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae6:	4b82      	ldr	r3, [pc, #520]	; (8002cf0 <HAL_RCC_OscConfig+0x4c8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d118      	bne.n	8002b24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af2:	4b7f      	ldr	r3, [pc, #508]	; (8002cf0 <HAL_RCC_OscConfig+0x4c8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a7e      	ldr	r2, [pc, #504]	; (8002cf0 <HAL_RCC_OscConfig+0x4c8>)
 8002af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afe:	f7fe ff73 	bl	80019e8 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b06:	f7fe ff6f 	bl	80019e8 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b64      	cmp	r3, #100	; 0x64
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e103      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	4b75      	ldr	r3, [pc, #468]	; (8002cf0 <HAL_RCC_OscConfig+0x4c8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x312>
 8002b2c:	4b6f      	ldr	r3, [pc, #444]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4a6e      	ldr	r2, [pc, #440]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6213      	str	r3, [r2, #32]
 8002b38:	e02d      	b.n	8002b96 <HAL_RCC_OscConfig+0x36e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x334>
 8002b42:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a69      	ldr	r2, [pc, #420]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	6213      	str	r3, [r2, #32]
 8002b4e:	4b67      	ldr	r3, [pc, #412]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a66      	ldr	r2, [pc, #408]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	f023 0304 	bic.w	r3, r3, #4
 8002b58:	6213      	str	r3, [r2, #32]
 8002b5a:	e01c      	b.n	8002b96 <HAL_RCC_OscConfig+0x36e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d10c      	bne.n	8002b7e <HAL_RCC_OscConfig+0x356>
 8002b64:	4b61      	ldr	r3, [pc, #388]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4a60      	ldr	r2, [pc, #384]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	f043 0304 	orr.w	r3, r3, #4
 8002b6e:	6213      	str	r3, [r2, #32]
 8002b70:	4b5e      	ldr	r3, [pc, #376]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	4a5d      	ldr	r2, [pc, #372]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6213      	str	r3, [r2, #32]
 8002b7c:	e00b      	b.n	8002b96 <HAL_RCC_OscConfig+0x36e>
 8002b7e:	4b5b      	ldr	r3, [pc, #364]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4a5a      	ldr	r2, [pc, #360]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	6213      	str	r3, [r2, #32]
 8002b8a:	4b58      	ldr	r3, [pc, #352]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4a57      	ldr	r2, [pc, #348]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d015      	beq.n	8002bca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9e:	f7fe ff23 	bl	80019e8 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fe ff1f 	bl	80019e8 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e0b1      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbc:	4b4b      	ldr	r3, [pc, #300]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ee      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x37e>
 8002bc8:	e014      	b.n	8002bf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7fe ff0d 	bl	80019e8 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fe ff09 	bl	80019e8 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e09b      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be8:	4b40      	ldr	r3, [pc, #256]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ee      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4b3c      	ldr	r3, [pc, #240]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	4a3b      	ldr	r2, [pc, #236]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8087 	beq.w	8002d1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c10:	4b36      	ldr	r3, [pc, #216]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d061      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d146      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c24:	4b33      	ldr	r3, [pc, #204]	; (8002cf4 <HAL_RCC_OscConfig+0x4cc>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fedd 	bl	80019e8 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c32:	f7fe fed9 	bl	80019e8 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e06d      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c44:	4b29      	ldr	r3, [pc, #164]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d108      	bne.n	8002c6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	4921      	ldr	r1, [pc, #132]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a19      	ldr	r1, [r3, #32]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	491b      	ldr	r1, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_RCC_OscConfig+0x4cc>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7fe fead 	bl	80019e8 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c92:	f7fe fea9 	bl	80019e8 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e03d      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x46a>
 8002cb0:	e035      	b.n	8002d1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <HAL_RCC_OscConfig+0x4cc>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fe96 	bl	80019e8 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe fe92 	bl	80019e8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e026      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x498>
 8002cde:	e01e      	b.n	8002d1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e019      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_RCC_OscConfig+0x500>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000

08002d2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0d0      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b6a      	ldr	r3, [pc, #424]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d910      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b67      	ldr	r3, [pc, #412]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 0207 	bic.w	r2, r3, #7
 8002d56:	4965      	ldr	r1, [pc, #404]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b63      	ldr	r3, [pc, #396]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0b8      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d020      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d88:	4b59      	ldr	r3, [pc, #356]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4a58      	ldr	r2, [pc, #352]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da0:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002daa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dac:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	494d      	ldr	r1, [pc, #308]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d040      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d115      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e07f      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b41      	ldr	r3, [pc, #260]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e073      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e06b      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4936      	ldr	r1, [pc, #216]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e1c:	f7fe fde4 	bl	80019e8 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fe fde0 	bl	80019e8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e053      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d210      	bcs.n	8002e7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 0207 	bic.w	r2, r3, #7
 8002e62:	4922      	ldr	r1, [pc, #136]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e032      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4916      	ldr	r1, [pc, #88]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ea6:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	490e      	ldr	r1, [pc, #56]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eba:	f000 f821 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	490a      	ldr	r1, [pc, #40]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ecc:	5ccb      	ldrb	r3, [r1, r3]
 8002ece:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed2:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_RCC_ClockConfig+0x1d0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe fd42 	bl	8001964 <HAL_InitTick>

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40022000 	.word	0x40022000
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	08004394 	.word	0x08004394
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	20000004 	.word	0x20000004

08002f00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	b490      	push	{r4, r7}
 8002f02:	b08a      	sub	sp, #40	; 0x28
 8002f04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f06:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_RCC_GetSysClockFreq+0xac>)
 8002f08:	1d3c      	adds	r4, r7, #4
 8002f0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f10:	f240 2301 	movw	r3, #513	; 0x201
 8002f14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f2a:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d002      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x40>
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d003      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0x46>
 8002f3e:	e02b      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f42:	623b      	str	r3, [r7, #32]
      break;
 8002f44:	e02b      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	0c9b      	lsrs	r3, r3, #18
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	3328      	adds	r3, #40	; 0x28
 8002f50:	443b      	add	r3, r7
 8002f52:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f56:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d012      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	0c5b      	lsrs	r3, r3, #17
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	3328      	adds	r3, #40	; 0x28
 8002f6e:	443b      	add	r3, r7
 8002f70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	4a0e      	ldr	r2, [pc, #56]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f7a:	fb03 f202 	mul.w	r2, r3, r2
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
 8002f86:	e004      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8c:	fb02 f303 	mul.w	r3, r2, r3
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	623b      	str	r3, [r7, #32]
      break;
 8002f96:	e002      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f9a:	623b      	str	r3, [r7, #32]
      break;
 8002f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3728      	adds	r7, #40	; 0x28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc90      	pop	{r4, r7}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	08004384 	.word	0x08004384
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	007a1200 	.word	0x007a1200
 8002fb8:	003d0900 	.word	0x003d0900

08002fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc0:	4b02      	ldr	r3, [pc, #8]	; (8002fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	20000000 	.word	0x20000000

08002fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fd4:	f7ff fff2 	bl	8002fbc <HAL_RCC_GetHCLKFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	4903      	ldr	r1, [pc, #12]	; (8002ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	080043a4 	.word	0x080043a4

08002ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <RCC_Delay+0x34>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <RCC_Delay+0x38>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0a5b      	lsrs	r3, r3, #9
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003014:	bf00      	nop
  }
  while (Delay --);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1e5a      	subs	r2, r3, #1
 800301a:	60fa      	str	r2, [r7, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f9      	bne.n	8003014 <RCC_Delay+0x1c>
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	20000000 	.word	0x20000000
 8003030:	10624dd3 	.word	0x10624dd3

08003034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e076      	b.n	8003134 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d108      	bne.n	8003060 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003056:	d009      	beq.n	800306c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	61da      	str	r2, [r3, #28]
 800305e:	e005      	b.n	800306c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fe fa8e 	bl	80015a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f0:	ea42 0103 	orr.w	r1, r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	0c1a      	lsrs	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f002 0204 	and.w	r2, r2, #4
 8003112:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003122:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e041      	b.n	80031d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe fb70 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f000 f9de 	bl	800353c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e041      	b.n	8003270 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d106      	bne.n	8003206 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f839 	bl	8003278 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2202      	movs	r2, #2
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3304      	adds	r3, #4
 8003216:	4619      	mov	r1, r3
 8003218:	4610      	mov	r0, r2
 800321a:	f000 f98f 	bl	800353c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_TIM_IC_ConfigChannel+0x1a>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e082      	b.n	80033aa <HAL_TIM_IC_ConfigChannel+0x120>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d11b      	bne.n	80032ea <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	6819      	ldr	r1, [r3, #0]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f000 f993 	bl	80035ec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 020c 	bic.w	r2, r2, #12
 80032d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6999      	ldr	r1, [r3, #24]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	619a      	str	r2, [r3, #24]
 80032e8:	e05a      	b.n	80033a0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d11c      	bne.n	800332a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	6819      	ldr	r1, [r3, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f000 f9f6 	bl	80036f0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003312:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6999      	ldr	r1, [r3, #24]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	021a      	lsls	r2, r3, #8
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	619a      	str	r2, [r3, #24]
 8003328:	e03a      	b.n	80033a0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d11b      	bne.n	8003368 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	6819      	ldr	r1, [r3, #0]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f000 fa41 	bl	80037c6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 020c 	bic.w	r2, r2, #12
 8003352:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69d9      	ldr	r1, [r3, #28]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	61da      	str	r2, [r3, #28]
 8003366:	e01b      	b.n	80033a0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f000 fa60 	bl	800383c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69da      	ldr	r2, [r3, #28]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800338a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69d9      	ldr	r1, [r3, #28]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	021a      	lsls	r2, r3, #8
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_ConfigClockSource+0x18>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0b3      	b.n	8003532 <HAL_TIM_ConfigClockSource+0x180>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033f0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003402:	d03e      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0xd0>
 8003404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003408:	f200 8087 	bhi.w	800351a <HAL_TIM_ConfigClockSource+0x168>
 800340c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003410:	f000 8085 	beq.w	800351e <HAL_TIM_ConfigClockSource+0x16c>
 8003414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003418:	d87f      	bhi.n	800351a <HAL_TIM_ConfigClockSource+0x168>
 800341a:	2b70      	cmp	r3, #112	; 0x70
 800341c:	d01a      	beq.n	8003454 <HAL_TIM_ConfigClockSource+0xa2>
 800341e:	2b70      	cmp	r3, #112	; 0x70
 8003420:	d87b      	bhi.n	800351a <HAL_TIM_ConfigClockSource+0x168>
 8003422:	2b60      	cmp	r3, #96	; 0x60
 8003424:	d050      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0x116>
 8003426:	2b60      	cmp	r3, #96	; 0x60
 8003428:	d877      	bhi.n	800351a <HAL_TIM_ConfigClockSource+0x168>
 800342a:	2b50      	cmp	r3, #80	; 0x50
 800342c:	d03c      	beq.n	80034a8 <HAL_TIM_ConfigClockSource+0xf6>
 800342e:	2b50      	cmp	r3, #80	; 0x50
 8003430:	d873      	bhi.n	800351a <HAL_TIM_ConfigClockSource+0x168>
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d058      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0x136>
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d86f      	bhi.n	800351a <HAL_TIM_ConfigClockSource+0x168>
 800343a:	2b30      	cmp	r3, #48	; 0x30
 800343c:	d064      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x156>
 800343e:	2b30      	cmp	r3, #48	; 0x30
 8003440:	d86b      	bhi.n	800351a <HAL_TIM_ConfigClockSource+0x168>
 8003442:	2b20      	cmp	r3, #32
 8003444:	d060      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x156>
 8003446:	2b20      	cmp	r3, #32
 8003448:	d867      	bhi.n	800351a <HAL_TIM_ConfigClockSource+0x168>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d05c      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x156>
 800344e:	2b10      	cmp	r3, #16
 8003450:	d05a      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003452:	e062      	b.n	800351a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6899      	ldr	r1, [r3, #8]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f000 fa40 	bl	80038e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003476:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	609a      	str	r2, [r3, #8]
      break;
 8003480:	e04e      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f000 fa29 	bl	80038e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a4:	609a      	str	r2, [r3, #8]
      break;
 80034a6:	e03b      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	461a      	mov	r2, r3
 80034b6:	f000 f8ed 	bl	8003694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2150      	movs	r1, #80	; 0x50
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f9f7 	bl	80038b4 <TIM_ITRx_SetConfig>
      break;
 80034c6:	e02b      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	461a      	mov	r2, r3
 80034d6:	f000 f947 	bl	8003768 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2160      	movs	r1, #96	; 0x60
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f9e7 	bl	80038b4 <TIM_ITRx_SetConfig>
      break;
 80034e6:	e01b      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f000 f8cd 	bl	8003694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2140      	movs	r1, #64	; 0x40
 8003500:	4618      	mov	r0, r3
 8003502:	f000 f9d7 	bl	80038b4 <TIM_ITRx_SetConfig>
      break;
 8003506:	e00b      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f000 f9ce 	bl	80038b4 <TIM_ITRx_SetConfig>
        break;
 8003518:	e002      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800351e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a25      	ldr	r2, [pc, #148]	; (80035e4 <TIM_Base_SetConfig+0xa8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <TIM_Base_SetConfig+0x28>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355a:	d003      	beq.n	8003564 <TIM_Base_SetConfig+0x28>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <TIM_Base_SetConfig+0xac>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d108      	bne.n	8003576 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1a      	ldr	r2, [pc, #104]	; (80035e4 <TIM_Base_SetConfig+0xa8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <TIM_Base_SetConfig+0x52>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003584:	d003      	beq.n	800358e <TIM_Base_SetConfig+0x52>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <TIM_Base_SetConfig+0xac>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d108      	bne.n	80035a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <TIM_Base_SetConfig+0xa8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d103      	bne.n	80035d4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	615a      	str	r2, [r3, #20]
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40000400 	.word	0x40000400

080035ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f023 0201 	bic.w	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a1d      	ldr	r2, [pc, #116]	; (800368c <TIM_TI1_SetConfig+0xa0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <TIM_TI1_SetConfig+0x3e>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003620:	d003      	beq.n	800362a <TIM_TI1_SetConfig+0x3e>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <TIM_TI1_SetConfig+0xa4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <TIM_TI1_SetConfig+0x42>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <TIM_TI1_SetConfig+0x44>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	e003      	b.n	800364e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	b2db      	uxtb	r3, r3
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f023 030a 	bic.w	r3, r3, #10
 8003668:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f003 030a 	and.w	r3, r3, #10
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	40012c00 	.word	0x40012c00
 8003690:	40000400 	.word	0x40000400

08003694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f023 0201 	bic.w	r2, r3, #1
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f023 030a 	bic.w	r3, r3, #10
 80036d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f023 0210 	bic.w	r2, r3, #16
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800372e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	031b      	lsls	r3, r3, #12
 8003734:	b29b      	uxth	r3, r3
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003742:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f023 0210 	bic.w	r2, r3, #16
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003792:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	031b      	lsls	r3, r3, #12
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	621a      	str	r2, [r3, #32]
}
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b087      	sub	sp, #28
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f023 0303 	bic.w	r3, r3, #3
 80037f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003802:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	b2db      	uxtb	r3, r3
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003816:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	621a      	str	r2, [r3, #32]
}
 8003832:	bf00      	nop
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003868:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800387a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	031b      	lsls	r3, r3, #12
 8003880:	b29b      	uxth	r3, r3
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800388e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	031b      	lsls	r3, r3, #12
 8003894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f043 0307 	orr.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	609a      	str	r2, [r3, #8]
}
 80038de:	bf00      	nop
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	021a      	lsls	r2, r3, #8
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	431a      	orrs	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4313      	orrs	r3, r2
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
	...

08003928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800393c:	2302      	movs	r3, #2
 800393e:	e041      	b.n	80039c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398c:	d004      	beq.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a10      	ldr	r2, [pc, #64]	; (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d10c      	bne.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40000400 	.word	0x40000400

080039d8 <__errno>:
 80039d8:	4b01      	ldr	r3, [pc, #4]	; (80039e0 <__errno+0x8>)
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	2000000c 	.word	0x2000000c

080039e4 <__libc_init_array>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	2600      	movs	r6, #0
 80039e8:	4d0c      	ldr	r5, [pc, #48]	; (8003a1c <__libc_init_array+0x38>)
 80039ea:	4c0d      	ldr	r4, [pc, #52]	; (8003a20 <__libc_init_array+0x3c>)
 80039ec:	1b64      	subs	r4, r4, r5
 80039ee:	10a4      	asrs	r4, r4, #2
 80039f0:	42a6      	cmp	r6, r4
 80039f2:	d109      	bne.n	8003a08 <__libc_init_array+0x24>
 80039f4:	f000 fcb0 	bl	8004358 <_init>
 80039f8:	2600      	movs	r6, #0
 80039fa:	4d0a      	ldr	r5, [pc, #40]	; (8003a24 <__libc_init_array+0x40>)
 80039fc:	4c0a      	ldr	r4, [pc, #40]	; (8003a28 <__libc_init_array+0x44>)
 80039fe:	1b64      	subs	r4, r4, r5
 8003a00:	10a4      	asrs	r4, r4, #2
 8003a02:	42a6      	cmp	r6, r4
 8003a04:	d105      	bne.n	8003a12 <__libc_init_array+0x2e>
 8003a06:	bd70      	pop	{r4, r5, r6, pc}
 8003a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a0c:	4798      	blx	r3
 8003a0e:	3601      	adds	r6, #1
 8003a10:	e7ee      	b.n	80039f0 <__libc_init_array+0xc>
 8003a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a16:	4798      	blx	r3
 8003a18:	3601      	adds	r6, #1
 8003a1a:	e7f2      	b.n	8003a02 <__libc_init_array+0x1e>
 8003a1c:	080043e8 	.word	0x080043e8
 8003a20:	080043e8 	.word	0x080043e8
 8003a24:	080043e8 	.word	0x080043e8
 8003a28:	080043ec 	.word	0x080043ec

08003a2c <memset>:
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4402      	add	r2, r0
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d100      	bne.n	8003a36 <memset+0xa>
 8003a34:	4770      	bx	lr
 8003a36:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3a:	e7f9      	b.n	8003a30 <memset+0x4>

08003a3c <sniprintf>:
 8003a3c:	b40c      	push	{r2, r3}
 8003a3e:	b530      	push	{r4, r5, lr}
 8003a40:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <sniprintf+0x64>)
 8003a42:	1e0c      	subs	r4, r1, #0
 8003a44:	681d      	ldr	r5, [r3, #0]
 8003a46:	b09d      	sub	sp, #116	; 0x74
 8003a48:	da08      	bge.n	8003a5c <sniprintf+0x20>
 8003a4a:	238b      	movs	r3, #139	; 0x8b
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	602b      	str	r3, [r5, #0]
 8003a52:	b01d      	add	sp, #116	; 0x74
 8003a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a58:	b002      	add	sp, #8
 8003a5a:	4770      	bx	lr
 8003a5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003a60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a64:	bf0c      	ite	eq
 8003a66:	4623      	moveq	r3, r4
 8003a68:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a6c:	9304      	str	r3, [sp, #16]
 8003a6e:	9307      	str	r3, [sp, #28]
 8003a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a74:	9002      	str	r0, [sp, #8]
 8003a76:	9006      	str	r0, [sp, #24]
 8003a78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	ab21      	add	r3, sp, #132	; 0x84
 8003a80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a82:	a902      	add	r1, sp, #8
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	f000 f869 	bl	8003b5c <_svfiprintf_r>
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	bfbc      	itt	lt
 8003a8e:	238b      	movlt	r3, #139	; 0x8b
 8003a90:	602b      	strlt	r3, [r5, #0]
 8003a92:	2c00      	cmp	r4, #0
 8003a94:	d0dd      	beq.n	8003a52 <sniprintf+0x16>
 8003a96:	2200      	movs	r2, #0
 8003a98:	9b02      	ldr	r3, [sp, #8]
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e7d9      	b.n	8003a52 <sniprintf+0x16>
 8003a9e:	bf00      	nop
 8003aa0:	2000000c 	.word	0x2000000c

08003aa4 <__ssputs_r>:
 8003aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa8:	688e      	ldr	r6, [r1, #8]
 8003aaa:	4682      	mov	sl, r0
 8003aac:	429e      	cmp	r6, r3
 8003aae:	460c      	mov	r4, r1
 8003ab0:	4690      	mov	r8, r2
 8003ab2:	461f      	mov	r7, r3
 8003ab4:	d838      	bhi.n	8003b28 <__ssputs_r+0x84>
 8003ab6:	898a      	ldrh	r2, [r1, #12]
 8003ab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003abc:	d032      	beq.n	8003b24 <__ssputs_r+0x80>
 8003abe:	6825      	ldr	r5, [r4, #0]
 8003ac0:	6909      	ldr	r1, [r1, #16]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	eba5 0901 	sub.w	r9, r5, r1
 8003ac8:	6965      	ldr	r5, [r4, #20]
 8003aca:	444b      	add	r3, r9
 8003acc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ad0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ad4:	106d      	asrs	r5, r5, #1
 8003ad6:	429d      	cmp	r5, r3
 8003ad8:	bf38      	it	cc
 8003ada:	461d      	movcc	r5, r3
 8003adc:	0553      	lsls	r3, r2, #21
 8003ade:	d531      	bpl.n	8003b44 <__ssputs_r+0xa0>
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	f000 fb6f 	bl	80041c4 <_malloc_r>
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	b950      	cbnz	r0, 8003b00 <__ssputs_r+0x5c>
 8003aea:	230c      	movs	r3, #12
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	f8ca 3000 	str.w	r3, [sl]
 8003af4:	89a3      	ldrh	r3, [r4, #12]
 8003af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afa:	81a3      	strh	r3, [r4, #12]
 8003afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b00:	464a      	mov	r2, r9
 8003b02:	6921      	ldr	r1, [r4, #16]
 8003b04:	f000 face 	bl	80040a4 <memcpy>
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b12:	81a3      	strh	r3, [r4, #12]
 8003b14:	6126      	str	r6, [r4, #16]
 8003b16:	444e      	add	r6, r9
 8003b18:	6026      	str	r6, [r4, #0]
 8003b1a:	463e      	mov	r6, r7
 8003b1c:	6165      	str	r5, [r4, #20]
 8003b1e:	eba5 0509 	sub.w	r5, r5, r9
 8003b22:	60a5      	str	r5, [r4, #8]
 8003b24:	42be      	cmp	r6, r7
 8003b26:	d900      	bls.n	8003b2a <__ssputs_r+0x86>
 8003b28:	463e      	mov	r6, r7
 8003b2a:	4632      	mov	r2, r6
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	6820      	ldr	r0, [r4, #0]
 8003b30:	f000 fac6 	bl	80040c0 <memmove>
 8003b34:	68a3      	ldr	r3, [r4, #8]
 8003b36:	2000      	movs	r0, #0
 8003b38:	1b9b      	subs	r3, r3, r6
 8003b3a:	60a3      	str	r3, [r4, #8]
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	4433      	add	r3, r6
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	e7db      	b.n	8003afc <__ssputs_r+0x58>
 8003b44:	462a      	mov	r2, r5
 8003b46:	f000 fbb1 	bl	80042ac <_realloc_r>
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d1e1      	bne.n	8003b14 <__ssputs_r+0x70>
 8003b50:	4650      	mov	r0, sl
 8003b52:	6921      	ldr	r1, [r4, #16]
 8003b54:	f000 face 	bl	80040f4 <_free_r>
 8003b58:	e7c7      	b.n	8003aea <__ssputs_r+0x46>
	...

08003b5c <_svfiprintf_r>:
 8003b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b60:	4698      	mov	r8, r3
 8003b62:	898b      	ldrh	r3, [r1, #12]
 8003b64:	4607      	mov	r7, r0
 8003b66:	061b      	lsls	r3, r3, #24
 8003b68:	460d      	mov	r5, r1
 8003b6a:	4614      	mov	r4, r2
 8003b6c:	b09d      	sub	sp, #116	; 0x74
 8003b6e:	d50e      	bpl.n	8003b8e <_svfiprintf_r+0x32>
 8003b70:	690b      	ldr	r3, [r1, #16]
 8003b72:	b963      	cbnz	r3, 8003b8e <_svfiprintf_r+0x32>
 8003b74:	2140      	movs	r1, #64	; 0x40
 8003b76:	f000 fb25 	bl	80041c4 <_malloc_r>
 8003b7a:	6028      	str	r0, [r5, #0]
 8003b7c:	6128      	str	r0, [r5, #16]
 8003b7e:	b920      	cbnz	r0, 8003b8a <_svfiprintf_r+0x2e>
 8003b80:	230c      	movs	r3, #12
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295
 8003b88:	e0d1      	b.n	8003d2e <_svfiprintf_r+0x1d2>
 8003b8a:	2340      	movs	r3, #64	; 0x40
 8003b8c:	616b      	str	r3, [r5, #20]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9309      	str	r3, [sp, #36]	; 0x24
 8003b92:	2320      	movs	r3, #32
 8003b94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b98:	2330      	movs	r3, #48	; 0x30
 8003b9a:	f04f 0901 	mov.w	r9, #1
 8003b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ba2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d48 <_svfiprintf_r+0x1ec>
 8003ba6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003baa:	4623      	mov	r3, r4
 8003bac:	469a      	mov	sl, r3
 8003bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bb2:	b10a      	cbz	r2, 8003bb8 <_svfiprintf_r+0x5c>
 8003bb4:	2a25      	cmp	r2, #37	; 0x25
 8003bb6:	d1f9      	bne.n	8003bac <_svfiprintf_r+0x50>
 8003bb8:	ebba 0b04 	subs.w	fp, sl, r4
 8003bbc:	d00b      	beq.n	8003bd6 <_svfiprintf_r+0x7a>
 8003bbe:	465b      	mov	r3, fp
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	4638      	mov	r0, r7
 8003bc6:	f7ff ff6d 	bl	8003aa4 <__ssputs_r>
 8003bca:	3001      	adds	r0, #1
 8003bcc:	f000 80aa 	beq.w	8003d24 <_svfiprintf_r+0x1c8>
 8003bd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bd2:	445a      	add	r2, fp
 8003bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8003bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80a2 	beq.w	8003d24 <_svfiprintf_r+0x1c8>
 8003be0:	2300      	movs	r3, #0
 8003be2:	f04f 32ff 	mov.w	r2, #4294967295
 8003be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bea:	f10a 0a01 	add.w	sl, sl, #1
 8003bee:	9304      	str	r3, [sp, #16]
 8003bf0:	9307      	str	r3, [sp, #28]
 8003bf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bf6:	931a      	str	r3, [sp, #104]	; 0x68
 8003bf8:	4654      	mov	r4, sl
 8003bfa:	2205      	movs	r2, #5
 8003bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c00:	4851      	ldr	r0, [pc, #324]	; (8003d48 <_svfiprintf_r+0x1ec>)
 8003c02:	f000 fa41 	bl	8004088 <memchr>
 8003c06:	9a04      	ldr	r2, [sp, #16]
 8003c08:	b9d8      	cbnz	r0, 8003c42 <_svfiprintf_r+0xe6>
 8003c0a:	06d0      	lsls	r0, r2, #27
 8003c0c:	bf44      	itt	mi
 8003c0e:	2320      	movmi	r3, #32
 8003c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c14:	0711      	lsls	r1, r2, #28
 8003c16:	bf44      	itt	mi
 8003c18:	232b      	movmi	r3, #43	; 0x2b
 8003c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c22:	2b2a      	cmp	r3, #42	; 0x2a
 8003c24:	d015      	beq.n	8003c52 <_svfiprintf_r+0xf6>
 8003c26:	4654      	mov	r4, sl
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f04f 0c0a 	mov.w	ip, #10
 8003c2e:	9a07      	ldr	r2, [sp, #28]
 8003c30:	4621      	mov	r1, r4
 8003c32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c36:	3b30      	subs	r3, #48	; 0x30
 8003c38:	2b09      	cmp	r3, #9
 8003c3a:	d94e      	bls.n	8003cda <_svfiprintf_r+0x17e>
 8003c3c:	b1b0      	cbz	r0, 8003c6c <_svfiprintf_r+0x110>
 8003c3e:	9207      	str	r2, [sp, #28]
 8003c40:	e014      	b.n	8003c6c <_svfiprintf_r+0x110>
 8003c42:	eba0 0308 	sub.w	r3, r0, r8
 8003c46:	fa09 f303 	lsl.w	r3, r9, r3
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	46a2      	mov	sl, r4
 8003c4e:	9304      	str	r3, [sp, #16]
 8003c50:	e7d2      	b.n	8003bf8 <_svfiprintf_r+0x9c>
 8003c52:	9b03      	ldr	r3, [sp, #12]
 8003c54:	1d19      	adds	r1, r3, #4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	9103      	str	r1, [sp, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bfbb      	ittet	lt
 8003c5e:	425b      	neglt	r3, r3
 8003c60:	f042 0202 	orrlt.w	r2, r2, #2
 8003c64:	9307      	strge	r3, [sp, #28]
 8003c66:	9307      	strlt	r3, [sp, #28]
 8003c68:	bfb8      	it	lt
 8003c6a:	9204      	strlt	r2, [sp, #16]
 8003c6c:	7823      	ldrb	r3, [r4, #0]
 8003c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c70:	d10c      	bne.n	8003c8c <_svfiprintf_r+0x130>
 8003c72:	7863      	ldrb	r3, [r4, #1]
 8003c74:	2b2a      	cmp	r3, #42	; 0x2a
 8003c76:	d135      	bne.n	8003ce4 <_svfiprintf_r+0x188>
 8003c78:	9b03      	ldr	r3, [sp, #12]
 8003c7a:	3402      	adds	r4, #2
 8003c7c:	1d1a      	adds	r2, r3, #4
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	9203      	str	r2, [sp, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bfb8      	it	lt
 8003c86:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c8a:	9305      	str	r3, [sp, #20]
 8003c8c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003d4c <_svfiprintf_r+0x1f0>
 8003c90:	2203      	movs	r2, #3
 8003c92:	4650      	mov	r0, sl
 8003c94:	7821      	ldrb	r1, [r4, #0]
 8003c96:	f000 f9f7 	bl	8004088 <memchr>
 8003c9a:	b140      	cbz	r0, 8003cae <_svfiprintf_r+0x152>
 8003c9c:	2340      	movs	r3, #64	; 0x40
 8003c9e:	eba0 000a 	sub.w	r0, r0, sl
 8003ca2:	fa03 f000 	lsl.w	r0, r3, r0
 8003ca6:	9b04      	ldr	r3, [sp, #16]
 8003ca8:	3401      	adds	r4, #1
 8003caa:	4303      	orrs	r3, r0
 8003cac:	9304      	str	r3, [sp, #16]
 8003cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cb2:	2206      	movs	r2, #6
 8003cb4:	4826      	ldr	r0, [pc, #152]	; (8003d50 <_svfiprintf_r+0x1f4>)
 8003cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cba:	f000 f9e5 	bl	8004088 <memchr>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d038      	beq.n	8003d34 <_svfiprintf_r+0x1d8>
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <_svfiprintf_r+0x1f8>)
 8003cc4:	bb1b      	cbnz	r3, 8003d0e <_svfiprintf_r+0x1b2>
 8003cc6:	9b03      	ldr	r3, [sp, #12]
 8003cc8:	3307      	adds	r3, #7
 8003cca:	f023 0307 	bic.w	r3, r3, #7
 8003cce:	3308      	adds	r3, #8
 8003cd0:	9303      	str	r3, [sp, #12]
 8003cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cd4:	4433      	add	r3, r6
 8003cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8003cd8:	e767      	b.n	8003baa <_svfiprintf_r+0x4e>
 8003cda:	460c      	mov	r4, r1
 8003cdc:	2001      	movs	r0, #1
 8003cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ce2:	e7a5      	b.n	8003c30 <_svfiprintf_r+0xd4>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f04f 0c0a 	mov.w	ip, #10
 8003cea:	4619      	mov	r1, r3
 8003cec:	3401      	adds	r4, #1
 8003cee:	9305      	str	r3, [sp, #20]
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cf6:	3a30      	subs	r2, #48	; 0x30
 8003cf8:	2a09      	cmp	r2, #9
 8003cfa:	d903      	bls.n	8003d04 <_svfiprintf_r+0x1a8>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0c5      	beq.n	8003c8c <_svfiprintf_r+0x130>
 8003d00:	9105      	str	r1, [sp, #20]
 8003d02:	e7c3      	b.n	8003c8c <_svfiprintf_r+0x130>
 8003d04:	4604      	mov	r4, r0
 8003d06:	2301      	movs	r3, #1
 8003d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d0c:	e7f0      	b.n	8003cf0 <_svfiprintf_r+0x194>
 8003d0e:	ab03      	add	r3, sp, #12
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	462a      	mov	r2, r5
 8003d14:	4638      	mov	r0, r7
 8003d16:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <_svfiprintf_r+0x1fc>)
 8003d18:	a904      	add	r1, sp, #16
 8003d1a:	f3af 8000 	nop.w
 8003d1e:	1c42      	adds	r2, r0, #1
 8003d20:	4606      	mov	r6, r0
 8003d22:	d1d6      	bne.n	8003cd2 <_svfiprintf_r+0x176>
 8003d24:	89ab      	ldrh	r3, [r5, #12]
 8003d26:	065b      	lsls	r3, r3, #25
 8003d28:	f53f af2c 	bmi.w	8003b84 <_svfiprintf_r+0x28>
 8003d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d2e:	b01d      	add	sp, #116	; 0x74
 8003d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d34:	ab03      	add	r3, sp, #12
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	462a      	mov	r2, r5
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <_svfiprintf_r+0x1fc>)
 8003d3e:	a904      	add	r1, sp, #16
 8003d40:	f000 f87c 	bl	8003e3c <_printf_i>
 8003d44:	e7eb      	b.n	8003d1e <_svfiprintf_r+0x1c2>
 8003d46:	bf00      	nop
 8003d48:	080043ac 	.word	0x080043ac
 8003d4c:	080043b2 	.word	0x080043b2
 8003d50:	080043b6 	.word	0x080043b6
 8003d54:	00000000 	.word	0x00000000
 8003d58:	08003aa5 	.word	0x08003aa5

08003d5c <_printf_common>:
 8003d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d60:	4616      	mov	r6, r2
 8003d62:	4699      	mov	r9, r3
 8003d64:	688a      	ldr	r2, [r1, #8]
 8003d66:	690b      	ldr	r3, [r1, #16]
 8003d68:	4607      	mov	r7, r0
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	bfb8      	it	lt
 8003d6e:	4613      	movlt	r3, r2
 8003d70:	6033      	str	r3, [r6, #0]
 8003d72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d76:	460c      	mov	r4, r1
 8003d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d7c:	b10a      	cbz	r2, 8003d82 <_printf_common+0x26>
 8003d7e:	3301      	adds	r3, #1
 8003d80:	6033      	str	r3, [r6, #0]
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	0699      	lsls	r1, r3, #26
 8003d86:	bf42      	ittt	mi
 8003d88:	6833      	ldrmi	r3, [r6, #0]
 8003d8a:	3302      	addmi	r3, #2
 8003d8c:	6033      	strmi	r3, [r6, #0]
 8003d8e:	6825      	ldr	r5, [r4, #0]
 8003d90:	f015 0506 	ands.w	r5, r5, #6
 8003d94:	d106      	bne.n	8003da4 <_printf_common+0x48>
 8003d96:	f104 0a19 	add.w	sl, r4, #25
 8003d9a:	68e3      	ldr	r3, [r4, #12]
 8003d9c:	6832      	ldr	r2, [r6, #0]
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	42ab      	cmp	r3, r5
 8003da2:	dc28      	bgt.n	8003df6 <_printf_common+0x9a>
 8003da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003da8:	1e13      	subs	r3, r2, #0
 8003daa:	6822      	ldr	r2, [r4, #0]
 8003dac:	bf18      	it	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	0692      	lsls	r2, r2, #26
 8003db2:	d42d      	bmi.n	8003e10 <_printf_common+0xb4>
 8003db4:	4649      	mov	r1, r9
 8003db6:	4638      	mov	r0, r7
 8003db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dbc:	47c0      	blx	r8
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d020      	beq.n	8003e04 <_printf_common+0xa8>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	68e5      	ldr	r5, [r4, #12]
 8003dc6:	f003 0306 	and.w	r3, r3, #6
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	bf18      	it	ne
 8003dce:	2500      	movne	r5, #0
 8003dd0:	6832      	ldr	r2, [r6, #0]
 8003dd2:	f04f 0600 	mov.w	r6, #0
 8003dd6:	68a3      	ldr	r3, [r4, #8]
 8003dd8:	bf08      	it	eq
 8003dda:	1aad      	subeq	r5, r5, r2
 8003ddc:	6922      	ldr	r2, [r4, #16]
 8003dde:	bf08      	it	eq
 8003de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003de4:	4293      	cmp	r3, r2
 8003de6:	bfc4      	itt	gt
 8003de8:	1a9b      	subgt	r3, r3, r2
 8003dea:	18ed      	addgt	r5, r5, r3
 8003dec:	341a      	adds	r4, #26
 8003dee:	42b5      	cmp	r5, r6
 8003df0:	d11a      	bne.n	8003e28 <_printf_common+0xcc>
 8003df2:	2000      	movs	r0, #0
 8003df4:	e008      	b.n	8003e08 <_printf_common+0xac>
 8003df6:	2301      	movs	r3, #1
 8003df8:	4652      	mov	r2, sl
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	4638      	mov	r0, r7
 8003dfe:	47c0      	blx	r8
 8003e00:	3001      	adds	r0, #1
 8003e02:	d103      	bne.n	8003e0c <_printf_common+0xb0>
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295
 8003e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e0c:	3501      	adds	r5, #1
 8003e0e:	e7c4      	b.n	8003d9a <_printf_common+0x3e>
 8003e10:	2030      	movs	r0, #48	; 0x30
 8003e12:	18e1      	adds	r1, r4, r3
 8003e14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e1e:	4422      	add	r2, r4
 8003e20:	3302      	adds	r3, #2
 8003e22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e26:	e7c5      	b.n	8003db4 <_printf_common+0x58>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	4638      	mov	r0, r7
 8003e30:	47c0      	blx	r8
 8003e32:	3001      	adds	r0, #1
 8003e34:	d0e6      	beq.n	8003e04 <_printf_common+0xa8>
 8003e36:	3601      	adds	r6, #1
 8003e38:	e7d9      	b.n	8003dee <_printf_common+0x92>
	...

08003e3c <_printf_i>:
 8003e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e40:	7e0f      	ldrb	r7, [r1, #24]
 8003e42:	4691      	mov	r9, r2
 8003e44:	2f78      	cmp	r7, #120	; 0x78
 8003e46:	4680      	mov	r8, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	469a      	mov	sl, r3
 8003e4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e52:	d807      	bhi.n	8003e64 <_printf_i+0x28>
 8003e54:	2f62      	cmp	r7, #98	; 0x62
 8003e56:	d80a      	bhi.n	8003e6e <_printf_i+0x32>
 8003e58:	2f00      	cmp	r7, #0
 8003e5a:	f000 80d9 	beq.w	8004010 <_printf_i+0x1d4>
 8003e5e:	2f58      	cmp	r7, #88	; 0x58
 8003e60:	f000 80a4 	beq.w	8003fac <_printf_i+0x170>
 8003e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e6c:	e03a      	b.n	8003ee4 <_printf_i+0xa8>
 8003e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e72:	2b15      	cmp	r3, #21
 8003e74:	d8f6      	bhi.n	8003e64 <_printf_i+0x28>
 8003e76:	a101      	add	r1, pc, #4	; (adr r1, 8003e7c <_printf_i+0x40>)
 8003e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e7c:	08003ed5 	.word	0x08003ed5
 8003e80:	08003ee9 	.word	0x08003ee9
 8003e84:	08003e65 	.word	0x08003e65
 8003e88:	08003e65 	.word	0x08003e65
 8003e8c:	08003e65 	.word	0x08003e65
 8003e90:	08003e65 	.word	0x08003e65
 8003e94:	08003ee9 	.word	0x08003ee9
 8003e98:	08003e65 	.word	0x08003e65
 8003e9c:	08003e65 	.word	0x08003e65
 8003ea0:	08003e65 	.word	0x08003e65
 8003ea4:	08003e65 	.word	0x08003e65
 8003ea8:	08003ff7 	.word	0x08003ff7
 8003eac:	08003f19 	.word	0x08003f19
 8003eb0:	08003fd9 	.word	0x08003fd9
 8003eb4:	08003e65 	.word	0x08003e65
 8003eb8:	08003e65 	.word	0x08003e65
 8003ebc:	08004019 	.word	0x08004019
 8003ec0:	08003e65 	.word	0x08003e65
 8003ec4:	08003f19 	.word	0x08003f19
 8003ec8:	08003e65 	.word	0x08003e65
 8003ecc:	08003e65 	.word	0x08003e65
 8003ed0:	08003fe1 	.word	0x08003fe1
 8003ed4:	682b      	ldr	r3, [r5, #0]
 8003ed6:	1d1a      	adds	r2, r3, #4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	602a      	str	r2, [r5, #0]
 8003edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0a4      	b.n	8004032 <_printf_i+0x1f6>
 8003ee8:	6820      	ldr	r0, [r4, #0]
 8003eea:	6829      	ldr	r1, [r5, #0]
 8003eec:	0606      	lsls	r6, r0, #24
 8003eee:	f101 0304 	add.w	r3, r1, #4
 8003ef2:	d50a      	bpl.n	8003f0a <_printf_i+0xce>
 8003ef4:	680e      	ldr	r6, [r1, #0]
 8003ef6:	602b      	str	r3, [r5, #0]
 8003ef8:	2e00      	cmp	r6, #0
 8003efa:	da03      	bge.n	8003f04 <_printf_i+0xc8>
 8003efc:	232d      	movs	r3, #45	; 0x2d
 8003efe:	4276      	negs	r6, r6
 8003f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f04:	230a      	movs	r3, #10
 8003f06:	485e      	ldr	r0, [pc, #376]	; (8004080 <_printf_i+0x244>)
 8003f08:	e019      	b.n	8003f3e <_printf_i+0x102>
 8003f0a:	680e      	ldr	r6, [r1, #0]
 8003f0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f10:	602b      	str	r3, [r5, #0]
 8003f12:	bf18      	it	ne
 8003f14:	b236      	sxthne	r6, r6
 8003f16:	e7ef      	b.n	8003ef8 <_printf_i+0xbc>
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	6820      	ldr	r0, [r4, #0]
 8003f1c:	1d19      	adds	r1, r3, #4
 8003f1e:	6029      	str	r1, [r5, #0]
 8003f20:	0601      	lsls	r1, r0, #24
 8003f22:	d501      	bpl.n	8003f28 <_printf_i+0xec>
 8003f24:	681e      	ldr	r6, [r3, #0]
 8003f26:	e002      	b.n	8003f2e <_printf_i+0xf2>
 8003f28:	0646      	lsls	r6, r0, #25
 8003f2a:	d5fb      	bpl.n	8003f24 <_printf_i+0xe8>
 8003f2c:	881e      	ldrh	r6, [r3, #0]
 8003f2e:	2f6f      	cmp	r7, #111	; 0x6f
 8003f30:	bf0c      	ite	eq
 8003f32:	2308      	moveq	r3, #8
 8003f34:	230a      	movne	r3, #10
 8003f36:	4852      	ldr	r0, [pc, #328]	; (8004080 <_printf_i+0x244>)
 8003f38:	2100      	movs	r1, #0
 8003f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f3e:	6865      	ldr	r5, [r4, #4]
 8003f40:	2d00      	cmp	r5, #0
 8003f42:	bfa8      	it	ge
 8003f44:	6821      	ldrge	r1, [r4, #0]
 8003f46:	60a5      	str	r5, [r4, #8]
 8003f48:	bfa4      	itt	ge
 8003f4a:	f021 0104 	bicge.w	r1, r1, #4
 8003f4e:	6021      	strge	r1, [r4, #0]
 8003f50:	b90e      	cbnz	r6, 8003f56 <_printf_i+0x11a>
 8003f52:	2d00      	cmp	r5, #0
 8003f54:	d04d      	beq.n	8003ff2 <_printf_i+0x1b6>
 8003f56:	4615      	mov	r5, r2
 8003f58:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f5c:	fb03 6711 	mls	r7, r3, r1, r6
 8003f60:	5dc7      	ldrb	r7, [r0, r7]
 8003f62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f66:	4637      	mov	r7, r6
 8003f68:	42bb      	cmp	r3, r7
 8003f6a:	460e      	mov	r6, r1
 8003f6c:	d9f4      	bls.n	8003f58 <_printf_i+0x11c>
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d10b      	bne.n	8003f8a <_printf_i+0x14e>
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	07de      	lsls	r6, r3, #31
 8003f76:	d508      	bpl.n	8003f8a <_printf_i+0x14e>
 8003f78:	6923      	ldr	r3, [r4, #16]
 8003f7a:	6861      	ldr	r1, [r4, #4]
 8003f7c:	4299      	cmp	r1, r3
 8003f7e:	bfde      	ittt	le
 8003f80:	2330      	movle	r3, #48	; 0x30
 8003f82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f8a:	1b52      	subs	r2, r2, r5
 8003f8c:	6122      	str	r2, [r4, #16]
 8003f8e:	464b      	mov	r3, r9
 8003f90:	4621      	mov	r1, r4
 8003f92:	4640      	mov	r0, r8
 8003f94:	f8cd a000 	str.w	sl, [sp]
 8003f98:	aa03      	add	r2, sp, #12
 8003f9a:	f7ff fedf 	bl	8003d5c <_printf_common>
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	d14c      	bne.n	800403c <_printf_i+0x200>
 8003fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa6:	b004      	add	sp, #16
 8003fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fac:	4834      	ldr	r0, [pc, #208]	; (8004080 <_printf_i+0x244>)
 8003fae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fb2:	6829      	ldr	r1, [r5, #0]
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fba:	6029      	str	r1, [r5, #0]
 8003fbc:	061d      	lsls	r5, r3, #24
 8003fbe:	d514      	bpl.n	8003fea <_printf_i+0x1ae>
 8003fc0:	07df      	lsls	r7, r3, #31
 8003fc2:	bf44      	itt	mi
 8003fc4:	f043 0320 	orrmi.w	r3, r3, #32
 8003fc8:	6023      	strmi	r3, [r4, #0]
 8003fca:	b91e      	cbnz	r6, 8003fd4 <_printf_i+0x198>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	f023 0320 	bic.w	r3, r3, #32
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	e7af      	b.n	8003f38 <_printf_i+0xfc>
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	f043 0320 	orr.w	r3, r3, #32
 8003fde:	6023      	str	r3, [r4, #0]
 8003fe0:	2378      	movs	r3, #120	; 0x78
 8003fe2:	4828      	ldr	r0, [pc, #160]	; (8004084 <_printf_i+0x248>)
 8003fe4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fe8:	e7e3      	b.n	8003fb2 <_printf_i+0x176>
 8003fea:	0659      	lsls	r1, r3, #25
 8003fec:	bf48      	it	mi
 8003fee:	b2b6      	uxthmi	r6, r6
 8003ff0:	e7e6      	b.n	8003fc0 <_printf_i+0x184>
 8003ff2:	4615      	mov	r5, r2
 8003ff4:	e7bb      	b.n	8003f6e <_printf_i+0x132>
 8003ff6:	682b      	ldr	r3, [r5, #0]
 8003ff8:	6826      	ldr	r6, [r4, #0]
 8003ffa:	1d18      	adds	r0, r3, #4
 8003ffc:	6961      	ldr	r1, [r4, #20]
 8003ffe:	6028      	str	r0, [r5, #0]
 8004000:	0635      	lsls	r5, r6, #24
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	d501      	bpl.n	800400a <_printf_i+0x1ce>
 8004006:	6019      	str	r1, [r3, #0]
 8004008:	e002      	b.n	8004010 <_printf_i+0x1d4>
 800400a:	0670      	lsls	r0, r6, #25
 800400c:	d5fb      	bpl.n	8004006 <_printf_i+0x1ca>
 800400e:	8019      	strh	r1, [r3, #0]
 8004010:	2300      	movs	r3, #0
 8004012:	4615      	mov	r5, r2
 8004014:	6123      	str	r3, [r4, #16]
 8004016:	e7ba      	b.n	8003f8e <_printf_i+0x152>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	2100      	movs	r1, #0
 800401c:	1d1a      	adds	r2, r3, #4
 800401e:	602a      	str	r2, [r5, #0]
 8004020:	681d      	ldr	r5, [r3, #0]
 8004022:	6862      	ldr	r2, [r4, #4]
 8004024:	4628      	mov	r0, r5
 8004026:	f000 f82f 	bl	8004088 <memchr>
 800402a:	b108      	cbz	r0, 8004030 <_printf_i+0x1f4>
 800402c:	1b40      	subs	r0, r0, r5
 800402e:	6060      	str	r0, [r4, #4]
 8004030:	6863      	ldr	r3, [r4, #4]
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	2300      	movs	r3, #0
 8004036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800403a:	e7a8      	b.n	8003f8e <_printf_i+0x152>
 800403c:	462a      	mov	r2, r5
 800403e:	4649      	mov	r1, r9
 8004040:	4640      	mov	r0, r8
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	47d0      	blx	sl
 8004046:	3001      	adds	r0, #1
 8004048:	d0ab      	beq.n	8003fa2 <_printf_i+0x166>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	079b      	lsls	r3, r3, #30
 800404e:	d413      	bmi.n	8004078 <_printf_i+0x23c>
 8004050:	68e0      	ldr	r0, [r4, #12]
 8004052:	9b03      	ldr	r3, [sp, #12]
 8004054:	4298      	cmp	r0, r3
 8004056:	bfb8      	it	lt
 8004058:	4618      	movlt	r0, r3
 800405a:	e7a4      	b.n	8003fa6 <_printf_i+0x16a>
 800405c:	2301      	movs	r3, #1
 800405e:	4632      	mov	r2, r6
 8004060:	4649      	mov	r1, r9
 8004062:	4640      	mov	r0, r8
 8004064:	47d0      	blx	sl
 8004066:	3001      	adds	r0, #1
 8004068:	d09b      	beq.n	8003fa2 <_printf_i+0x166>
 800406a:	3501      	adds	r5, #1
 800406c:	68e3      	ldr	r3, [r4, #12]
 800406e:	9903      	ldr	r1, [sp, #12]
 8004070:	1a5b      	subs	r3, r3, r1
 8004072:	42ab      	cmp	r3, r5
 8004074:	dcf2      	bgt.n	800405c <_printf_i+0x220>
 8004076:	e7eb      	b.n	8004050 <_printf_i+0x214>
 8004078:	2500      	movs	r5, #0
 800407a:	f104 0619 	add.w	r6, r4, #25
 800407e:	e7f5      	b.n	800406c <_printf_i+0x230>
 8004080:	080043bd 	.word	0x080043bd
 8004084:	080043ce 	.word	0x080043ce

08004088 <memchr>:
 8004088:	4603      	mov	r3, r0
 800408a:	b510      	push	{r4, lr}
 800408c:	b2c9      	uxtb	r1, r1
 800408e:	4402      	add	r2, r0
 8004090:	4293      	cmp	r3, r2
 8004092:	4618      	mov	r0, r3
 8004094:	d101      	bne.n	800409a <memchr+0x12>
 8004096:	2000      	movs	r0, #0
 8004098:	e003      	b.n	80040a2 <memchr+0x1a>
 800409a:	7804      	ldrb	r4, [r0, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	428c      	cmp	r4, r1
 80040a0:	d1f6      	bne.n	8004090 <memchr+0x8>
 80040a2:	bd10      	pop	{r4, pc}

080040a4 <memcpy>:
 80040a4:	440a      	add	r2, r1
 80040a6:	4291      	cmp	r1, r2
 80040a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040ac:	d100      	bne.n	80040b0 <memcpy+0xc>
 80040ae:	4770      	bx	lr
 80040b0:	b510      	push	{r4, lr}
 80040b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040b6:	4291      	cmp	r1, r2
 80040b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040bc:	d1f9      	bne.n	80040b2 <memcpy+0xe>
 80040be:	bd10      	pop	{r4, pc}

080040c0 <memmove>:
 80040c0:	4288      	cmp	r0, r1
 80040c2:	b510      	push	{r4, lr}
 80040c4:	eb01 0402 	add.w	r4, r1, r2
 80040c8:	d902      	bls.n	80040d0 <memmove+0x10>
 80040ca:	4284      	cmp	r4, r0
 80040cc:	4623      	mov	r3, r4
 80040ce:	d807      	bhi.n	80040e0 <memmove+0x20>
 80040d0:	1e43      	subs	r3, r0, #1
 80040d2:	42a1      	cmp	r1, r4
 80040d4:	d008      	beq.n	80040e8 <memmove+0x28>
 80040d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040de:	e7f8      	b.n	80040d2 <memmove+0x12>
 80040e0:	4601      	mov	r1, r0
 80040e2:	4402      	add	r2, r0
 80040e4:	428a      	cmp	r2, r1
 80040e6:	d100      	bne.n	80040ea <memmove+0x2a>
 80040e8:	bd10      	pop	{r4, pc}
 80040ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040f2:	e7f7      	b.n	80040e4 <memmove+0x24>

080040f4 <_free_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4605      	mov	r5, r0
 80040f8:	2900      	cmp	r1, #0
 80040fa:	d040      	beq.n	800417e <_free_r+0x8a>
 80040fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004100:	1f0c      	subs	r4, r1, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	bfb8      	it	lt
 8004106:	18e4      	addlt	r4, r4, r3
 8004108:	f000 f910 	bl	800432c <__malloc_lock>
 800410c:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <_free_r+0x8c>)
 800410e:	6813      	ldr	r3, [r2, #0]
 8004110:	b933      	cbnz	r3, 8004120 <_free_r+0x2c>
 8004112:	6063      	str	r3, [r4, #4]
 8004114:	6014      	str	r4, [r2, #0]
 8004116:	4628      	mov	r0, r5
 8004118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800411c:	f000 b90c 	b.w	8004338 <__malloc_unlock>
 8004120:	42a3      	cmp	r3, r4
 8004122:	d908      	bls.n	8004136 <_free_r+0x42>
 8004124:	6820      	ldr	r0, [r4, #0]
 8004126:	1821      	adds	r1, r4, r0
 8004128:	428b      	cmp	r3, r1
 800412a:	bf01      	itttt	eq
 800412c:	6819      	ldreq	r1, [r3, #0]
 800412e:	685b      	ldreq	r3, [r3, #4]
 8004130:	1809      	addeq	r1, r1, r0
 8004132:	6021      	streq	r1, [r4, #0]
 8004134:	e7ed      	b.n	8004112 <_free_r+0x1e>
 8004136:	461a      	mov	r2, r3
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	b10b      	cbz	r3, 8004140 <_free_r+0x4c>
 800413c:	42a3      	cmp	r3, r4
 800413e:	d9fa      	bls.n	8004136 <_free_r+0x42>
 8004140:	6811      	ldr	r1, [r2, #0]
 8004142:	1850      	adds	r0, r2, r1
 8004144:	42a0      	cmp	r0, r4
 8004146:	d10b      	bne.n	8004160 <_free_r+0x6c>
 8004148:	6820      	ldr	r0, [r4, #0]
 800414a:	4401      	add	r1, r0
 800414c:	1850      	adds	r0, r2, r1
 800414e:	4283      	cmp	r3, r0
 8004150:	6011      	str	r1, [r2, #0]
 8004152:	d1e0      	bne.n	8004116 <_free_r+0x22>
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4401      	add	r1, r0
 800415a:	6011      	str	r1, [r2, #0]
 800415c:	6053      	str	r3, [r2, #4]
 800415e:	e7da      	b.n	8004116 <_free_r+0x22>
 8004160:	d902      	bls.n	8004168 <_free_r+0x74>
 8004162:	230c      	movs	r3, #12
 8004164:	602b      	str	r3, [r5, #0]
 8004166:	e7d6      	b.n	8004116 <_free_r+0x22>
 8004168:	6820      	ldr	r0, [r4, #0]
 800416a:	1821      	adds	r1, r4, r0
 800416c:	428b      	cmp	r3, r1
 800416e:	bf01      	itttt	eq
 8004170:	6819      	ldreq	r1, [r3, #0]
 8004172:	685b      	ldreq	r3, [r3, #4]
 8004174:	1809      	addeq	r1, r1, r0
 8004176:	6021      	streq	r1, [r4, #0]
 8004178:	6063      	str	r3, [r4, #4]
 800417a:	6054      	str	r4, [r2, #4]
 800417c:	e7cb      	b.n	8004116 <_free_r+0x22>
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	200001b0 	.word	0x200001b0

08004184 <sbrk_aligned>:
 8004184:	b570      	push	{r4, r5, r6, lr}
 8004186:	4e0e      	ldr	r6, [pc, #56]	; (80041c0 <sbrk_aligned+0x3c>)
 8004188:	460c      	mov	r4, r1
 800418a:	6831      	ldr	r1, [r6, #0]
 800418c:	4605      	mov	r5, r0
 800418e:	b911      	cbnz	r1, 8004196 <sbrk_aligned+0x12>
 8004190:	f000 f8bc 	bl	800430c <_sbrk_r>
 8004194:	6030      	str	r0, [r6, #0]
 8004196:	4621      	mov	r1, r4
 8004198:	4628      	mov	r0, r5
 800419a:	f000 f8b7 	bl	800430c <_sbrk_r>
 800419e:	1c43      	adds	r3, r0, #1
 80041a0:	d00a      	beq.n	80041b8 <sbrk_aligned+0x34>
 80041a2:	1cc4      	adds	r4, r0, #3
 80041a4:	f024 0403 	bic.w	r4, r4, #3
 80041a8:	42a0      	cmp	r0, r4
 80041aa:	d007      	beq.n	80041bc <sbrk_aligned+0x38>
 80041ac:	1a21      	subs	r1, r4, r0
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 f8ac 	bl	800430c <_sbrk_r>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d101      	bne.n	80041bc <sbrk_aligned+0x38>
 80041b8:	f04f 34ff 	mov.w	r4, #4294967295
 80041bc:	4620      	mov	r0, r4
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	200001b4 	.word	0x200001b4

080041c4 <_malloc_r>:
 80041c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c8:	1ccd      	adds	r5, r1, #3
 80041ca:	f025 0503 	bic.w	r5, r5, #3
 80041ce:	3508      	adds	r5, #8
 80041d0:	2d0c      	cmp	r5, #12
 80041d2:	bf38      	it	cc
 80041d4:	250c      	movcc	r5, #12
 80041d6:	2d00      	cmp	r5, #0
 80041d8:	4607      	mov	r7, r0
 80041da:	db01      	blt.n	80041e0 <_malloc_r+0x1c>
 80041dc:	42a9      	cmp	r1, r5
 80041de:	d905      	bls.n	80041ec <_malloc_r+0x28>
 80041e0:	230c      	movs	r3, #12
 80041e2:	2600      	movs	r6, #0
 80041e4:	603b      	str	r3, [r7, #0]
 80041e6:	4630      	mov	r0, r6
 80041e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ec:	4e2e      	ldr	r6, [pc, #184]	; (80042a8 <_malloc_r+0xe4>)
 80041ee:	f000 f89d 	bl	800432c <__malloc_lock>
 80041f2:	6833      	ldr	r3, [r6, #0]
 80041f4:	461c      	mov	r4, r3
 80041f6:	bb34      	cbnz	r4, 8004246 <_malloc_r+0x82>
 80041f8:	4629      	mov	r1, r5
 80041fa:	4638      	mov	r0, r7
 80041fc:	f7ff ffc2 	bl	8004184 <sbrk_aligned>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	4604      	mov	r4, r0
 8004204:	d14d      	bne.n	80042a2 <_malloc_r+0xde>
 8004206:	6834      	ldr	r4, [r6, #0]
 8004208:	4626      	mov	r6, r4
 800420a:	2e00      	cmp	r6, #0
 800420c:	d140      	bne.n	8004290 <_malloc_r+0xcc>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	4631      	mov	r1, r6
 8004212:	4638      	mov	r0, r7
 8004214:	eb04 0803 	add.w	r8, r4, r3
 8004218:	f000 f878 	bl	800430c <_sbrk_r>
 800421c:	4580      	cmp	r8, r0
 800421e:	d13a      	bne.n	8004296 <_malloc_r+0xd2>
 8004220:	6821      	ldr	r1, [r4, #0]
 8004222:	3503      	adds	r5, #3
 8004224:	1a6d      	subs	r5, r5, r1
 8004226:	f025 0503 	bic.w	r5, r5, #3
 800422a:	3508      	adds	r5, #8
 800422c:	2d0c      	cmp	r5, #12
 800422e:	bf38      	it	cc
 8004230:	250c      	movcc	r5, #12
 8004232:	4638      	mov	r0, r7
 8004234:	4629      	mov	r1, r5
 8004236:	f7ff ffa5 	bl	8004184 <sbrk_aligned>
 800423a:	3001      	adds	r0, #1
 800423c:	d02b      	beq.n	8004296 <_malloc_r+0xd2>
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	442b      	add	r3, r5
 8004242:	6023      	str	r3, [r4, #0]
 8004244:	e00e      	b.n	8004264 <_malloc_r+0xa0>
 8004246:	6822      	ldr	r2, [r4, #0]
 8004248:	1b52      	subs	r2, r2, r5
 800424a:	d41e      	bmi.n	800428a <_malloc_r+0xc6>
 800424c:	2a0b      	cmp	r2, #11
 800424e:	d916      	bls.n	800427e <_malloc_r+0xba>
 8004250:	1961      	adds	r1, r4, r5
 8004252:	42a3      	cmp	r3, r4
 8004254:	6025      	str	r5, [r4, #0]
 8004256:	bf18      	it	ne
 8004258:	6059      	strne	r1, [r3, #4]
 800425a:	6863      	ldr	r3, [r4, #4]
 800425c:	bf08      	it	eq
 800425e:	6031      	streq	r1, [r6, #0]
 8004260:	5162      	str	r2, [r4, r5]
 8004262:	604b      	str	r3, [r1, #4]
 8004264:	4638      	mov	r0, r7
 8004266:	f104 060b 	add.w	r6, r4, #11
 800426a:	f000 f865 	bl	8004338 <__malloc_unlock>
 800426e:	f026 0607 	bic.w	r6, r6, #7
 8004272:	1d23      	adds	r3, r4, #4
 8004274:	1af2      	subs	r2, r6, r3
 8004276:	d0b6      	beq.n	80041e6 <_malloc_r+0x22>
 8004278:	1b9b      	subs	r3, r3, r6
 800427a:	50a3      	str	r3, [r4, r2]
 800427c:	e7b3      	b.n	80041e6 <_malloc_r+0x22>
 800427e:	6862      	ldr	r2, [r4, #4]
 8004280:	42a3      	cmp	r3, r4
 8004282:	bf0c      	ite	eq
 8004284:	6032      	streq	r2, [r6, #0]
 8004286:	605a      	strne	r2, [r3, #4]
 8004288:	e7ec      	b.n	8004264 <_malloc_r+0xa0>
 800428a:	4623      	mov	r3, r4
 800428c:	6864      	ldr	r4, [r4, #4]
 800428e:	e7b2      	b.n	80041f6 <_malloc_r+0x32>
 8004290:	4634      	mov	r4, r6
 8004292:	6876      	ldr	r6, [r6, #4]
 8004294:	e7b9      	b.n	800420a <_malloc_r+0x46>
 8004296:	230c      	movs	r3, #12
 8004298:	4638      	mov	r0, r7
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	f000 f84c 	bl	8004338 <__malloc_unlock>
 80042a0:	e7a1      	b.n	80041e6 <_malloc_r+0x22>
 80042a2:	6025      	str	r5, [r4, #0]
 80042a4:	e7de      	b.n	8004264 <_malloc_r+0xa0>
 80042a6:	bf00      	nop
 80042a8:	200001b0 	.word	0x200001b0

080042ac <_realloc_r>:
 80042ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b0:	4680      	mov	r8, r0
 80042b2:	4614      	mov	r4, r2
 80042b4:	460e      	mov	r6, r1
 80042b6:	b921      	cbnz	r1, 80042c2 <_realloc_r+0x16>
 80042b8:	4611      	mov	r1, r2
 80042ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042be:	f7ff bf81 	b.w	80041c4 <_malloc_r>
 80042c2:	b92a      	cbnz	r2, 80042d0 <_realloc_r+0x24>
 80042c4:	f7ff ff16 	bl	80040f4 <_free_r>
 80042c8:	4625      	mov	r5, r4
 80042ca:	4628      	mov	r0, r5
 80042cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d0:	f000 f838 	bl	8004344 <_malloc_usable_size_r>
 80042d4:	4284      	cmp	r4, r0
 80042d6:	4607      	mov	r7, r0
 80042d8:	d802      	bhi.n	80042e0 <_realloc_r+0x34>
 80042da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042de:	d812      	bhi.n	8004306 <_realloc_r+0x5a>
 80042e0:	4621      	mov	r1, r4
 80042e2:	4640      	mov	r0, r8
 80042e4:	f7ff ff6e 	bl	80041c4 <_malloc_r>
 80042e8:	4605      	mov	r5, r0
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d0ed      	beq.n	80042ca <_realloc_r+0x1e>
 80042ee:	42bc      	cmp	r4, r7
 80042f0:	4622      	mov	r2, r4
 80042f2:	4631      	mov	r1, r6
 80042f4:	bf28      	it	cs
 80042f6:	463a      	movcs	r2, r7
 80042f8:	f7ff fed4 	bl	80040a4 <memcpy>
 80042fc:	4631      	mov	r1, r6
 80042fe:	4640      	mov	r0, r8
 8004300:	f7ff fef8 	bl	80040f4 <_free_r>
 8004304:	e7e1      	b.n	80042ca <_realloc_r+0x1e>
 8004306:	4635      	mov	r5, r6
 8004308:	e7df      	b.n	80042ca <_realloc_r+0x1e>
	...

0800430c <_sbrk_r>:
 800430c:	b538      	push	{r3, r4, r5, lr}
 800430e:	2300      	movs	r3, #0
 8004310:	4d05      	ldr	r5, [pc, #20]	; (8004328 <_sbrk_r+0x1c>)
 8004312:	4604      	mov	r4, r0
 8004314:	4608      	mov	r0, r1
 8004316:	602b      	str	r3, [r5, #0]
 8004318:	f7fd f9ea 	bl	80016f0 <_sbrk>
 800431c:	1c43      	adds	r3, r0, #1
 800431e:	d102      	bne.n	8004326 <_sbrk_r+0x1a>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	b103      	cbz	r3, 8004326 <_sbrk_r+0x1a>
 8004324:	6023      	str	r3, [r4, #0]
 8004326:	bd38      	pop	{r3, r4, r5, pc}
 8004328:	200001b8 	.word	0x200001b8

0800432c <__malloc_lock>:
 800432c:	4801      	ldr	r0, [pc, #4]	; (8004334 <__malloc_lock+0x8>)
 800432e:	f000 b811 	b.w	8004354 <__retarget_lock_acquire_recursive>
 8004332:	bf00      	nop
 8004334:	200001bc 	.word	0x200001bc

08004338 <__malloc_unlock>:
 8004338:	4801      	ldr	r0, [pc, #4]	; (8004340 <__malloc_unlock+0x8>)
 800433a:	f000 b80c 	b.w	8004356 <__retarget_lock_release_recursive>
 800433e:	bf00      	nop
 8004340:	200001bc 	.word	0x200001bc

08004344 <_malloc_usable_size_r>:
 8004344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004348:	1f18      	subs	r0, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	bfbc      	itt	lt
 800434e:	580b      	ldrlt	r3, [r1, r0]
 8004350:	18c0      	addlt	r0, r0, r3
 8004352:	4770      	bx	lr

08004354 <__retarget_lock_acquire_recursive>:
 8004354:	4770      	bx	lr

08004356 <__retarget_lock_release_recursive>:
 8004356:	4770      	bx	lr

08004358 <_init>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	bf00      	nop
 800435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435e:	bc08      	pop	{r3}
 8004360:	469e      	mov	lr, r3
 8004362:	4770      	bx	lr

08004364 <_fini>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	bf00      	nop
 8004368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436a:	bc08      	pop	{r3}
 800436c:	469e      	mov	lr, r3
 800436e:	4770      	bx	lr
